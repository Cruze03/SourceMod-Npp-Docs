<?xml version="1.0" encoding="Windows-1252" ?>
<NotepadPlus>
    <AutoComplete language="sourcemod">
    <Environment ignoreCase="yes"/>
        <KeyWord name="ATTN_TO_SNDLEVEL" func="yes">
            <Overload retVal="stock int" descr="
Params:
    attn                    Attenuation value.
Notes:
    Converts an attenuation value to a sound level.
    This function is from the HL2SDK.
Return:
    Integer sound level.
">
                <Param name="float attn"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AcceptEntityInput" func="yes">
            <Overload retVal="native bool" descr="
Params:
    dest                    Destination entity index.
    input                   Input action.
    activator               Entity index which initiated the sequence of actions (-1 for a NULL entity).
    caller                  Entity index from which this event is sent (-1 for a NULL entity).
    outputid                Unknown.
Notes:
    Invokes a named input method on an entity.
    After completion (successful or not), the current global variant is re-initialized.
Error:
    Invalid entity index or no mod support.
Return:
    True if successful otherwise false.
">
                <Param name="int dest"/>
                <Param name="const char[] input"/>
                <Param name="int activator=-1"/>
                <Param name="int caller=-1"/>
                <Param name="int outputid=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ActivateEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
Notes:
    Activates an entity (CBaseAnimating::Activate)
Error:
    Invalid entity or lack of mod support.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddAdmGroupCmdOverride" func="yes">
            <Overload retVal="native void" descr="
Params:
    id                      Group id.
    name                    String containing command name (case sensitive).
    type                    Override type (specific command or group).
    rule                    Override allow/deny setting.
Notes:
    Adds a group-specific override type.
">
                <Param name="GroupId id"/>
                <Param name="const char[] name"/>
                <Param name="OverrideType type"/>
                <Param name="OverrideRule rule"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddAmbientSoundHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Function to use as a hook.
Notes:
    Hooks all played ambient sounds.
Error:
    Invalid function hook.
">
                <Param name="AmbientSHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddCommandListener" func="yes">
            <Overload retVal="native bool" descr="
Params:
    callback                Callback.
    command                 Command, or if not specified, a global listener.
                            The command is case insensitive.
Notes:
    Adds a callback that will fire when a command is sent to the server.
    Registering commands is designed to create a new command as part of the UI,
    whereas this is a lightweight hook on a command string, existing or not.
    Using Reg*Cmd to intercept is in poor practice, as it physically creates a
    new command and can slow down dispatch in general.
    To see if this feature is available, use FeatureType_Capability and
    FEATURECAP_COMMANDLISTENER.
Return:
    True if this feature is available on the current game,
    false otherwise.
">
                <Param name="CommandListener callback"/>
                <Param name="const char[] command=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddCommandOverride" func="yes">
            <Overload retVal="native void" descr="
Params:
    cmd                     String containing command name (case sensitive).
    type                    Override type (specific command or group).
    flags                   New admin flag.
Notes:
    Adds a global command flag override.  Any command registered with this name
    will assume the new flag.  This is applied retroactively as well.
">
                <Param name="const char[] cmd"/>
                <Param name="OverrideType type"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddFileToDownloadsTable" func="yes">
            <Overload retVal="stock void" descr="
Params:
    filename                File that will be added to downloadables table.
Notes:
    Adds a file to the downloadables network string table.
    This forces a client to download the file if they do not already have it.
">
                <Param name="const char[] filename"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddGameLogHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Hook function.
Notes:
    Adds a game log hook.
">
                <Param name="GameLogHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddMenuItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    info                    Item information string.
    display                 Default item display string.
    style                   Drawing style flags.  Anything other than DEFAULT or
                            DISABLED will be completely ignored when paginating.
Notes:
    Appends a new item to the end of a menu.
Error:
    Invalid Handle or item limit reached.
Return:
    True on success, false on failure.
">
                <Param name="Handle menu"/>
                <Param name="const char[] info"/>
                <Param name="const char[] display"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddMultiTargetFilter" func="yes">
            <Overload retVal="native void" descr="
Params:
    pattern                 Pattern to match (case sensitive).
    filter                  Filter function.
    phrase                  Descriptive phrase to display on successful match.
    phraseIsML              True if phrase is multi-lingual, false otherwise.
Notes:
    Adds a multi-target filter function for ProcessTargetString().
">
                <Param name="const char[] pattern"/>
                <Param name="MultiTargetFilter filter"/>
                <Param name="const char[] phrase"/>
                <Param name="bool phraseIsML"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddNormalSoundHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Function to use as a hook.
Notes:
    Hooks all played normal sounds.
Error:
    Invalid function hook.
">
                <Param name="NormalSHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddServerTag" func="yes">
            <Overload retVal="native void" descr="
Params:
    tag                     Tag string to append.
Notes:
    Adds an informational string to the server&apos;s public &apos;tags&apos;.
    This string should be a short, unique identifier.
    Note: Tags are automatically removed when a plugin unloads.
    Note: Currently, this function does nothing because of bugs in the Valve master.
">
                <Param name="const char[] tag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddTargetsToMenu" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Menu Handle.
    source_client           Source client, or 0 to ignore immunity.
    in_game_only            True to only select in-game players.
    alive_only              True to only select alive players.
Notes:
    Adds targets to an admin menu.
    Each client is displayed as: name (userid)
    Each item contains the userid as a string for its info.
Return:
    Number of clients added.
">
                <Param name="Handle menu"/>
                <Param name="int source_client"/>
                <Param name="bool in_game_only=true"/>
                <Param name="bool alive_only=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddTargetsToMenu2" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Menu Handle.
    source_client           Source client, or 0 to ignore immunity.
    flags                   COMMAND_FILTER flags from commandfilters.inc.
Notes:
    Adds targets to an admin menu.
    Each client is displayed as: name (userid)
    Each item contains the userid as a string for its info.
Return:
    Number of clients added.
">
                <Param name="Handle menu"/>
                <Param name="int source_client"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddTempEntHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    te_name                 TE name to hook.
    hook                    Function to use as a hook.
Notes:
    Hooks a temp entity.
Error:
    Temp Entity name not available or invalid function hook.
">
                <Param name="const char[] te_name"/>
                <Param name="TEHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddToForward" func="yes">
            <Overload retVal="native bool" descr="
Params:
    fwd                     Handle to private forward.
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to specify the calling plugin.
    func                    Function to add to forward.
Notes:
    Adds a function to a private forward&apos;s call list.
    Cannot be used during an incomplete call.
Error:
    Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.
Return:
    True on success, false otherwise.
">
                <Param name="Handle fwd"/>
                <Param name="Handle plugin"/>
                <Param name="Function func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddToStringTable" func="yes">
            <Overload retVal="native void" descr="
Params:
    tableidx                A string table index.
    str                     String to add.
    userdata                An optional user data string.
    length                  Length of user data string. This should include the null terminator.
                            If set to -1, then user data will be not be altered if the specified string
                            already exists in the string table.
Notes:
    Adds a string to a given string table.
">
                <Param name="int tableidx"/>
                <Param name="const char[] str"/>
                <Param name="const char[] userdata=&apos;&apos;"/>
                <Param name="int length=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddToTopMenu" func="yes">
            <Overload retVal="native TopMenuObject" descr="
Params:
    topmenu                 TopMenu Handle.
    name                    Object name (MUST be unique).
    type                    Object type.
    handler                 Handler for topobj.
    parent                  Parent topobj ID, or INVALID_TOPMENUOBJECT for none.
                            Items must have a category parent.
                            Categories must not have a parent.
    cmdname                 Command name (for access overrides).
    flags                   Default access flags.
    info_string             Arbitrary storage (max 255 bytes).
Notes:
    Adds an topobj to a TopMenu.
Error:
    Invalid TopMenu Handle.
Return:
    A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on
    failure.
">
                <Param name="Handle topmenu"/>
                <Param name="const char[] name"/>
                <Param name="TopMenuObjectType type"/>
                <Param name="TopMenuHandler handler"/>
                <Param name="TopMenuObject parent"/>
                <Param name="const char[] cmdname=&apos;&apos;"/>
                <Param name="int flags=0"/>
                <Param name="const char[] info_string=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddUserFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    ...                     Flags to set on the client.
Notes:
    Sets access flags on a client.  If the client is not an admin,
    a temporary, anonymous AdminId is given.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="AdminFlag ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="AddVectors" func="yes">
            <Overload retVal="stock void" descr="
Params:
    vec1                    First vector.
    vec2                    Second vector.
    result                  Result buffer.
Notes:
    Adds two vectors.  It is safe to use either input buffer as an output
    buffer.
">
                <Param name="const float vec1[3]"/>
                <Param name="const float vec2[3]"/>
                <Param name="float result[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AdminInheritGroup" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId index of the admin.
    gid                     GroupId index of the group.
Notes:
    Adds a group to an admin&apos;s inherited group list.  Any flags the group has
    will be added to the admin&apos;s effective flags.
Return:
    True on success, false on invalid input or duplicate membership.
">
                <Param name="AdminId id"/>
                <Param name="GroupId gid"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ArcCosine" func="yes">
            <Overload retVal="native float" descr="
Params:
    angle                   Input value.
Notes:
    Returns the arccosine of the input value.
Return:
    acos(value) in radians.
">
                <Param name="float angle"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ArcSine" func="yes">
            <Overload retVal="native float" descr="
Params:
    angle                   Input value.
Notes:
    Returns the arcsine of the input value.
Return:
    asin(value) in radians.
">
                <Param name="float angle"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ArcTangent" func="yes">
            <Overload retVal="native float" descr="
Params:
    angle                   Input value.
Notes:
    Returns the arctangent of the input value.
Return:
    atan(value) in radians.
">
                <Param name="float angle"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ArcTangent2" func="yes">
            <Overload retVal="native float" descr="
Params:
    x                       Horizontal value.
    y                       Vertical value.
Notes:
    Returns the arctangent2 of the input values.
Return:
    atan2(value) in radians.
">
                <Param name="float x"/>
                <Param name="float y"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AreClientCookiesCached" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
Notes:
    Checks if a clients cookies have been loaded from the database.
Error:
    Invalid client index.
Return:
    True if loaded, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AskPluginLoad2" func="yes">
            <Overload retVal="forward APLRes" descr="
Params:
    myself                  Handle to the plugin.
    late                    Whether or not the plugin was loaded &apos;late&apos; (after map load).
    error                   Error message buffer in case load failed.
    err_max                 Maximum number of characters for error message buffer.
Notes:
    Called before OnPluginStart, in case the plugin wants to check for load failure.
    This is called even if the plugin type is &apos;private.&apos;  Any natives from modules are
    not available at this point.  Thus, this forward should only be used for explicit
    pre-emptive things, such as adding dynamic natives, setting certain types of load
    filters (such as not loading the plugin for certain games).
    It is not safe to call externally resolved natives until OnPluginStart().
    Any sort of RTE in this function will cause the plugin to fail loading.
    If you do not return anything, it is treated like returning success.
    If a plugin has an AskPluginLoad2(), AskPluginLoad() will not be called.
Return:
    APLRes_Success for load success, APLRes_Failure or APLRes_SilentFailure otherwise
">
                <Param name="Handle myself"/>
                <Param name="bool late"/>
                <Param name="char[] error"/>
                <Param name="int err_max"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AssertEq" func="yes">
            <Overload retVal="stock void" descr="
">
                <Param name="const char[] text"/>
                <Param name="int cell1"/>
                <Param name="int cell2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AssertFalse" func="yes">
            <Overload retVal="stock void" descr="
">
                <Param name="const char[] text"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AssertTrue" func="yes">
            <Overload retVal="stock void" descr="
">
                <Param name="const char[] text"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AutoExecConfig" func="yes">
            <Overload retVal="native void" descr="
Params:
    autoCreate              If true, and the config file does not exist, such a config
                            file will be automatically created and populated with
                            information from the plugin&apos;s registered cvars.
    name                    Name of the config file, excluding the .cfg extension.
                            If empty, &lt;plugin.filename.cfg&gt; is assumed.
    folder                  Folder under cfg/ to use.  By default this is &apos;sourcemod.&apos;
Notes:
    Specifies that the given config file should be executed after plugin load.
    OnConfigsExecuted() will not be called until the config file has executed,
    but it will be called if the execution fails.
">
                <Param name="bool autoCreate=true"/>
                <Param name="const char[] name=&apos;&apos;"/>
                <Param name="const char[] folder=&apos;sourcemod&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BanClient" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client being banned.
    time                    Time (in minutes) to ban (0 = permanent).
    flags                   Flags for controlling the ban mechanism.  If AUTHID
                            is set and no AUTHID is available, the ban will fail
                            unless AUTO is also flagged.
    reason                  Reason to ban the client for.
    kick_message            Message to display to the user when kicking.
    command                 Command string to identify the source.  If this is left
                            empty, then the OnBanClient forward will not be called.
    source                  A source value that could be interpreted as a player
                            index of any sort (not actually checked by Core).
Notes:
    Bans a client.
Error:
    Invalid client index or client not in game.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="int time"/>
                <Param name="int flags"/>
                <Param name="const char[] reason"/>
                <Param name="const char[] kick_message=&apos;&apos;"/>
                <Param name="const char[] command=&apos;&apos;"/>
                <Param name="any source=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BanIdentity" func="yes">
            <Overload retVal="native bool" descr="
Params:
    identity                String to ban (ip or authstring).
    time                    Time to ban for (0 = permanent).
    flags                   Flags (only IP and AUTHID are valid flags here).
    reason                  Ban reason string.
    command                 Command string to identify the source.  If this is left
                            empty, then the OnBanIdentity forward will not be called.
    source                  A source value that could be interpreted as a player
                            index of any sort (not actually checked by Core).
Notes:
    Bans an identity (either an IP address or auth string).
Return:
    True on success, false on failure.
">
                <Param name="const char[] identity"/>
                <Param name="int time"/>
                <Param name="int flags"/>
                <Param name="const char[] reason"/>
                <Param name="const char[] command=&apos;&apos;"/>
                <Param name="any source=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_IsClientGagged" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
Notes:
    Returns whether or not a client is gagged
Return:
    True if client is gagged, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_IsClientMuted" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
Notes:
    Returns whether or not a client is muted
Return:
    True if client is muted, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_OnClientGag" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index
    gagState                True if client was gaged, false otherwise
Notes:
    Called when a client is gagged or ungagged
">
                <Param name="int client"/>
                <Param name="bool gagState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_OnClientMute" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index
    muteState               True if client was muted, false otherwise
Notes:
    Called when a client is muted or unmuted
">
                <Param name="int client"/>
                <Param name="bool muteState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_SetClientGag" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    gagState                True to gag client, false to ungag.
Notes:
    Sets a client&apos;s gag state
Return:
    True if this caused a change in gag state, false otherwise.
">
                <Param name="int client"/>
                <Param name="bool gagState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BaseComm_SetClientMute" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    muteState               True to mute client, false to unmute.
Notes:
    Sets a client&apos;s mute state
Return:
    True if this caused a change in mute state, false otherwise.
">
                <Param name="int client"/>
                <Param name="bool muteState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfGetNumBytesLeft" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Returns the number of bytes left in a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Number of bytes left unread.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadAngle" func="yes">
            <Overload retVal="native float" descr="
Params:
    bf                      bf_read handle to read from.
    numBits                 Optional number of bits to use.
Notes:
    Reads a bit angle from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Angle read.
">
                <Param name="Handle bf"/>
                <Param name="int numBits=8"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadAngles" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_read handle to read from.
    angles                  Destination angle vector.
Notes:
    Reads a 3D angle vector from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float angles[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadBool" func="yes">
            <Overload retVal="native bool" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a single bit from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Bit value read.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadByte" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a byte from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Byte value read (read as 8bit).
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadChar" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a character from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Character value read.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadCoord" func="yes">
            <Overload retVal="native float" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a coordinate from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Coordinate read.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadEntity" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads an entity from a readable bitbuffer (bf_read).
    This is a wrapper around BfReadShort().
Error:
    Invalid or incorrect Handle.
Return:
    Entity index read.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a floating point number from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Floating point value read.
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadNum" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a normal integer to a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Integer value read (read as 32bit).
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadShort" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a 16bit integer from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Integer value read (read as 16bit).
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadString" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    line                    If true the buffer will be copied until it reaches a &apos;\n&apos; or a null terminator.
Notes:
    Reads a string from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Number of bytes written to the buffer.  If the bitbuffer stream overflowed,
    that is, had no terminator before the end of the stream, then a negative
    number will be returned equal to the number of characters written to the
    buffer minus 1.  The buffer will be null terminated regardless of the
    return value.
">
                <Param name="Handle bf"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="bool line=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadVecCoord" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_read handle to read from.
    coord                   Destination coordinate array.
Notes:
    Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float coord[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadVecNormal" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_read handle to read from.
    vec                     Destination vector array.
Notes:
    Reads a 3D normal vector from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfReadWord" func="yes">
            <Overload retVal="native int" descr="
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).
Error:
    Invalid or incorrect Handle.
Return:
    Integer value read (read as 16bit).
">
                <Param name="Handle bf"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteAngle" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    angle                   Angle to write.
    numBits                 Optional number of bits to use.
Notes:
    Writes a bit angle to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float angle"/>
                <Param name="int numBits=8"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteAngles" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    angles                  Angle vector to write.
Notes:
    Writes a 3D angle vector to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float angles[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    bit                     Bit to write (true for 1, false for 0).
Notes:
    Writes a single bit to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="bool bit"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteByte" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    byte                    Byte to write (value will be written as 8bit).
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="int byte"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteChar" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    chr                     Character to write.
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteCoord" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    coord                   Coordinate to write.
Notes:
    Writes a coordinate to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float coord"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    ent                     Entity index to write.
Notes:
    Writes an entity to a writable bitbuffer (bf_write).
    This is a wrapper around BfWriteShort().
Error:
    Invalid or incorrect Handle, or invalid entity.
">
                <Param name="Handle bf"/>
                <Param name="int ent"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    num                     Number to write.
Notes:
    Writes a floating point number to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteNum" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    num                     Integer to write (value will be written as 32bit).
Notes:
    Writes a normal integer to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteShort" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    num                     Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit integer to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteString" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    string                  Text string to write.
Notes:
    Writes a string to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="const char[] string"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteVecCoord" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    coord                   Coordinate array to write.
Notes:
    Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float coord[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteVecNormal" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    vec                     Vector to write.
Notes:
    Writes a 3D normal vector to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BfWriteWord" func="yes">
            <Overload retVal="native void" descr="
Params:
    bf                      bf_write handle to write to.
    num                     Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).
Error:
    Invalid or incorrect Handle.
">
                <Param name="Handle bf"/>
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BindAdminIdentity" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId of the admin.
    auth                    Auth method to use, predefined or from RegisterAuthIdentType().
    ident                   String containing the arbitrary, unique identity.
Notes:
    Binds an admin to an identity for fast lookup later on.  The bind must be unique.
Return:
    True on success, false if the auth method was not found,
    ident was already taken, or ident invalid for auth method.
">
                <Param name="AdminId id"/>
                <Param name="const char[] auth"/>
                <Param name="const char[] ident"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BitToFlag" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    bit                     Bit to convert.
    flag                    Stores the converted flag by reference.
Notes:
    Converts a bit to an AdminFlag.
Return:
    True on success, false otherwise.
">
                <Param name="int bit"/>
                <Param name="AdminFlag &amp;flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BreakString" func="yes">
            <Overload retVal="native int" descr="
Params:
    source                  Source input string.
    arg                     Stores argument read from string.
    argLen                  Maximum length of argument buffer.
Notes:
    Finds the first &apos;argument&apos; in a string; either a set of space
    terminated characters, or a fully quoted string.  After the
    argument is found, whitespace is read until the next portion
    of the string is reached.  If nothing remains, -1 is returned.
    Otherwise, the index to the first character is returned.
Return:
    Index to next piece of string, or -1 if none.
">
                <Param name="const char[] source"/>
                <Param name="char[] arg"/>
                <Param name="int argLen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="BuildPath" func="yes">
            <Overload retVal="native int" descr="
Params:
    type                    Type of path to build as the base.
    buffer                  Buffer to store the path.
    maxlength               Maximum length of buffer.
    fmt                     Format string.
    ...                     Format arguments.
Notes:
    Builds a path relative to the SourceMod folder.  This should be used instead of
    directly referencing addons/sourcemod, in case users change the name of their
    folder layout.
Return:
    Number of bytes written to buffer (not including null terminator).
">
                <Param name="PathType type"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ByteCountToCells" func="yes">
            <Overload retVal="stock int" descr="
Params:
    size                    Number of bytes.
Notes:
    Given a maximum string size (including the null terminator),
    returns the number of cells required to fit that string.
Return:
    Minimum number of cells required to fit the byte count.
">
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_AliasToWeaponID" func="yes">
            <Overload retVal="native CSWeaponID" descr="
Params:
    alias                   Weapon alias to attempt to get an id for.
Notes:
    Gets a weaponID from a alias
Return:
    Returns a weapon id or 0 if failed to find a match.
    @note For best results use CS_GetTranslatedWeaponAlias on the weapon name before passing it.
">
                <Param name="const char[] alias"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_DropWeapon" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    weaponIndex             Index of weapon to drop.
    toss                    True to toss weapon (with velocity) or false to just drop weapon
    blockhook               Set to true to stop the corresponding CS_OnCSWeaponDrop
Notes:
    Forces a player to drop or toss their weapon
Error:
    Invalid client index, client not in game, or invalid weapon index.
">
                <Param name="int client"/>
                <Param name="int weaponIndex"/>
                <Param name="bool toss"/>
                <Param name="bool blockhook = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetClientAssists" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to get assists of.
Notes:
    Gets a client&apos;s assists (CS:GO only)
Error:
    Invalid client.
Return:
    Returns the client&apos;s assists.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetClientClanTag" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to get clan tag for.
    buffer                  Buffer to store clients clan tag in.
    size                    Size of the buffer.
Notes:
    Gets a clients clan tag
Error:
    Invalid client.
Return:
    Number of non-null bytes written.
">
                <Param name="int client"/>
                <Param name="char[] buffer"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetClientContributionScore" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to get score of.
Notes:
    Gets a client&apos;s contribution score (CS:GO only)
Error:
    Invalid client.
Return:
    Returns the client&apos;s score.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetMVPCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to get mvp count of.
Notes:
    Gets a client&apos;s mvp count
Error:
    Invalid client.
Return:
    Returns the client&apos;s internal MVP count.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetTeamScore" func="yes">
            <Overload retVal="native int" descr="
Params:
    team                    Team index to get score for.
Notes:
    Gets a team&apos;s score
Error:
    Invalid team index.
Return:
    Returns the internal team score.
">
                <Param name="int team"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetTranslatedWeaponAlias" func="yes">
            <Overload retVal="native void" descr="
Params:
    alias                   Weapons alias to get weapon name for.
    weapon                  Buffer to store weapons name
    size                    Size of buffer to store the weapons name.
                            @note Will set the buffer to the original alias if it is not an alias to a weapon.
Notes:
    Gets a weapon name from a weapon alias
">
                <Param name="const char[] alias"/>
                <Param name="char[] weapon"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_GetWeaponPrice" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client to check weapon price for.
    id                      Weapon id for the weapon to check
    defaultprice            Set to true to get defaultprice.
Notes:
    Gets a weapon&apos;s price
Error:
    Invalid client, failing to get weapon info, or failing to get price offset.
    @note c4, knife and shield will always return 0. vest, vest helmet and night vision will always return default price.
Return:
    Returns price of the weapon (even if modified)
">
                <Param name="int client"/>
                <Param name="CSWeaponID id"/>
                <Param name="bool defaultprice = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_IsValidWeaponID" func="yes">
            <Overload retVal="native bool" descr="
Params:
    weaponID                WeaponID to check
Notes:
    Returns weather a WeaponID is valid on the current mod (css or csgo)
Return:
    Returns true if its a valid WeaponID false otherwise.
    @note This will return false always for CSWeapon_NONE. Should only be called after OnMapStart since weapon info isnt intialized before.
">
                <Param name="CSWeaponID id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_ItemDefIndexToID" func="yes">
            <Overload retVal="native CSWeaponID" descr="
Params:
    iDefIndex               Definition index to get the CSWeaponID value for.
Notes:
    Returns a CSWeaponID equivalent based on the item definition index.
Error:
    Invalid definition index.
    @note In most cases the id will be the item definition index. Works for CS:GO ONLY.
Return:
    Returns CSWeaponID value for the definition index.
">
                <Param name="int iDefIndex"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_OnBuyCommand" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index
    weapon                  User input for weapon name
Notes:
    Called when a player attempts to purchase an item.
    Return Plugin_Continue to allow the purchase or return a
    higher action to deny.
">
                <Param name="int client"/>
                <Param name="const char[] weapon"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_OnCSWeaponDrop" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index
    weaponIndex             Weapon index
Notes:
    Called when CSWeaponDrop is called
    Return Plugin_Continue to allow the call or return a
    higher action to block.
">
                <Param name="int client"/>
                <Param name="int weaponIndex"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_OnGetWeaponPrice" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index
    weapon                  Weapon classname
    price                   Buffer param for the price of the weapon
                            @note Not all &apos;weapons&apos; call GetWeaponPrice. Example: c4, knife, vest, vest helmet, night vision.
Notes:
    Called when game retrieves a weapon&apos;s price for a player.
    Return Plugin_Continue to use default value or return a higher
    action to use a newly-set price.
    This can be called multiple times per weapon purchase
">
                <Param name="int client"/>
                <Param name="const char[] weapon"/>
                <Param name="int &amp;price"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_OnTerminateRound" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    delay                   Time (in seconds) until new round starts
    reason                  Reason for round end
Notes:
    Called when TerminateRound is called.
    Return Plugin_Continue to ignore, return Plugin_Changed to continue,
    using the given delay and reason, or return Plugin_Handled or a higher
    action to block TerminateRound from firing.
">
                <Param name="float &amp;delay"/>
                <Param name="CSRoundEndReason &amp;reason"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_RespawnPlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Respawns a player.
Error:
    Invalid client index, client not in game.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SetClientAssists" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index to set assists for.
    value                   Value to set client&apos;s assists as.
Notes:
    Sets a client&apos;s assists (CS:GO only)
Error:
    Invalid client.
">
                <Param name="int client"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SetClientClanTag" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index to set clan tag for.
    tag                     Tag to set clients clan tag as.
Notes:
    Sets a clients clan tag
Error:
    Invalid client.
">
                <Param name="int client"/>
                <Param name="const char[] tag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SetClientContributionScore" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index to set score for.
    value                   Value to set client&apos;s score as.
Notes:
    Sets a client&apos;s contribution score (CS:GO only)
Error:
    Invalid client.
">
                <Param name="int client"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SetMVPCount" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index to set mvp count for.
    value                   Value to set client&apos;s mvp count as.
Notes:
    Sets a client&apos;s mvp count
Error:
    Invalid client.
">
                <Param name="int client"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SetTeamScore" func="yes">
            <Overload retVal="native void" descr="
Params:
    team                    Team index to set score for.
    value                   Value to set teams score as.
Notes:
    Sets a team&apos;s score
Error:
    Invalid team index.
    @note This will update the scoreboard only after the scoreboard update function is called.
    Use SetTeamScore plus this to update the scoreboard instantly and save values correctly.
">
                <Param name="int team"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_SwitchTeam" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    team                    Team index.
Notes:
    Switches the player&apos;s team.
Error:
    Invalid client index, client not in game.
">
                <Param name="int client"/>
                <Param name="int team"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_TerminateRound" func="yes">
            <Overload retVal="native void" descr="
Params:
    delay                   Time (in seconds) to delay before new round starts
    reason                  Reason for the round ending
    blockhook               Set to true to stop the corresponding CS_OnTerminateRound
                            forward from being called.
Notes:
    Forces round to end with a reason
">
                <Param name="float delay"/>
                <Param name="CSRoundEndReason reason"/>
                <Param name="bool blockhook = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_UpdateClientModel" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Sets a player&apos;s model based on their current class
Error:
    Invalid client index, client not in game.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_WeaponIDToAlias" func="yes">
            <Overload retVal="native int" descr="
Params:
    weaponID                WeaponID to get alias for.
    destination             Destination string to hold the weapon alias.
    len                     Length of the destination array.
Notes:
    Gets a alias from a weaponID
Return:
    Returns number of cells written.
">
                <Param name="CSWeaponID weaponID"/>
                <Param name="char[] destination"/>
                <Param name="int len"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CS_WeaponIDToItemDefIndex" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      CSWeaponID to get the item definition for.
Notes:
    Returns a item definition index equivalent based on the CSWeaponID.
Error:
    Invalid weapon id.
    @note In most cases the item deinition index will be the id. Works for CS:GO ONLY.
Return:
    Returns item definition index value for the weapon id.
">
                <Param name="CSWeaponID id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_Cancel" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Cancels a call to a function or forward&apos;s call list.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
            </Overload>
        </KeyWord>
        <KeyWord name="Call_Finish" func="yes">
            <Overload retVal="native int" descr="
Params:
    result                  Return value of function or forward&apos;s call list.
Notes:
    Completes a call to a function or forward&apos;s call list.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
">
                <Param name="any &amp;result=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Array to push.
    size                    Size of array.
Notes:
    Pushes an array onto the current call.
    Changes to array are not copied back to caller. Use PushArrayEx() to do this.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="const any[] value"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushArrayEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Array to push.
    size                    Size of array.
    cpflags                 Whether or not changes should be copied back to the input array.
                            See SP_PARAM_* constants for details.
Notes:
    Pushes an array onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="any[] value"/>
                <Param name="int size"/>
                <Param name="int cpflags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushCell" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Cell value to push.
Notes:
    Pushes a cell onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushCellRef" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Cell reference to push.
Notes:
    Pushes a cell by reference onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="any &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Floating point value to push.
Notes:
    Pushes a float onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushFloatRef" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   Floating point reference to push.
Notes:
    Pushes a float by reference onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="float &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushNullString" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Pushes the NULL_STRING onto the current call.
    @see IsNullString
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushNullVector" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Pushes the NULL_VECTOR onto the current call.
    @see IsNullVector
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushString" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   String to push.
Notes:
    Pushes a string onto the current call.
    Changes to string are not copied back to caller. Use PushStringEx() to do this.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_PushStringEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    value                   String to push.
    length                  Length of string buffer.
    szflags                 Flags determining how string should be handled.
                            See SM_PARAM_STRING_* constants for details.
                            The default (0) is to push ASCII.
    cpflags                 Whether or not changes should be copied back to the input array.
                            See SM_PARAM_* constants for details.
Notes:
    Pushes a string onto the current call.
    Cannot be used before a call has been started.
Error:
    Called before a call has been started.
">
                <Param name="char[] value"/>
                <Param name="int length"/>
                <Param name="int szflags"/>
                <Param name="int cpflags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_StartForward" func="yes">
            <Overload retVal="native void" descr="
Params:
    fwd                     Handle to global or private forward.
Notes:
    Starts a call to functions in a forward&apos;s call list.
    Cannot be used during an incomplete call.
Error:
    Invalid or corrupt forward handle or called before another call has completed.
">
                <Param name="Handle fwd"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Call_StartFunction" func="yes">
            <Overload retVal="native void" descr="
Params:
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to specify the calling plugin.
    func                    Function to call.
Notes:
    Starts a call to a function.
    Cannot be used during an incomplete call.
Error:
    Invalid or corrupt plugin handle, invalid function, or called before another call has completed.
">
                <Param name="Handle plugin"/>
                <Param name="Function func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CanAdminTarget" func="yes">
            <Overload retVal="native bool" descr="
Params:
    admin                   Admin doing the targetting (may be INVALID_ADMIN_ID).
    target                  Target admin (may be INVALID_ADMIN_ID).
Notes:
    Tests whether one admin can target another.
    The heuristics for this check are as follows:
    0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.
    1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.
    2. If the targeted AdminId is the same as the targeting AdminId,
    (self) targeting succeeds.
    3. If the targeting admin is root, targeting succeeds.
    4. If the targeted admin has access higher (as interpreted by
    (sm_immunity_mode) than the targeting admin, then targeting fails.
    5. If the targeted admin has specific immunity from the
    targeting admin via group immunities, targeting fails.
    6. Targeting succeeds.
Return:
    True if targetable, false if immune.
">
                <Param name="AdminId admin"/>
                <Param name="AdminId target"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CanMapChooserStartVote" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Checks if MapChooser will allow a vote
Return:
    True if a vote can be held, or false if mapchooser is already holding a vote.
">
            </Overload>
        </KeyWord>
        <KeyWord name="CanPanelDrawFlags" func="yes">
            <Overload retVal="native bool" descr="
Params:
    panel                   A MenuPanel Handle.
    style                   ITEMDRAW style flags.
Notes:
    Returns whether or not the given drawing flags are supported by
    the menu style.
Error:
    Invalid Handle.
Return:
    True if item is drawable, false otherwise.
">
                <Param name="Handle panel"/>
                <Param name="int style"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CanTestFeatures" func="yes">
            <Overload retVal="stock bool" descr="
Notes:
    Returns whether &apos;GetFeatureStatus&apos; will work. Using this native
    or this function will not cause SourceMod to fail loading on older versions,
    however, GetFeatureStatus will only work if this function returns true.
Return:
    True if GetFeatureStatus will work, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="CanUserTarget" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
    target                  Target player&apos;s index.
Notes:
    Returns whether a user can target another user.
    This is a helper function for CanAdminTarget.
Error:
    Invalid or unconnected player indexers.
Return:
    True if target is targettable by the player, false otherwise.
">
                <Param name="int client"/>
                <Param name="int target"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CancelClientMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    autoIgnore              If true, no menus can be re-drawn on the client during
                            the cancellation process.
    hStyle                  MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Cancels a menu on a client.  This will only affect non-external menus.
Return:
    True if a menu was cancelled, false otherwise.
">
                <Param name="int client"/>
                <Param name="bool autoIgnore=false"/>
                <Param name="Handle hStyle=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CancelCreatedEvent" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handled to the event.
Notes:
    Cancels a previously created game event that has not been fired.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CancelMenu" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
Notes:
    Cancels a menu from displaying on all clients.  While the
    cancellation is in progress, this menu cannot be re-displayed
    to any clients.
    The menu may still exist on the client&apos;s screen after this command.
    This simply verifies that the menu is not being used anywhere.
    If any vote is in progress on a menu, it will be cancelled.
Error:
    Invalid Handle.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CancelVote" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Cancels the vote in progress.
Error:
    If no vote is in progress.
">
            </Overload>
        </KeyWord>
        <KeyWord name="ChangeClientTeam" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    team                    Mod-specific team index.
Notes:
    Changes a client&apos;s team through the mod&apos;s generic team changing function.
    On CS:S, this will kill the player.
Error:
    Invalid client index, client not connected, or lack of
    mod support.
">
                <Param name="int client"/>
                <Param name="int team"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ChangeEdictState" func="yes">
            <Overload retVal="native void" descr="
Params:
    edict                   Index to the edict.
    offset                  Offset to mark as changed.  If 0,
                            the entire edict is marked as changed.
Notes:
    Marks an entity as state changed.  This can be useful if you set an offset
    and wish for it to be immediately changed over the network.  By default this
    is not done for offset setting functions.
Error:
    Invalid entity or offset out of bounds.
">
                <Param name="int edict"/>
                <Param name="int offset = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CharToLower" func="yes">
            <Overload retVal="stock int" descr="
Params:
    chr                     Character to convert.
Notes:
    Converts an uppercase character to its lowercase counterpart.
Return:
    Lowercase character on success,
    no change on failure.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CharToUpper" func="yes">
            <Overload retVal="stock int" descr="
Params:
    chr                     Character to convert.
Notes:
    Converts a lowercase character to its uppercase counterpart.
Return:
    Uppercase character on success,
    no change on failure.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CheckAccess" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId of the admin.
    command                 Command name.  If the command is not found, the default
                            flags are used.
    flags                   Flag string to use as a default, if the command or override
                            is not found.
    override_only           If true, SourceMod will not attempt to find a matching
                            command, and it will only use the default flags specified.
                            Otherwise, SourceMod will ignore the default flags if
                            there is a matching admin command.
Notes:
    Returns whether an admin has access to a given command string.  The string
    can be any override string, as overrides can be independent of
    commands.  This feature essentially allows you to create custom flags
    using the override system.
Return:
    True if the admin has access, false otherwise.
">
                <Param name="AdminId id"/>
                <Param name="const char[] command"/>
                <Param name="int flags"/>
                <Param name="bool override_only=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CheckCommandAccess" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    command                 Command name.  If the command is not found, the default
                            flags are used.
    flags                   Flag string to use as a default, if the command or override
                            is not found.
    override_only           If true, SourceMod will not attempt to find a matching
                            command, and it will only use the default flags specified.
                            Otherwise, SourceMod will ignore the default flags if
                            there is a matching admin command.
Notes:
    Returns whether a client has access to a given command string.  The string
    can be any override string, as overrides can be independent of
    commands.  This feature essentially allows you to create custom
    flags using the override system.
Return:
    True if the client has access, false otherwise.
">
                <Param name="int client"/>
                <Param name="const char[] command"/>
                <Param name="int flags"/>
                <Param name="bool override_only=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CheckVoteDelay" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the number of seconds you should &apos;wait&apos; before displaying
    a publicly invocable menu.  This number is the time remaining until
    (last_vote + sm_vote_delay).
Return:
    Number of seconds to wait, or 0 for none.
">
            </Overload>
        </KeyWord>
        <KeyWord name="ClearArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
Notes:
    Clears an array of all entries.  This is the same as ResizeArray(0).
Error:
    Invalid Handle.
">
                <Param name="Handle array"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ClearSyncHud" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index to send the message to.
    sync                    Synchronization object.
Notes:
    Clears the text on a synchronized HUD channel.
    This is not the same as sending &apos;&apos; because it guarantees that it won&apos;t
    overwrite text on another channel.  For example, consider the scenario:
    1. Your synchronized message goes to channel 3.
    2. Someone else&apos;s non-synchronized message goes to channel 3.
    If you were to simply send &apos;&apos; on your synchronized message,
    then someone else&apos;s text could be overwritten.
Error:
    Client not in-game, or sync object not valid.
">
                <Param name="int client"/>
                <Param name="Handle sync"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ClearTrie" func="yes">
            <Overload retVal="native void" descr="
Params:
    map                     Map Handle.
Notes:
    Clears all entries from a Map.
Error:
    Invalid Handle.
">
                <Param name="Handle map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ClientCommand" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Index of the client.
    fmt                     Format of the client command.
    ...                     Format parameters
Notes:
    Executes a client command.  Note that this will not work on clients unless
    they have cl_restrict_server_commands set to 0.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="CloneArray" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    array                   Array handle to be cloned
Notes:
    Clones an array, returning a new handle with the same size and data. This should NOT
    be confused with CloneHandle. This is a completely new handle with the same data but
    no relation to the original. You MUST close it.
Error:
    Invalid Handle
Return:
    New handle to the cloned array object
">
                <Param name="Handle array"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CloneHandle" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    hndl                    Handle to clone/duplicate.
    plugin                  Optional Handle to another plugin to mark as the new owner.
                            If no owner is passed, the owner becomes the calling plugin.
Notes:
    Clones a Handle.  When passing handles in between plugins, caching handles
    can result in accidental invalidation when one plugin releases the Handle, or is its owner
    is unloaded from memory.  To prevent this, the Handle may be &apos;cloned&apos; with a new owner.
    Usually, you will be cloning Handles for other plugins.  This means that if you clone
    the Handle without specifying the new owner, it will assume the identity of your original
    calling plugin, which is not very useful.  You should either specify that the receiving
    plugin should clone the handle on its own, or you should explicitly clone the Handle
    using the receiving plugin&apos;s identity Handle.
Error:
    Invalid handles will cause a run time error.
Return:
    Handle on success, INVALID_HANDLE if not cloneable.
">
                <Param name="Handle hndl"/>
                <Param name="Handle plugin=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CloseHandle" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    Handle to close.
Notes:
    Closes a Handle.  If the handle has multiple copies open,
    it is not destroyed unless all copies are closed.
    Closing a Handle has a different meaning for each Handle type.  Make
    sure you read the documentation on whatever provided the Handle.
Error:
    Invalid handles will cause a run time error.
">
                <Param name="Handle hndl"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CommandExists" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    command                 Command to find.
Notes:
    Returns true if the supplied command exists.
Return:
    True if command is found, false otherwise.
">
                <Param name="const char[] command"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CompileRegex" func="yes">
            <Overload retVal="native Regex" descr="
Params:
    pattern                 The regular expression pattern.
    flags                   General flags for the regular expression.
    error                   Error message encountered, if applicable.
    maxLen                  Maximum string length of the error buffer.
    errcode                 Regex type error code encountered, if applicable.
Notes:
    Precompile a regular expression.  Use this if you intend on using the
    same expression multiple times.  Pass the regex handle returned here to
    MatchRegex to check for matches.
Return:
    Valid regex handle on success, INVALID_HANDLE on failure.
">
                <Param name="const char[] pattern"/>
                <Param name="int flags = 0"/>
                <Param name="char[] error=&apos;&apos;"/>
                <Param name="int maxLen = 0"/>
                <Param name="RegexError &amp;errcode = REGEX_ERROR_NONE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Cosine" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value in radians.
Notes:
    Returns the cosine of the argument.
Return:
    cos(value).
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateAdmGroup" func="yes">
            <Overload retVal="native GroupId" descr="
Params:
    group_name              String containing the group name.
Notes:
    Adds a new group.  Name must be unique.
Return:
    A new group id, INVALID_GROUP_ID if it already exists.
">
                <Param name="const char[] group_name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateAdmin" func="yes">
            <Overload retVal="native AdminId" descr="
Params:
    name                    Name for this entry (does not have to be unique).
                            Specify an empty string for an anonymous admin.
Notes:
    Creates a new admin entry in the permissions cache and returns the generated AdminId index.
Return:
    New AdminId index or INVALID_ADMIN_ID if name is empty
">
                <Param name="const char[] name=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateArray" func="yes">
            <Overload retVal="native ArrayList" descr="
Params:
    blocksize               The number of cells each member of the array can
                            hold.  For example, 32 cells is equivalent to:
                            new Array[X][32]
    startsize               Initial size of the array.  Note that data will
                            NOT be auto-initialized.
Notes:
    Creates a dynamic global cell array.  While slower than a normal array,
    it can be used globally AND dynamically, which is otherwise impossible.
    The contents of the array are uniform; i.e. storing a string at index X
    and then retrieving it as an integer is NOT the same as StringToInt()!
    The &apos;blocksize&apos; determines how many cells each array slot has; it cannot
    be changed after creation.
Return:
    New Handle to the array object.
">
                <Param name="int blocksize=1"/>
                <Param name="int startsize=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateAuthMethod" func="yes">
            <Overload retVal="native bool" descr="
Params:
    method                  Name of the authentication method.
Notes:
    Creates an admin auth method.  This does not need to be called more than once
    per method, ever.
Return:
    True on success, false on failure.
">
                <Param name="const char[] method"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateConVar" func="yes">
            <Overload retVal="native ConVar" descr="
Params:
    name                    Name of new convar.
    defaultValue            String containing the default value of new convar.
    description             Optional description of the convar.
    flags                   Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details.
    hasMin                  Optional boolean that determines if the convar has a minimum value.
    min                     Minimum floating point value that the convar can have if hasMin is true.
    hasMax                  Optional boolean that determines if the convar has a maximum value.
    max                     Maximum floating point value that the convar can have if hasMax is true.
Notes:
    Creates a new console variable.
Error:
    Convar name is blank or is the same as an existing console command.
Return:
    A handle to the newly created convar. If the convar already exists, a handle to it will still be returned.
">
                <Param name="const char[] name"/>
                <Param name="const char[] defaultValue"/>
                <Param name="const char[] description=&apos;&apos;"/>
                <Param name="int flags=0"/>
                <Param name="bool hasMin=false"/>
                <Param name="float min=0.0"/>
                <Param name="bool hasMax=false"/>
                <Param name="float max=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateDataPack" func="yes">
            <Overload retVal="native DataPack" descr="
Notes:
    Creates a new data pack.
Return:
    A Handle to the data pack.  Must be closed with CloseHandle().
">
            </Overload>
        </KeyWord>
        <KeyWord name="CreateDataTimer" func="yes">
            <Overload retVal="stock Handle" descr="
Params:
    interval                Interval from the current game time to execute the given function.
    func                    Function to execute once the given interval has elapsed.
    datapack                The newly created datapack is passed though this by-reference
                            parameter to the timer callback function.
    flags                   Timer flags.
Notes:
    Creates a timer associated with a new datapack, and returns the datapack.
    The datapack is automatically freed when the timer ends.
    The position of the datapack is not reset or changed for the timer function.
Return:
    Handle to the timer object.  You do not need to call CloseHandle().
">
                <Param name="float interval"/>
                <Param name="Timer func"/>
                <Param name="Handle &amp;datapack"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateDialog" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Index of the client.
    kv                      KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information).
    type                    Message type to display ingame.
Notes:
    Creates different types of ingame messages.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="Handle kv"/>
                <Param name="DialogType type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateDirectory" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path to create.
    mode                    Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have
                            the execute bit set on Linux.  On Windows, the mode is ignored.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to create folders in the game&apos;s
                            Valve search paths, rather than directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for default.
                            In this case, mode is ignored.
Notes:
    Creates a directory.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] path"/>
                <Param name="int mode"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;DEFAULT_WRITE_PATH&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateEdict" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Creates a new edict (the basis of a networkable entity)
Return:
    Index of the edict, 0 on failure.
">
            </Overload>
        </KeyWord>
        <KeyWord name="CreateEntityByName" func="yes">
            <Overload retVal="native int" descr="
Params:
    classname               Entity classname.
    ForceEdictIndex         Edict index used by the created entity (ignored on Orangebox and above).
Notes:
    Creates an entity by string name, but does not spawn it (see DispatchSpawn).
    If ForceEdictIndex is not -1, then it will use the edict by that index. If the index is
    invalid or there is already an edict using that index, it will error out.
Error:
    Invalid edict index, or no mod support.
Return:
    Entity index on success, or -1 on failure.
">
                <Param name="const char[] classname"/>
                <Param name="int ForceEdictIndex=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateEvent" func="yes">
            <Overload retVal="native Event" descr="
Params:
    name                    Name of event.
    force                   If set to true, this forces the event to be created even if it&apos;s not being hooked.
                            Note that this will not force it if the event doesn&apos;t exist at all.
Notes:
    Creates a game event to be fired later.
    The Handle should not be closed via CloseHandle().  It must be closed via
    event.Fire() or event.Cancel().
Return:
    Handle to event. INVALID_HANDLE is returned if the event doesn&apos;t exist or isn&apos;t
    being hooked (unless force is true).
">
                <Param name="const char[] name"/>
                <Param name="bool force=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateFakeClient" func="yes">
            <Overload retVal="native int" descr="
Params:
    name                    Name to use.
Notes:
    Creates a fake client.
Return:
    Client index on success, 0 otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateForward" func="yes">
            <Overload retVal="native PrivateForward" descr="
Params:
    type                    Execution type to be used.
    ...                     Variable number of parameter types (up to 32).
Notes:
    Creates a private forward.
    No functions are automatically added. Use AddToForward() to do this.
    Private forwards can be cloned.
    Use CloseHandle() to destroy these.
Error:
    More than 32 paramater types passed.
Return:
    Handle to new private forward.
">
                <Param name="ExecType type"/>
                <Param name="ParamType ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateGlobalForward" func="yes">
            <Overload retVal="native GlobalForward" descr="
Params:
    name                    Name of public function to use in forward.
    type                    Execution type to be used.
    ...                     Variable number of parameter types (up to 32).
Notes:
    Creates a global forward.
    The name used to create the forward is used as its public function in all target plugins.
    This is ideal for global, static forwards that are never changed.
    Global forwards cannot be cloned.
    Use CloseHandle() to destroy these.
Error:
    More than 32 paramater types passed.
Return:
    Handle to new global forward.
">
                <Param name="const char[] name"/>
                <Param name="ExecType type"/>
                <Param name="ParamType ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateHudSynchronizer" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Creates a HUD synchronization object.  This object is used to automatically assign and
    re-use channels for a set of messages.
    The HUD has a hardcoded number of channels (usually 6) for displaying
    text.  You can use any channel for any area of the screen.  Text on
    different channels can overlap, but text on the same channel will
    erase the old text first.  This overlapping and overwriting gets problematic.
    A HUD synchronization object automatically selects channels for you based on
    the following heuristics:
    - If channel X was last used by the object, and hasn&apos;t been modified again,
    channel X gets re-used.
    - Otherwise, a new channel is chosen based on the least-recently-used channel.
    This ensures that if you display text on a sync object, that the previous text
    displayed on it will always be cleared first.  This is because your new text
    will either overwrite the old text on the same channel, or because another
    channel has already erased your text.
    Note that messages can still overlap if they are on different synchronization
    objects, or they are displayed to manual channels.
    These are particularly useful for displaying repeating or refreshing HUD text, in
    addition to displaying multiple message sets in one area of the screen (for example,
    center-say messages that may pop up randomly that you don&apos;t want to overlap each
    other).
Return:
    New HUD synchronization object.
    The Handle can be closed with CloseHandle().
    If HUD text is not supported on this mod, then
    INVALID_HANDLE is returned.
">
            </Overload>
        </KeyWord>
        <KeyWord name="CreateKeyValues" func="yes">
            <Overload retVal="native KeyValues" descr="
Params:
    name                    Name of the root section.
    firstKey                If non-empty, specifies the first key value.
    firstValue              If firstKey is non-empty, specifies the first key&apos;s value.
Notes:
    Creates a new KeyValues structure.  The Handle must always be closed.
Return:
    A Handle to a new KeyValues structure.
">
                <Param name="const char[] name"/>
                <Param name="const char[] firstKey=&apos;&apos;"/>
                <Param name="const char[] firstValue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateMenu" func="yes">
            <Overload retVal="native Menu" descr="
Params:
    handler                 Function which will receive menu actions.
    actions                 Optionally set which actions to receive.  Select,
                            Cancel, and End will always be received regardless
                            of whether they are set or not.  They are also
                            the only default actions.
Notes:
    Creates a new, empty menu using the default style.
Return:
    A new menu Handle.
">
                <Param name="MenuHandler handler"/>
                <Param name="MenuAction actions=MENU_ACTIONS_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateMenuEx" func="yes">
            <Overload retVal="native Menu" descr="
Params:
    hStyle                  MenuStyle Handle, or INVALID_HANDLE to use the default style.
    handler                 Function which will receive menu actions.
    actions                 Optionally set which actions to receive.  Select,
                            Cancel, and End will always be received regardless
                            of whether they are set or not.  They are also
                            the only default actions.
Notes:
    Creates a Menu from a MenuStyle.  The Handle must be closed with
    CloseHandle().
Error:
    Invalid Handle other than INVALID_HANDLE.
Return:
    A new menu Handle.
">
                <Param name="Handle hStyle=INVALID_HANDLE"/>
                <Param name="MenuHandler handler"/>
                <Param name="MenuAction actions=MENU_ACTIONS_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateNative" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Name of the dynamic native; must be unique among
                            all other registered dynamic natives.
    func                    Function to use as the dynamic native.
Notes:
    Creates a dynamic native.  This should only be called in AskPluginLoad(), or
    else you risk not having your native shared with other plugins.
">
                <Param name="const char[] name"/>
                <Param name="NativeCall func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreatePanel" func="yes">
            <Overload retVal="native Panel" descr="
Params:
    hStyle                  MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw
    menus without any extra helper functions.  The Handle must be closed
    with CloseHandle().
Error:
    Invalid Handle other than INVALID_HANDLE.
Return:
    A new MenuPanel Handle.
">
                <Param name="Handle hStyle=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreatePanelFromMenu" func="yes">
            <Overload retVal="native Panel" descr="
Params:
    menu                    Menu Handle.
Notes:
    Creates a raw MenuPanel based off the menu&apos;s style.
    The Handle must be freed with CloseHandle().
Error:
    Invalid Handle.
Return:
    A new MenuPanel Handle.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateProfiler" func="yes">
            <Overload retVal="native Profiler" descr="
Notes:
    Creates a new profile object.  The Handle must be freed
    using delete or CloseHandle().
Return:
    Handle to the profiler object.
">
            </Overload>
        </KeyWord>
        <KeyWord name="CreateStack" func="yes">
            <Overload retVal="native ArrayStack" descr="
Params:
    blocksize               The number of cells each entry in the stack can
                            hold.  For example, 32 cells is equivalent to:
                            new Array[X][32]
Notes:
    Creates a stack structure.  A stack is a LIFO (last in, first out)
    vector (array) of items.  It has O(1) insertion and O(1) removal.
    Stacks have two operations: Push (adding an item) and Pop (removes
    items in reverse-push order).
    The contents of the stack are uniform; i.e. storing a string and then
    retrieving it as an integer is NOT the same as StringToInt()!
    The &apos;blocksize&apos; determines how many cells each slot has; it cannot
    be changed after creation.
Return:
    New stack Handle.
">
                <Param name="int blocksize=1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateTimer" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    interval                Interval from the current game time to execute the given function.
    func                    Function to execute once the given interval has elapsed.
    data                    Handle or value to pass through to the timer callback function.
    flags                   Flags to set (such as repeatability or auto-Handle closing).
Notes:
    Creates a basic timer.  Calling CloseHandle() on a timer will end the timer.
Return:
    Handle to the timer object.  You do not need to call CloseHandle().
    If the timer could not be created, INVALID_HANDLE will be returned.
">
                <Param name="float interval"/>
                <Param name="Timer func"/>
                <Param name="any data=INVALID_HANDLE"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateTopMenu" func="yes">
            <Overload retVal="native TopMenu" descr="
Params:
    handler                 Handler to use for drawing the root title.
Notes:
    Creates a TopMenu.
Return:
    A new TopMenu Handle, or INVALID_HANDLE on failure.
">
                <Param name="TopMenuHandler handler"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CreateTrie" func="yes">
            <Overload retVal="native StringMap" descr="
Notes:
    Creates a hash map. A hash map is a container that can map strings (called
    &apos;keys&apos;) to arbitrary values (cells, arrays, or strings). Keys in a hash map
    are unique. That is, there is at most one entry in the map for a given key.
    Insertion, deletion, and lookup in a hash map are all considered to be fast
    operations, amortized to O(1), or constant time.
    The word &apos;Trie&apos; in this API is historical. As of SourceMod 1.6, tries have
    been internally replaced with hash tables, which have O(1) insertion time
    instead of O(n).
Return:
    New Map Handle, which must be freed via CloseHandle().
">
            </Overload>
        </KeyWord>
        <KeyWord name="CreateTrieSnapshot" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    map                     Map Handle.
Notes:
    Creates a snapshot of all keys in the map. If the map is changed after this
    call, the changes are not reflected in the snapshot. Keys are not sorted.
Error:
    Invalid Handle.
Return:
    New Map Snapshot Handle, which must be closed via CloseHandle().
">
                <Param name="Handle map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DegToRad" func="yes">
            <Overload retVal="stock float" descr="
Params:
    angle                   Degrees.
Notes:
    Converts degrees to radians.
Return:
    Radians.
">
                <Param name="float angle"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DeleteFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path of the file to delete.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to delete files existing in the Valve
                            search path, rather than solely files existing directly
                            in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Deletes a file.
Return:
    True on success, false on failure or if file not immediately removed.
">
                <Param name="const char[] path"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;DEFAULT_WRITE_PATH&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DirExists" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path to the directory.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to find files existing in any of
                            the Valve search paths, rather than solely files
                            existing directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Checks if a directory exists.
Return:
    True if the directory exists, false otherwise.
">
                <Param name="const char[] path"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;GAME&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DispatchKeyValue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Destination entity index.
    keyName                 Name of the key.
    value                   String value.
Notes:
    Dispatches a KeyValue into given entity using a string value.
Error:
    Invalid entity index, or no mod support.
Return:
    True on success, false otherwise.
">
                <Param name="int entity"/>
                <Param name="const char[] keyName"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DispatchKeyValueFloat" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Destination entity index.
    keyName                 Name of the key.
    value                   Floating point value.
Notes:
    Dispatches a KeyValue into given entity using a floating point value.
Error:
    Invalid entity index, or no mod support.
Return:
    True on success, false otherwise.
">
                <Param name="int entity"/>
                <Param name="const char[] keyName"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DispatchKeyValueVector" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Destination entity index.
    keyName                 Name of the key.
    vec                     Vector value.
Notes:
    Dispatches a KeyValue into given entity using a vector value.
Error:
    Invalid entity index, or no mod support.
Return:
    True on success, false otherwise.
">
                <Param name="int entity"/>
                <Param name="const char[] keyName"/>
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DispatchSpawn" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Entity index of the created entity.
Notes:
    Spawns an entity into the game.
Error:
    Invalid entity index, or no mod support.
Return:
    True on success, false otherwise.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DisplayAskConnectBox" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client index.
    time                    Duration to hold the panel on the client&apos;s screen.
    ip                      Destination IP.
    password                Password to connect to the destination IP. The client will be able to see this.
Notes:
    Displays a panel asking the client to connect to a specified IP.
">
                <Param name="int client"/>
                <Param name="float time"/>
                <Param name="const char[] ip"/>
                <Param name="const char[] password = &apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DisplayMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    client                  Client index.
    time                    Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client.
Error:
    Invalid Handle or client not in game.
Return:
    True on success, false on failure.
">
                <Param name="Handle menu"/>
                <Param name="int client"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DisplayMenuAtItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    client                  Client index.
    first_item              First item to begin drawing from.
    time                    Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client, starting from the given item.
Error:
    Invalid Handle or client not in game.
Return:
    True on success, false on failure.
">
                <Param name="Handle menu"/>
                <Param name="int client"/>
                <Param name="int first_item"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DisplayTopMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    topmenu                 TopMenu Handle.
    client                  Client index.
    position                Position to display from.
Notes:
    Displays a TopMenu to a client.
Error:
    Invalid TopMenu Handle or client not in game.
Return:
    True on success, false on failure.
">
                <Param name="Handle topmenu"/>
                <Param name="int client"/>
                <Param name="TopMenuPosition position"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DisplayTopMenuCategory" func="yes">
            <Overload retVal="native bool" descr="
Params:
    topmenu                 TopMenu Handle.
    category                Category topobj id.
    client                  Client index.
Notes:
    Displays a TopMenu category to a client.
Error:
    Invalid TopMenu Handle or client not in game.
Return:
    True on success, false on failure.
">
                <Param name="Handle topmenu"/>
                <Param name="TopMenuObject category"/>
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DrawPanelItem" func="yes">
            <Overload retVal="native int" descr="
Params:
    panel                   A MenuPanel Handle.
    text                    Display text to use.  If not a raw line,
                            the style may automatically add color markup.
                            No numbering or newlines are needed.
    style                   ITEMDRAW style flags.
Notes:
    Draws an item on a panel.  If the item takes up a slot, the position
    is returned.
Error:
    Invalid Handle.
Return:
    A slot position, or 0 if item was a rawline or could not be drawn.
">
                <Param name="Handle panel"/>
                <Param name="const char[] text"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DrawPanelText" func="yes">
            <Overload retVal="native bool" descr="
Params:
    panel                   A MenuPanel Handle, or INVALID_HANDLE if inside a
                            MenuAction_DisplayItem callback.
    text                    Display text to use.
Notes:
    Draws a raw line of text on a panel, without any markup other than a newline.
Error:
    Invalid Handle.
Return:
    True on success, false if raw lines are not supported.
">
                <Param name="Handle panel"/>
                <Param name="const char[] text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DumpAdminCache" func="yes">
            <Overload retVal="native void" descr="
Params:
    part                    Part of the cache to dump.  Specifying groups also dumps admins.
    rebuild                 If true, the rebuild forwards will fire.
Notes:
    Tells the admin system to dump a portion of the cache.
">
                <Param name="AdminCachePart part"/>
                <Param name="bool rebuild"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitAmbientGameSound" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    gameSound               Name of game sound.
    pos                     Origin of sound.
    entity                  Entity index to associate sound with.
    flags                   Sound flags.
    delay                   Play delay.
Notes:
    Emits an ambient game sound.
    Game sounds are found in a game&apos;s scripts/game_sound.txt or other files
    referenced from it
    Note that if a game sound has a rndwave section, one of them will be returned
    at random.
">
                <Param name="const char[] gameSound"/>
                <Param name="const float pos[3]"/>
                <Param name="int entity = SOUND_FROM_WORLD"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float delay = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitAmbientSound" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Sound file name relative to the &apos;sound&apos; folder.
    pos                     Origin of sound.
    entity                  Entity index to associate sound with.
    level                   Sound level (from 0 to 255).
    flags                   Sound flags.
    vol                     Volume (from 0.0 to 1.0).
    pitch                   Pitch (from 0 to 255).
    delay                   Play delay.
Notes:
    Emits an ambient sound.
">
                <Param name="const char[] name"/>
                <Param name="const float pos[3]"/>
                <Param name="int entity = SOUND_FROM_WORLD"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float vol = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="float delay = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitGameSound" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    clients                 Array of client indexes.
    numClients              Number of clients in the array.
    gameSound               Name of game sound.
    entity                  Entity to emit from.
    flags                   Sound flags.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
Notes:
    Emits a game sound to a list of clients.
    Game sounds are found in a game&apos;s scripts/game_sound.txt or other files
    referenced from it
    Note that if a game sound has a rndwave section, one of them will be returned
    at random.
Error:
    Invalid client index.
Return:
    True if the sound was played successfully, false if it failed
">
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="const char[] gameSound"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitGameSoundToAll" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    gameSound               Name of game sound.
    entity                  Entity to emit from.
    flags                   Sound flags.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
Notes:
    Wrapper to emit game sound to all clients.
    Game sounds are found in a game&apos;s scripts/game_sound.txt or other files
    referenced from it
    Note that if a game sound has a rndwave section, one of them will be returned
    at random.
Error:
    Invalid client index.
">
                <Param name="const char[] gameSound"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitGameSoundToClient" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    client                  Client index.
    gameSound               Name of game sound.
    entity                  Entity to emit from.
    flags                   Sound flags.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
Notes:
    Wrapper to emit a game sound to one client.
    Game sounds are found in a game&apos;s scripts/game_sound.txt or other files
    referenced from it
    Note that if a game sound has a rndwave section, one of them will be returned
    at random.
Error:
    Invalid client index.
">
                <Param name="int client"/>
                <Param name="const char[] gameSound"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitSentence" func="yes">
            <Overload retVal="native void" descr="
Params:
    clients                 Array of client indexes.
    numClients              Number of clients in the array.
    sentence                Sentence index (from PrecacheSentenceFile).
    entity                  Entity to emit from.
    channel                 Channel to emit with.
    level                   Sound level.
    flags                   Sound flags.
    volume                  Sound volume.
    pitch                   Sound pitch.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
    ...                     Optional list of Float[3] arrays to specify additional origins.
Notes:
    Emits a sentence to a list of clients.
Error:
    Invalid client index.
">
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="int sentence"/>
                <Param name="int entity"/>
                <Param name="int channel = SNDCHAN_AUTO"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float volume = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitSound" func="yes">
            <Overload retVal="native void" descr="
Params:
    clients                 Array of client indexes.
    numClients              Number of clients in the array.
    sample                  Sound file name relative to the &apos;sound&apos; folder.
    entity                  Entity to emit from.
    channel                 Channel to emit with.
    level                   Sound level.
    flags                   Sound flags.
    volume                  Sound volume.
    pitch                   Sound pitch.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
    ...                     Optional list of Float[3] arrays to specify additional origins.
Notes:
    Emits a sound to a list of clients.
Error:
    Invalid client index.
">
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="const char[] sample"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int channel = SNDCHAN_AUTO"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float volume = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitSoundEntry" func="yes">
            <Overload retVal="native void" descr="
Params:
    clients                 Array of client indexes.
    numClients              Number of clients in the array.
    soundEntry              Sound entry name.
    sample                  Sound file name relative to the &apos;sound&apos; folder.
    entity                  Entity to emit from.
    channel                 Channel to emit with.
    level                   Sound level.
    seed                    Sound seed.
    flags                   Sound flags.
    volume                  Sound volume.
    pitch                   Sound pitch.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
    ...                     Optional list of Float[3] arrays to specify additional origins.
Notes:
    Emits a sound or game sound to a list of clients using the latest version of the engine sound interface.
    This native is only available in engines that are greater than or equal to Portal 2.
Error:
    Invalid client index.
">
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="const char[] soundEntry"/>
                <Param name="const char[] sample"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int channel = SNDCHAN_AUTO"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int seed = 0"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float volume = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitSoundToAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    sample                  Sound file name relative to the &apos;sound&apos; folder.
    entity                  Entity to emit from.
    channel                 Channel to emit with.
    level                   Sound level.
    flags                   Sound flags.
    volume                  Sound volume.
    pitch                   Sound pitch.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
Notes:
    Wrapper to emit sound to all clients.
Error:
    Invalid client index.
">
                <Param name="const char[] sample"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int channel = SNDCHAN_AUTO"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float volume = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EmitSoundToClient" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client index.
    sample                  Sound file name relative to the &apos;sound&apos; folder.
    entity                  Entity to emit from.
    channel                 Channel to emit with.
    level                   Sound level.
    flags                   Sound flags.
    volume                  Sound volume.
    pitch                   Sound pitch.
    speakerentity           Unknown.
    origin                  Sound origin.
    dir                     Sound direction.
    updatePos               Unknown (updates positions?)
    soundtime               Alternate time to play sound for.
Notes:
    Wrapper to emit sound to one client.
Error:
    Invalid client index.
">
                <Param name="int client"/>
                <Param name="const char[] sample"/>
                <Param name="int entity = SOUND_FROM_PLAYER"/>
                <Param name="int channel = SNDCHAN_AUTO"/>
                <Param name="int level = SNDLEVEL_NORMAL"/>
                <Param name="int flags = SND_NOFLAGS"/>
                <Param name="float volume = SNDVOL_NORMAL"/>
                <Param name="int pitch = SNDPITCH_NORMAL"/>
                <Param name="int speakerentity = -1"/>
                <Param name="const float origin[3] = NULL_VECTOR"/>
                <Param name="const float dir[3] = NULL_VECTOR"/>
                <Param name="bool updatePos = true"/>
                <Param name="float soundtime = 0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EndMessage" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Ends a previously started user message (network message).
">
            </Overload>
        </KeyWord>
        <KeyWord name="EndOfMapVoteEnabled" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Checks if MapChooser is set to run an end of map vote.
Return:
    True if enabled, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="EndPrepSDKCall" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Finalizes an SDK call preparation and returns the resultant Handle.
Return:
    A new SDKCall Handle on success, or INVALID_HANDLE on failure.
">
            </Overload>
        </KeyWord>
        <KeyWord name="EntIndexToEntRef" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity index.
Notes:
    Converts an entity index into a serial encoded entity reference.
Return:
    Entity reference.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EntRefToEntIndex" func="yes">
            <Overload retVal="native int" descr="
Params:
    ref                     Entity reference.
Notes:
    Retrieves the entity index from a reference.
Return:
    Entity index.
">
                <Param name="int ref"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnterProfilingEvent" func="yes">
            <Overload retVal="native void" descr="
Params:
    group                   Budget group. This can be &apos;all&apos; for a default, or a short
                            description like &apos;Timers&apos; or &apos;Events&apos;.
    name                    A name to attribute to this profiling event.
Notes:
    Mark the start of a profiling event.
">
                <Param name="const char[] group"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EquipPlayerWeapon" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    weapon                  CBaseCombatWeapon entity index.
Notes:
    Equip&apos;s a player&apos;s weapon.
Error:
    Invalid client or entity, lack of mod support, or client not in
    game.
">
                <Param name="int client"/>
                <Param name="int weapon"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ExplodeString" func="yes">
            <Overload retVal="stock int" descr="
Params:
    text                    The string to split.
    split                   The string to use as a split delimiter.
    buffers                 An array of string buffers (2D array).
    maxStrings              Number of string buffers (first dimension size).
    maxStringLength         Maximum length of each string buffer.
    copyRemainder           False (default) discard excess pieces, true to ignore
                            delimiters after last piece.
Notes:
    Breaks a string into pieces and stores each piece into an array of buffers.
Return:
    Number of strings retrieved.
">
                <Param name="const char[] text"/>
                <Param name="const char[] split"/>
                <Param name="char[][] buffers"/>
                <Param name="int maxStrings"/>
                <Param name="int maxStringLength"/>
                <Param name="bool copyRemainder = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Exponential" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value.
Notes:
    Returns the value of raising the input by e.
Return:
    exp(value).
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ExtendMapTimeLimit" func="yes">
            <Overload retVal="native bool" descr="
Params:
    time                    Number of seconds to extend map time limit by.
                            The number can be negative to decrease the time limit.
                            If 0, the map will be set to have no time limit.
Notes:
    Extends the map time limit in a way that will notify all plugins.
Return:
    True on success, false if operation is not supported.
">
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ExtinguishEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
Notes:
    Extinguishes an entity that is on fire.
Error:
    Invalid entity or client not in game, or lack of mod support.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FadeClientVolume" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    percent                 Fade percentage.
    outtime                 Fade out time, in seconds.
    holdtime                Hold time, in seconds.
    intime                  Fade in time, in seconds.
Notes:
    Fades a client&apos;s volume level toward silence or a given percentage.
Error:
    Invalid client index or client not in game.
">
                <Param name="int client"/>
                <Param name="float percent"/>
                <Param name="float outtime"/>
                <Param name="float holdtime"/>
                <Param name="float intime"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FakeClientCommand" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Index of the client.
    fmt                     Format of the client command.
    ...                     Format parameters
Notes:
    Executes a client command on the server without being networked.
    FakeClientCommand() overwrites the command tokenization buffer.  This can
    cause undesired effects because future calls to GetCmdArg* will return
    data from the FakeClientCommand(), not the parent command.  If you are in
    a hook where this matters (for example, a &apos;say&apos; hook), you should use
    FakeClientCommandEx() instead.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="FakeClientCommandEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Index of the client.
    fmt                     Format of the client command.
    ...                     Format parameters
Notes:
    Executes a client command on the server without being networked.  The
    execution of the client command is delayed by one frame to prevent any
    re-entrancy issues that might surface with FakeClientCommand().
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="FakeClientCommandKeyValues" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Index of the client.
    kv                      KeyValues data to be sent.
Notes:
    Executes a KeyValues client command on the server without being networked.
Error:
    Invalid client index, client not connected,
    or unsupported on current game.
">
                <Param name="int client"/>
                <Param name="KeyValues kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileExists" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path to the file.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to find files existing in any of
                            the Valve search paths, rather than solely files
                            existing directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Checks if a file exists.
Return:
    True if the file exists, false otherwise.
">
                <Param name="const char[] path"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;GAME&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FilePosition" func="yes">
            <Overload retVal="native int" descr="
Params:
    file                    Handle to the file.
Notes:
    Get current position in the file.
Error:
    Invalid Handle.
Return:
    Value for the file position indicator.
">
                <Param name="Handle file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSeek" func="yes">
            <Overload retVal="native bool" descr="
Params:
    file                    Handle to the file.
    position                Position relative to what is specified in whence.
    where                   SEEK_ constant value of where to see from.
Notes:
    Sets the file position indicator.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle file"/>
                <Param name="int position"/>
                <Param name="int where"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    path                    Path to the file.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to find files existing in any of
                            the Valve search paths, rather than solely files
                            existing directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Get the file size in bytes.
Return:
    File size in bytes, -1 if file not found.
">
                <Param name="const char[] path"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;GAME&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileToKeyValues" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    file                    File to read from.
Notes:
    Converts a file to a KeyValues tree.  The file is read into
    the current position of the tree.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle kv"/>
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindAdmGroup" func="yes">
            <Overload retVal="native GroupId" descr="
Params:
    group_name              String containing the group name.
Notes:
    Finds a group by name.
Return:
    A group id, or INVALID_GROUP_ID if not found.
">
                <Param name="const char[] group_name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindAdminByIdentity" func="yes">
            <Overload retVal="native AdminId" descr="
Params:
    auth                    Auth method to try.
    identity                Identity string to look up.
Notes:
    Attempts to find an admin by an auth method and an identity.
Return:
    An AdminId index if found, INVALID_ADMIN_ID otherwise.
">
                <Param name="const char[] auth"/>
                <Param name="const char[] identity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindCharInString" func="yes">
            <Overload retVal="stock int" descr="
Params:
    str                     String.
    c                       Character to search for.
    reverse                 False (default) to search forward, true to search
                            backward.
Notes:
    Finds the first occurrence of a character in a string.
Return:
    The index of the first occurrence of the character
    in the string, or -1 if the character was not found.
">
                <Param name="const char[] str"/>
                <Param name="char c"/>
                <Param name="bool reverse = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindClientCookie" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    name                    Name of cookie to find.
Notes:
    Searches for a Client preference cookie.
    Handles returned by FindClientCookie can be closed via CloseHandle() when
    no longer needed.
Return:
    A handle to the cookie if it is found. INVALID_HANDLE otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindCommandLineParam" func="yes">
            <Overload retVal="native bool" descr="
Params:
    param                   The command line parameter to test.
Notes:
    Determines if a specific command line parameter is present.
Error:
    No command line available, or no mod support.
Return:
    True if the command line parameter is specified; otherwise, false.
">
                <Param name="const char[] param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindConVar" func="yes">
            <Overload retVal="native ConVar" descr="
Params:
    name                    Name of convar to find.
Notes:
    Searches for a console variable.
Return:
    A ConVar object if found; null otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindDataMapInfo" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity index.
    prop                    Property name.
    type                    Optional parameter to store the type.
    num_bits                Optional parameter to store the number of bits the field
                            uses.  The bit count will either be 1 (for boolean) or
                            divisible by 8 (including 0 if unknown).
    local_offset            Optional parameter to store the local offset, as
                            FindDataMapOffs() would return.
Notes:
    Given an entity, finds a nested datamap property offset.
    This information is cached for future calls.
Return:
    An offset, or -1 on failure.
">
                <Param name="int entity"/>
                <Param name="const char[] prop"/>
                <Param name="PropFieldType &amp;type=view_as&lt;PropFieldType&gt;(0)"/>
                <Param name="int &amp;num_bits=0"/>
                <Param name="int &amp;local_offset=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindEntityByClassname" func="yes">
            <Overload retVal="native int" descr="
Params:
    startEnt                The entity index after which to begin searching from.
                            Use -1 to start from the first entity.
    classname               Classname of the entity to find.
Notes:
    Searches for an entity by classname.
Error:
    Lack of mod support.
Return:
    Entity index &gt;= 0 if found, -1 otherwise.
">
                <Param name="int startEnt"/>
                <Param name="const char[] classname"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindFirstConCommand" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    buffer                  Buffer to store entry name.
    max_size                Maximum size of the buffer.
    isCommand               Variable to store whether the entry is a command.
                            If it is not a command, it is a ConVar.
    flags                   Variable to store entry flags.
    description             Buffer to store the description, empty if no description present.
    descrmax_size           Maximum size of the description buffer.
Notes:
    Starts a ConCommandBase search, traversing the list of ConVars and
    ConCommands.  If a Handle is returned, the next entry must be read
    via FindNextConCommand().  The order of the list is undefined.
Return:
    On success, a ConCmdIter Handle is returned, which
    can be read via FindNextConCommand(), and must be
    closed via CloseHandle().  Additionally, the output
    parameters will be filled with information of the
    first ConCommandBase entry.
    On failure, INVALID_HANDLE is returned, and the
    contents of outputs is undefined.
">
                <Param name="char[] buffer"/>
                <Param name="int max_size"/>
                <Param name="bool &amp;isCommand"/>
                <Param name="int &amp;flags=0"/>
                <Param name="char[] description=&apos;&apos;"/>
                <Param name="int descrmax_size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindFlagByChar" func="yes">
            <Overload retVal="native bool" descr="
Params:
    c                       Flag ASCII character/token.
    flag                    Variable to store flag in.
Notes:
    Finds a flag by a given character.
Return:
    True on success, false if not found.
">
                <Param name="int c"/>
                <Param name="AdminFlag &amp;flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindFlagByName" func="yes">
            <Overload retVal="native bool" descr="
Params:
    name                    Flag name (like &apos;kick&apos;), case sensitive.
    flag                    Variable to store flag in.
Notes:
    Finds a flag by its string name.
Return:
    True on success, false if not found.
">
                <Param name="const char[] name"/>
                <Param name="AdminFlag &amp;flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindFlagChar" func="yes">
            <Overload retVal="native bool" descr="
Params:
    flag                    Flag to look up.
    c                       Variable to store flag char.
Notes:
    Finds the flag char for a given admin flag.
Return:
    True on success, false if not found.
">
                <Param name="AdminFlag flag"/>
                <Param name="int &amp;c"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindMap" func="yes">
            <Overload retVal="native findMapResult" descr="
Params:
    map                     Map name (usually same as map path relative to maps/ dir,
                            excluding .bsp extension).
    foundmap                Resolved map name. If the return is FindMap_FuzzyMatch
                            or FindMap_NonCanonical the buffer will be the full path.
    maxlen                  Maximum length to write to map var.
Notes:
    Returns whether a full or partial map name is found or can be resolved
Return:
    Result of the find operation. Not all result types are supported on all games.
">
                <Param name="const char[] map"/>
                <Param name="char[] foundmap"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindNextConCommand" func="yes">
            <Overload retVal="native bool" descr="
Params:
    search                  ConCmdIter Handle to search.
    buffer                  Buffer to store entry name.
    max_size                Maximum size of the buffer.
    isCommand               Variable to store whether the entry is a command.
                            If it is not a command, it is a ConVar.
    flags                   Variable to store entry flags.
    description             Buffer to store the description, empty if no description present.
    descrmax_size           Maximum size of the description buffer.
Notes:
    Reads the next entry in a ConCommandBase iterator.
Return:
    On success, the outputs are filled, the iterator is
    advanced to the next entry, and true is returned.
    If no more entries exist, false is returned, and the
    contents of outputs is undefined.
">
                <Param name="Handle search"/>
                <Param name="char[] buffer"/>
                <Param name="int max_size"/>
                <Param name="bool &amp;isCommand"/>
                <Param name="int &amp;flags=0"/>
                <Param name="char[] description=&apos;&apos;"/>
                <Param name="int descrmax_size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindPluginByFile" func="yes">
            <Overload retVal="stock Handle" descr="
Params:
    filename                Filename of the plugin to search for.
Notes:
    Returns plugin handle from plugin filename.
Return:
    Handle to plugin if found, INVALID_HANDLE otherwise.
">
                <Param name="const char[] filename"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindPluginByNumber" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    order_num               Number of the plugin as it appears in &apos;sm plugins list&apos;.
Notes:
    Finds a plugin by its order in the list from the &apos;plugins list&apos; server
    &apos;sm&apos; command.  You should not use this function to loop through all plugins,
    use the iterator instead.  Looping through all plugins using this native
    is O(n^2), whereas using the iterator is O(n).
Return:
    Plugin Handle on success, INVALID_HANDLE if no plugin
    matches the given number.
">
                <Param name="int order_num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindSendPropInfo" func="yes">
            <Overload retVal="native int" descr="
Params:
    cls                     Classname.
    prop                    Property name.
    type                    Optional parameter to store the type.
    num_bits                Optional parameter to store the number of bits the field
                            uses, if applicable (otherwise 0 is stored).  The number
                            of bits varies for integers and floats, and is always 0
                            for strings.
    local_offset            Optional parameter to store the local offset, as
                            FindSendPropOffs() would return.
Notes:
    Given a ServerClass name, finds a networkable send property offset.
    This information is cached for future calls.
Return:
    On success, returns an absolutely computed offset.
    If no offset is available, 0 is returned.
    If the property is not found, -1 is returned.
">
                <Param name="const char[] cls"/>
                <Param name="const char[] prop"/>
                <Param name="PropFieldType &amp;type=view_as&lt;PropFieldType&gt;(0)"/>
                <Param name="int &amp;num_bits=0"/>
                <Param name="int &amp;local_offset=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindStringInArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    item                    String to search for
Notes:
    Returns the index for the first occurrence of the provided string. If the string
    cannot be located, -1 will be returned.
Error:
    Invalid Handle
Return:
    Array index, or -1 on failure
">
                <Param name="Handle array"/>
                <Param name="const char[] item"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindStringIndex" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    str                     String to find.
Notes:
    Searches for the index of a given string in a string table.
Error:
    Invalid string table index.
Return:
    String index if found, INVALID_STRING_INDEX otherwise.
">
                <Param name="int tableidx"/>
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindStringTable" func="yes">
            <Overload retVal="native int" descr="
Params:
    name                    Name of string table to find.
Notes:
    Searches for a string table.
Return:
    A string table index number if found, INVALID_STRING_TABLE otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindTarget" func="yes">
            <Overload retVal="stock int" descr="
Params:
    client                  Client who issued command
    target                  Client&apos;s target argument
    nobots                  Optional. Set to true if bots should NOT be targetted
    immunity                Optional. Set to false to ignore target immunity.
Notes:
    Wraps ProcessTargetString() and handles producing error messages for
    bad targets.
    Note that you should use LoadTranslations(&apos;common.phrases&apos;) in OnPluginStart().
    &apos;common.phrases&apos; contains all of the translatable phrases that FindTarget() will
    reply with in the event a target is not found (error).
Return:
    Index of target client, or -1 on error.
">
                <Param name="int client"/>
                <Param name="const char[] target"/>
                <Param name="bool nobots = false"/>
                <Param name="bool immunity = true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindTeamByName" func="yes">
            <Overload retVal="stock int" descr="
Params:
    name                    Partial or full team name.
Notes:
    Given a partial team name, attempts to find a matching team.
    The search is performed case insensitively and only against the
    first N characters of the team names, where N is the number of
    characters in the search pattern.
Return:
    A valid team index on success.
    -1 if no team matched.
    -2 if more than one team matched.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindTopMenuCategory" func="yes">
            <Overload retVal="native TopMenuObject" descr="
Params:
    topmenu                 TopMenu Handle.
    name                    Object&apos;s unique name.
Notes:
    Finds a category&apos;s topobj ID in a TopMenu.
Error:
    Invalid TopMenu Handle.
Return:
    TopMenuObject ID on success, or
    INVALID_TOPMENUOBJECT on failure.
">
                <Param name="Handle topmenu"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FindValueInArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    item                    Value to search for
    block                   Optionally which block to search in
Notes:
    Returns the index for the first occurrence of the provided value. If the value
    cannot be located, -1 will be returned.
Error:
    Invalid Handle or invalid block
Return:
    Array index, or -1 on failure
">
                <Param name="Handle array"/>
                <Param name="any item"/>
                <Param name="int block=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FireEntityOutput" func="yes">
            <Overload retVal="native void" descr="
Params:
    caller                  Entity index from where the output is fired.
    output                  Output name.
    activator               Entity index which initiated the sequence of actions (-1 for a NULL entity).
    delay                   Delay before firing the output.
Notes:
    Fire a named output on an entity.
    After completion (successful or not), the current global variant is re-initialized.
Error:
    Invalid entity index or no mod support.
">
                <Param name="int caller"/>
                <Param name="const char[] output"/>
                <Param name="int activator=-1"/>
                <Param name="float delay=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FireEvent" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    dontBroadcast           Optional boolean that determines if event should be broadcast to clients.
Notes:
    Fires a game event.
    This function closes the event Handle after completing.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="bool dontBroadcast=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlagArrayToBits" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array containing flags that are enabled.
    numFlags                Number of flags in the array.
Notes:
    Converts an array of flags to bits.
Return:
    A bit string composed of the array flags.
">
                <Param name="const AdminFlag[] array"/>
                <Param name="int numFlags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlagBitArrayToBits" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array containing true or false for each AdminFlag.
    maxSize                 Maximum size of the flag array.
Notes:
    Converts a flag array to a bit string.
Return:
    A bit string composed of the array bits.
">
                <Param name="const bool[] array"/>
                <Param name="int maxSize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlagBitsToArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    bits                    Bit string containing the flags.
    array                   Output array to write flags.
    maxSize                 Maximum size of the flag array.
Notes:
    Converts a bit string to an array of flags.
Return:
    Number of flags written.
">
                <Param name="int bits"/>
                <Param name="AdminFlag[] array"/>
                <Param name="int maxSize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlagBitsToBitArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    bits                    Bit string containing the flags.
    array                   Array to write the flags to.  Enabled flags will be &apos;true&apos;.
    maxSize                 Maximum number of flags the array can store.
Notes:
    Converts a flag bit string to a bit array.
Return:
    Number of flags written.
">
                <Param name="int bits"/>
                <Param name="bool[] array"/>
                <Param name="int maxSize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlagToBit" func="yes">
            <Overload retVal="stock int" descr="
Params:
    flag                    Flag to convert.
Notes:
    Converts a flag to its single bit.
Return:
    Bit representation of the flag.
">
                <Param name="AdminFlag flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FloatAbs" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value.
Notes:
    Returns an absolute value.
Return:
    Absolute value of the input.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FloatCompare" func="yes">
            <Overload retVal="native int" descr="
Params:
    fOne                    First value.
    fTwo                    Second value.
Notes:
    Compares two floats.
Return:
    Returns 1 if the first argument is greater than the second argument.
    Returns -1 if the first argument is smaller than the second argument.
    Returns 0 if both arguments are equal.
">
                <Param name="float fOne"/>
                <Param name="float fTwo"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FloatFraction" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value.
Notes:
    Returns the decimal part of a float.
Return:
    Decimal part.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FloatToString" func="yes">
            <Overload retVal="native int" descr="
Params:
    num                     Floating point number to convert.
    str                     Buffer to store string in.
    maxlength               Maximum length of string buffer.
Notes:
    Converts a floating point number to a string.
Return:
    Number of cells written to buffer.
">
                <Param name="float num"/>
                <Param name="char[] str"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FlushFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    file                    Handle to the file.
Notes:
    Flushes a file&apos;s buffered output; any buffered output
    is immediately written to the file.
Return:
    True on success or use_valve_fs specified with OpenFile,
    otherwise false on failure.
">
                <Param name="Handle file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ForceChangeLevel" func="yes">
            <Overload retVal="native void" descr="
Params:
    map                     Map to change to.
    reason                  Reason for change.
Notes:
    Changes the current map and records the reason for the change with maphistory
">
                <Param name="const char[] map"/>
                <Param name="const char[] reason"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ForcePlayerSuicide" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
Notes:
    Forces a player to commit suicide.
Error:
    Invalid client or client not in game, or lack of mod support.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Format" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
Return:
    Number of cells written.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="FormatActivitySource" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Originating client; may be 0 for server console.
    target                  Targeted client.
    namebuf                 Name buffer.
    maxlength               Maximum size of the name buffer.
Notes:
    Given an originating client and a target client, returns the string
    that describes the originating client according to the sm_show_activity cvar.
    For example, &apos;ADMIN&apos;, &apos;PLAYER&apos;, or a player&apos;s name could be placed in this buffer.
Error:
    Invalid client index or client not connected.
Return:
    True if activity should be shown.  False otherwise.  In either
    case, the name buffer is filled.  The return value can be used
    to broadcast a &apos;safe&apos; name to all players regardless of the
    sm_show_activity filters.
">
                <Param name="int client"/>
                <Param name="int target"/>
                <Param name="const char[] namebuf"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FormatEx" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
    This is the same as Format(), except none of the input buffers can
    overlap the same memory as the output buffer.  Since this security
    check is removed, it is slightly faster.
Return:
    Number of cells written.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="FormatNativeString" func="yes">
            <Overload retVal="native int" descr="
Params:
    out_param               Output parameter number to write to.  If 0, out_string is used.
    fmt_param               Format parameter number.  If 0, fmt_string is used.
    vararg_param            First variable parameter number.
    out_len                 Output string buffer maximum length (always required).
    written                 Optionally stores the number of bytes written.
    out_string              Output string buffer to use if out_param is not used.
    fmt_string              Format string to use if fmt_param is not used.
Notes:
    Formats a string using parameters from a native.
    All parameter indexes start at 1.
    If the input and output buffers overlap, the contents
    of the output buffer at the end is undefined.
Return:
    SP_ERROR_NONE on success, anything else on failure.
">
                <Param name="int out_param"/>
                <Param name="int fmt_param"/>
                <Param name="int vararg_param"/>
                <Param name="int out_len"/>
                <Param name="int &amp;written=0"/>
                <Param name="char[] out_string=&apos;&apos;"/>
                <Param name="const char[] fmt_string=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FormatTime" func="yes">
            <Overload retVal="native void" descr="
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules (passing NULL_STRING will use the rules defined in sm_datetime_format).
    stamp                   Optional time stamp.
Notes:
    Produces a date and/or time string value for a timestamp.
    See this URL for valid parameters:
    http://cplusplus.com/reference/clibrary/ctime/strftime.html
    Note that available parameters depends on support from your operating system.
    In particular, ones highlighted in yellow on that page are not currently
    available on Windows and should be avoided for portable plugins.
Error:
    Buffer too small or invalid time format.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="int stamp=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameConfGetAddress" func="yes">
            <Overload retVal="native Address" descr="
Params:
    gameconf                Game config handle.
    name                    Name of the property to find.
Notes:
    Finds an address calculation in a GameConfig file,
    performs LoadFromAddress on it as appropriate, then returns the final address.
Return:
    An address calculated on success, or 0 on failure.
">
                <Param name="Handle gameconf"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameConfGetKeyValue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    gc                      Game config handle.
    key                     Key to retrieve from the Keys section.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Gets the value of a key from the &apos;Keys&apos; section.
Return:
    True if key existed, false otherwise.
">
                <Param name="Handle gc"/>
                <Param name="const char[] key"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameConfGetOffset" func="yes">
            <Overload retVal="native int" descr="
Params:
    gc                      Game config handle.
    key                     Key to retrieve from the offset section.
Notes:
    Returns an offset value.
Return:
    An offset, or -1 on failure.
">
                <Param name="Handle gc"/>
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetProp" func="yes">
            <Overload retVal="native int" descr="
Params:
    prop                    Property name.
    size                    Number of bytes to read (valid values are 1, 2, or 4).
                            This value is auto-detected, and the size parameter is
                            only used as a fallback in case detection fails.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves an integer value from a property of the gamerules entity.
Error:
    Not supported.
Return:
    Value at the given property offset.
">
                <Param name="const char[] prop"/>
                <Param name="int size=4"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetPropEnt" func="yes">
            <Overload retVal="native int" descr="
Params:
    prop                    Property name.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves a entity index from a property of the gamerules entity.
Error:
    Not supported.
Return:
    Entity index at the given property.
    If there is no entity, or the entity is not valid,
    then -1 is returned.
">
                <Param name="const char[] prop"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetPropFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    prop                    Property name.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves a float value from a property of the gamerules entity.
Error:
    Not supported.
Return:
    Value at the given property offset.
">
                <Param name="const char[] prop"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetPropString" func="yes">
            <Overload retVal="native int" descr="
Params:
    prop                    Property to use.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Gets a gamerules property as a string.
Error:
    Not supported.
Return:
    Number of non-null bytes written.
">
                <Param name="const char[] prop"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetPropVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property name.
    vec                     Vector buffer to store data in.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves a vector of floats from the gamerules entity, given a named network property.
Error:
    Not supported.
">
                <Param name="const char[] prop"/>
                <Param name="float vec[3]"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_GetRoundState" func="yes">
            <Overload retVal="stock RoundState" descr="
Notes:
    Gets the current round state.
Error:
    Game doesn&apos;t support round state.
Return:
    Round state.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_SetProp" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property name.
    value                   Value to set.
    size                    Number of bytes to write (valid values are 1, 2, or 4).
                            This value is auto-detected, and the size parameter is
                            only used as a fallback in case detection fails.
    element                 Element # (starting from 0) if property is an array.
    changeState             This parameter is ignored.
Notes:
    Sets an integer value for a property of the gamerules entity.
Error:
    Not supported.
">
                <Param name="const char[] prop"/>
                <Param name="any value"/>
                <Param name="int size=4"/>
                <Param name="int element=0"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_SetPropEnt" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property name.
    other                   Entity index to set, or -1 to unset.
    element                 Element # (starting from 0) if property is an array.
    changeState             This parameter is ignored.
Notes:
    Sets an entity index for a property of the gamerules entity.
Error:
    Not supported.
">
                <Param name="const char[] prop"/>
                <Param name="int other"/>
                <Param name="int element=0"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_SetPropFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property name.
    value                   Value to set.
    element                 Element # (starting from 0) if property is an array.
    changeState             This parameter is ignored.
Notes:
    Sets a float value for a property of the gamerules entity.
Error:
    Not supported.
">
                <Param name="const char[] prop"/>
                <Param name="float value"/>
                <Param name="int element=0"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_SetPropString" func="yes">
            <Overload retVal="native int" descr="
Params:
    prop                    Property to use.
    buffer                  String to set.
    changeState             This parameter is ignored.
Notes:
    Sets a gamerules property as a string.
Error:
    Not supported.
Return:
    Number of non-null bytes written.
">
                <Param name="const char[] prop"/>
                <Param name="const char[] buffer"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GameRules_SetPropVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property name.
    vec                     Vector to set.
    element                 Element # (starting from 0) if property is an array.
    changeState             This parameter is ignored.
Notes:
    Sets a vector of floats in the gamerules entity, given a named network property.
Error:
    Not supported.
">
                <Param name="const char[] prop"/>
                <Param name="const float vec[3]"/>
                <Param name="int element=0"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GeoipCode2" func="yes">
            <Overload retVal="native bool" descr="
Params:
    ip                      Ip to determine the country code.
    ccode                   Destination string buffer to store the code.
Notes:
    Gets the two character country code from an IP address. (US, CA, etc)
Return:
    True on success, false if no country found.
">
                <Param name="const char[] ip"/>
                <Param name="char ccode[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GeoipCode3" func="yes">
            <Overload retVal="native bool" descr="
Params:
    ip                      Ip to determine the country code.
    ccode                   Destination string buffer to store the code.
Notes:
    Gets the three character country code from an IP address. (USA, CAN, etc)
Return:
    True on success, false if no country found.
">
                <Param name="const char[] ip"/>
                <Param name="char ccode[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GeoipCountry" func="yes">
            <Overload retVal="native bool" descr="
Params:
    ip                      Ip to determine the country code.
    name                    Destination string buffer to store the country name.
    maxlength               Maximum length of output string buffer.
Notes:
    Gets the full country name. (max length of output string is 45)
Return:
    True on success, false if no country found.
">
                <Param name="const char[] ip"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupAddFlag" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      Group id.
    flag                    Admin flag to retrieve.
Notes:
    Gets the set value of an add flag on a group&apos;s flag set.
    These are called &apos;add flags&apos; because they add to a user&apos;s flags.
Return:
    True if enabled, false otherwise,
">
                <Param name="GroupId id"/>
                <Param name="AdminFlag flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupAddFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      GroupId of the group.
Notes:
    Returns the flag set that is added to a user from their group.
    These are called &apos;add flags&apos; because they add to a user&apos;s flags.
Return:
    Bitstring containing the flags enabled.
">
                <Param name="GroupId id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupCmdOverride" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      Group id.
    name                    String containing command name (case sensitive).
    type                    Override type (specific command or group).
    rule                    Optional pointer to store allow/deny setting.
Notes:
    Retrieves a group-specific command override.
Return:
    True if an override exists, false otherwise.
">
                <Param name="GroupId id"/>
                <Param name="const char[] name"/>
                <Param name="OverrideType type"/>
                <Param name="OverrideRule &amp;rule"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupImmuneCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      Group id.
Notes:
    Returns the number of specific group immunities.
Return:
    Number of group immunities.
">
                <Param name="GroupId id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupImmuneFrom" func="yes">
            <Overload retVal="native GroupId" descr="
Params:
    id                      Group id.
    number                  Index from 0 to N-1, from GetAdmGroupImmuneCount().
Notes:
    Returns a group that this group is immune to given an index.
Return:
    GroupId that this group is immune to, or INVALID_GROUP_ID on failure.
">
                <Param name="GroupId id"/>
                <Param name="int number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdmGroupImmunityLevel" func="yes">
            <Overload retVal="native int" descr="
Params:
    gid                     Group Id.
Notes:
    Gets a group&apos;s immunity level (defaults to 0).
Return:
    Immunity level value.
">
                <Param name="GroupId gid"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminFlag" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId index of the admin.
    flag                    Admin flag to use.
    mode                    Access mode to check.
Notes:
    Returns whether or not a flag is enabled on an admin.
Return:
    True if enabled, false otherwise.
">
                <Param name="AdminId id"/>
                <Param name="AdminFlag flag"/>
                <Param name="AdmAccessMode mode=Access_Effective"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      AdminId index of the admin.
    mode                    Access mode to use.
Notes:
    Returns the bitstring of access flags on an admin.
Return:
    A bitstring containing which flags are enabled.
">
                <Param name="AdminId id"/>
                <Param name="AdmAccessMode mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminGroup" func="yes">
            <Overload retVal="native GroupId" descr="
Params:
    id                      AdminId index of the admin.
    index                   Group number to retrieve, from 0 to N-1, where N
                            is the value of GetAdminGroupCount(id).
    name                    Buffer to store the group&apos;s name.
                            Note: This will safely chop UTF-8 strings.
    maxlength               Maximum size of the output name buffer.
Notes:
    Returns group information from an admin.
Return:
    A GroupId index and a name pointer, or
    INVALID_GROUP_ID and NULL if an error occurred.
">
                <Param name="AdminId id"/>
                <Param name="int index"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminGroupCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      AdminId index of the admin.
Notes:
    Returns the number of groups this admin is a member of.
Return:
    Number of groups this admin is a member of.
">
                <Param name="AdminId id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminImmunityLevel" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      Admin Id.
Notes:
    Gets an admin&apos;s immunity level.
Return:
    Immunity level value.
">
                <Param name="AdminId id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminPassword" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId index of the admin.
    buffer                  Optional buffer to store the admin&apos;s password.
    maxlength               Maximum size of the output name buffer.
                            Note: This will safely chop UTF-8 strings.
Notes:
    Gets an admin&apos;s password.
Return:
    True if there was a password set, false otherwise.
">
                <Param name="AdminId id"/>
                <Param name="char[] buffer=&apos;&apos;"/>
                <Param name="int maxlength=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminTopMenu" func="yes">
            <Overload retVal="native TopMenu" descr="
Notes:
    Retrieves the Handle to the admin top menu.
Return:
    Handle to the admin menu&apos;s TopMenu,
    or INVALID_HANDLE if not created yet.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetAdminUsername" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      AdminId of the admin.
    name                    String buffer to store name.
    maxlength               Maximum size of string buffer.
Notes:
    Retrieves an admin&apos;s user name as made with CreateAdmin().
    This function can return UTF-8 strings, and will safely chop UTF-8 strings.
Return:
    Number of bytes written.
">
                <Param name="AdminId id"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetAngleVectors" func="yes">
            <Overload retVal="native void" descr="
Params:
    angle                   Angle.
    fwd                     Forward vector buffer or NULL_VECTOR.
    right                   Right vector buffer or NULL_VECTOR.
    up                      Up vector buffer or NULL_VECTOR.
Notes:
    Returns vectors in the direction of an angle.
">
                <Param name="const float angle[3]"/>
                <Param name="float fwd[3]"/>
                <Param name="float right[3]"/>
                <Param name="float up[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetArrayArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    buffer                  Buffer to store the array in.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Retrieves an array of cells from an array.
Error:
    Invalid Handle or invalid index.
Return:
    Number of cells copied.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="any[] buffer"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetArrayBlockSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
Notes:
    Returns the blocksize the array was created with.
Error:
    Invalid Handle
Return:
    The blocksize of the array.
">
                <Param name="Handle array"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetArrayCell" func="yes">
            <Overload retVal="native any" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    block                   Optionally specify which block to read from
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally read as a byte instead of a cell.
Notes:
    Retrieves a cell value from an array.
Error:
    Invalid Handle, invalid index, or invalid block.
Return:
    Value read.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetArraySize" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
Notes:
    Returns the array size.
Error:
    Invalid Handle.
Return:
    Number of elements in the array.
">
                <Param name="Handle array"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetArrayString" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    buffer                  Buffer to copy to.
    maxlength               Maximum size of the buffer.
Notes:
    Retrieves a string value from an array.
Error:
    Invalid Handle or invalid index.
Return:
    Number of characters copied.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCharBytes" func="yes">
            <Overload retVal="native int" descr="
Params:
    source                  Source input string.
Notes:
    Returns the number of bytes a character is using.  This is
    for multi-byte characters (UTF-8).  For normal ASCII characters,
    this will return 1.
Return:
    Number of bytes the current character uses.
">
                <Param name="const char[] source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAbsAngles" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    ang                     Destination vector to store the client&apos;s position angle.
Notes:
    Returns the client&apos;s position angle.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="float ang[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAbsOrigin" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    vec                     Destination vector to store the client&apos;s origin vector.
Notes:
    Returns the client&apos;s origin vector.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAimTarget" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client performing the aiming.
    only_clients            True to exclude all entities but clients.
Notes:
    Returns the entity a client is aiming at.
Error:
    Invalid client index or client not in game.
Return:
    Entity index being aimed at.
    -1 if no entity is being aimed at.
    -2 if the function is not supported.
">
                <Param name="int client"/>
                <Param name="bool only_clients=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientArmor" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s armor.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    Armor value.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAuthId" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
    authType                Auth id type and format to use.
    auth                    Buffer to store the client&apos;s auth id.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
    validate                Check backend validation status.
                            DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,
                            You WILL KNOW if you need to use this, MOST WILL NOT.
Notes:
    Retrieves a client&apos;s authentication string (SteamID).
Error:
    If the client is not connected or the index is invalid.
Return:
    True on success, false otherwise.
">
                <Param name="int client"/>
                <Param name="AuthIdType authType"/>
                <Param name="char[] auth"/>
                <Param name="int maxlen"/>
                <Param name="bool validate=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAvgChoke" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s average packet choke, values go from 0 to 1 (for percentages).
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Average packet loss, or -1 if network info is not available.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAvgData" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s data flow in bytes/sec.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Data flow.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAvgLatency" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s average packet latency in seconds.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Latency, or -1 if network info is not available.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAvgLoss" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s average packet loss, values go from 0 to 1 (for percentages).
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Average packet loss, or -1 if network info is not available.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientAvgPackets" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s average packet frequency in packets/sec.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Packet frequency.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientButtons" func="yes">
            <Overload retVal="stock int" descr="
Params:
    client                  Client index
Notes:
    Get&apos;s a users current pressed buttons
Error:
    Invalid client index, client not in game,
    or lack of mod compliance.
Return:
    Bitsum of buttons
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientCookie" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    cookie                  Client preference cookie handle.
    buffer                  Copyback buffer for value.
    maxlen                  Maximum length of the buffer.
Notes:
    Retrieve the value of a Client preference cookie.
Error:
    Invalid cookie handle or invalid client index.
">
                <Param name="int client"/>
                <Param name="Handle cookie"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientCookieTime" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index.
    cookie                  Cookie handle.
Notes:
    Returns the last updated timestamp for a client cookie
Return:
    Last updated timestamp.
">
                <Param name="int client"/>
                <Param name="Handle cookie"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    inGameOnly              If false connecting players are also counted.
Notes:
    Returns the client count put in the server.
Return:
    Client count in the server.
">
                <Param name="bool inGameOnly=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientDataRate" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s send data rate in bytes/sec.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Data rate.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientDeaths" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s death count.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    Death count.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientEyeAngles" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
    ang                     Destination vector to store the client&apos;s eye angles.
Notes:
    Returns the client&apos;s eye angles.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="float ang[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientEyePosition" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    pos                     Destination vector to store the client&apos;s eye position.
Notes:
    Returns the client&apos;s eye position.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="float pos[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientFrags" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s frag count.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    Frag count.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientFromSerial" func="yes">
            <Overload retVal="native int" descr="
Params:
    serial                  Serial number.
Notes:
    Returns the client index by its serial number.
Return:
    Client index, or 0 for invalid serial.
">
                <Param name="int serial"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientHealth" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s health.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    Health value.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientIP" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
    ip                      Buffer to store the client&apos;s ip address.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
    remport                 Remove client&apos;s port from the ip string (true by default).
Notes:
    Retrieves a client&apos;s IP address.
Error:
    If the client is not connected or the index is invalid.
Return:
    True on success, false otherwise.
">
                <Param name="int client"/>
                <Param name="char[] ip"/>
                <Param name="int maxlen"/>
                <Param name="bool remport=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientInfo" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
    key                     Key string.
    value                   Buffer to store value.
    maxlen                  Maximum length of valve (UTF-8 safe).
Notes:
    Retrieves values from client replicated keys.
Error:
    Invalid client index, or client not connected.
Return:
    True on success, false otherwise.
">
                <Param name="int client"/>
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientLanguage" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index.
Notes:
    Retrieves the language number of a client.
Error:
    Invalid client index or client not connected.
Return:
    Language number client is using.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientLatency" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
    flow                    Traffic flowing direction.
Notes:
    Returns the client&apos;s current latency (RTT), more accurate than GetAvgLatency but jittering.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Latency, or -1 if network info is not available.
">
                <Param name="int client"/>
                <Param name="NetFlow flow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientListeningFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  The client index
Notes:
    Retrieve the client current listening flags.
Return:
    The current voice flags
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientMaxs" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    vec                     Destination vector to store the client&apos;s max size.
Notes:
    Returns the client&apos;s max size vector.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientMenu" func="yes">
            <Overload retVal="native MenuSource" descr="
Params:
    client                  Client index.
    hStyle                  MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Returns whether a client is viewing a menu.
Error:
    Invalid Handle other than null.
Return:
    A MenuSource value.
">
                <Param name="int client"/>
                <Param name="Handle hStyle=null"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientMins" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    vec                     Destination vector to store the client&apos;s min size.
Notes:
    Returns the client&apos;s min size vector.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientModel" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    model                   Buffer to store the client&apos;s model name.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client&apos;s model name.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="char[] model"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientName" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
    name                    Buffer to store the client&apos;s name.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client&apos;s name.
Error:
    If the client is not connected an error will be thrown.
Return:
    True on success, false otherwise.
">
                <Param name="int client"/>
                <Param name="char[] name"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientOfUserId" func="yes">
            <Overload retVal="native int" descr="
Params:
    userid                  Userid value.
Notes:
    Translates an userid index to the real player index.
Error:
    Returns 0 if invalid userid.
Return:
    Client value.
">
                <Param name="int userid"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientSerial" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index.
Notes:
    Returns the clients unique serial identifier.
Error:
    Invalid client index, or client not connected.
Return:
    Serial number.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientTeam" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Retrieves a client&apos;s team index.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    Team index the client is on (mod specific).
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientTime" func="yes">
            <Overload retVal="native float" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns the client&apos;s connection time in seconds.
Error:
    Invalid client index, client not connected, or fake client.
Return:
    Connection time.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientUserId" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player index.
Notes:
    Retrieves a client&apos;s user id, which is an index incremented for every client
    that joins the server.
Error:
    If the client is not connected or the index is invalid.
Return:
    User id of the client.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientWeapon" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    weapon                  Buffer to store the client&apos;s weapon name.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
Notes:
    Returns the client&apos;s weapon name.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="char[] weapon"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetClientsInRange" func="yes">
            <Overload retVal="native int" descr="
Params:
    origin                  Coordinates from which to test range.
    rangeType               Range type to use for filtering clients.
    clients                 Array to which found client indexes will be written.
    size                    Maximum size of clients array.
Notes:
    Find clients that are potentially in range of a position.
Return:
    Number of client indexes written to clients array.
">
                <Param name="float origin[3]"/>
                <Param name="ClientRangeType rangeType"/>
                <Param name="int[] clients"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCmdArg" func="yes">
            <Overload retVal="native int" descr="
Params:
    argnum                  Argument number to retrieve.
    buffer                  Buffer to use for storing the string.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves a command argument given its index, from the current console or
    server command.
    Argument indexes start at 1; 0 retrieves the command name.
Return:
    Length of string written to buffer.
">
                <Param name="int argnum"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCmdArgString" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Buffer to use for storing the string.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves the entire command argument string in one lump from the current
    console or server command.
Return:
    Length of string written to buffer.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCmdArgs" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the number of arguments from the current console or server command.
    Unlike the HL2 engine call, this does not include the command itself.
Return:
    Number of arguments to the current command.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetCmdReplySource" func="yes">
            <Overload retVal="native ReplySource" descr="
Notes:
    Returns the current reply source of a command.
Return:
    ReplySource value.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    name                    Name of the command.
Notes:
    Returns the bitstring of flags of a command.
Return:
    A bitstring containing the FCVAR_* flags that are enabled
    or INVALID_FCVAR_FLAGS if command not found.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandIterator" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Gets a command iterator.  Must be freed with CloseHandle().
Return:
    A new command iterator.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandLine" func="yes">
            <Overload retVal="native bool" descr="
Params:
    commandLine             Buffer to store the command line in.
    maxlen                  Maximum length of the command line buffer.
Notes:
    Gets the full command line the server was launched with.
Error:
    No command line available, or no mod support.
Return:
    True if the command line is valid; otherwise, false.
">
                <Param name="char[] commandLine"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandLineParam" func="yes">
            <Overload retVal="native void" descr="
Params:
    param                   The command line parameter to get the value of.
    value                   Buffer to store the parameter value in.
    maxlen                  Maximum length of the value buffer.
    defValue                The default value to return if the parameter wasn&apos;t specified.
Notes:
    Gets the value of a command line parameter the server was launched with.
Error:
    No command line available, or no mod support.
">
                <Param name="const char[] param"/>
                <Param name="char[] value"/>
                <Param name="int maxlen"/>
                <Param name="const char[] defValue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandLineParamFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    param                   The command line parameter to get the value of.
    defValue                The default value to return if the parameter wasn&apos;t specified.
Notes:
    Gets the value of a command line parameter the server was launched with.
Error:
    No command line available, or no mod support.
Return:
    The floating point value of the command line parameter value.
">
                <Param name="const char[] param"/>
                <Param name="float defValue=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandLineParamInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   The command line parameter to get the value of.
    defValue                The default value to return if the parameter wasn&apos;t specified.
Notes:
    Gets the value of a command line parameter the server was launched with.
Error:
    No command line available, or no mod support.
Return:
    The integer value of the command line parameter value.
">
                <Param name="const char[] param"/>
                <Param name="int defValue=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCommandOverride" func="yes">
            <Overload retVal="native bool" descr="
Params:
    cmd                     String containing command name (case sensitive).
    type                    Override type (specific command or group).
    flags                   By-reference cell to store the flag (undefined if not found).
Notes:
    Returns a command override.
Return:
    True if there is an override, false otherwise.
">
                <Param name="const char[] cmd"/>
                <Param name="OverrideType type"/>
                <Param name="int &amp;flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarBool" func="yes">
            <Overload retVal="native bool" descr="
Params:
    convar                  Handle to the convar.
Notes:
    Returns the boolean value of a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    The boolean value of the convar.
">
                <Param name="Handle convar"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarBounds" func="yes">
            <Overload retVal="native bool" descr="
Params:
    convar                  Handle to the convar.
    type                    Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper.
    value                   By-reference cell to store the specified floating point bound value.
Notes:
    Retrieves the specified bound of a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    True if the convar has the specified bound set, false otherwise.
">
                <Param name="Handle convar"/>
                <Param name="ConVarBounds type"/>
                <Param name="float &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarDefault" func="yes">
            <Overload retVal="native int" descr="
Params:
    convar                  Handle to the convar.
    value                   Buffer to store the default value of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the default string value of a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="Handle convar"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    convar                  Handle to the convar.
Notes:
    Returns the bitstring of flags on a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    A bitstring containing the FCVAR_* flags that are enabled.
">
                <Param name="Handle convar"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    convar                  Handle to the convar.
Notes:
    Returns the floating point value of a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    The floating point value of the convar.
">
                <Param name="Handle convar"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    convar                  Handle to the convar.
Notes:
    Returns the integer value of a console variable.
Error:
    Invalid or corrupt Handle.
Return:
    The integer value of the convar.
">
                <Param name="Handle convar"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarName" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    name                    Buffer to store the name of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a console variable.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetConVarString" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    value                   Buffer to store the value of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the string value of a console variable.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCookieAccess" func="yes">
            <Overload retVal="native CookieAccess" descr="
Params:
    cookie                  Client preference cookie handle.
Notes:
    Returns the access level of a cookie
Error:
    Invalid cookie handle.
Return:
    CookieAccess access level.
">
                <Param name="Handle cookie"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetCookieIterator" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Gets a cookie iterator.  Must be freed with CloseHandle().
Return:
    A new cookie iterator.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetCurrentMap" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Buffer to store map name.
    maxlength               Maximum length of buffer.
Notes:
    Returns the current map name.
Return:
    Number of bytes written (UTF-8 safe).
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetDistGainFromSoundLevel" func="yes">
            <Overload retVal="native float" descr="
Params:
    soundlevel              decibel of sound, like SNDLEVEL_NORMAL or integer value
    distance                distance of sound to calculate, not meter or feet, but Source Engine`s normal Coordinate unit
Notes:
    Calculates gain of sound on given distance with given sound level in decibel
Return:
    gain of sound. you can multiply this with original sound`s volume to calculate volume on given distance
">
                <Param name="int soundlevel"/>
                <Param name="float distance"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEdictClassname" func="yes">
            <Overload retVal="native bool" descr="
Params:
    edict                   Index of the entity.
    clsname                 Buffer to store the classname.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves an edict classname.
Return:
    True on success, false if there is no classname set.
">
                <Param name="int edict"/>
                <Param name="char[] clsname"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEdictFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    edict                   Index of the entity.
Notes:
    Returns the flags on an edict.  These are not the same as entity flags.
Error:
    Invalid edict index.
Return:
    Edict flags.
">
                <Param name="int edict"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEngineTime" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns a high-precision time value for profiling the engine.
Return:
    A floating point time value.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetEngineVersion" func="yes">
            <Overload retVal="native EngineVersion" descr="
Notes:
    Gets the engine version that the currently-loaded SM core was compiled against.
    The engine version values are not guaranteed to be in any particular order,
    and should only be compared by (in)equality.
Return:
    An EngineVersion value.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntData" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    size                    Number of bytes to read (valid values are 1, 2, or 4).
Notes:
    Peeks into an entity&apos;s object data and retrieves the integer value at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Value at the given memory location.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="int size=4"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntDataArray" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    offset                  Offset to use.
    array                   Array to read into.
    arraySize               Number of values to read.
    dataSize                Size of each value in bytes (1, 2, or 4).
Notes:
    Copies an array of cells from an entity at a given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="int[] array"/>
                <Param name="int arraySize"/>
                <Param name="int dataSize=4"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntDataEnt2" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
Notes:
    Peeks into an entity&apos;s object data and retrieves the entity index
    at the given offset.
    Note: This will only work on offsets that are stored as &apos;entity
    handles&apos; (which usually looks like m_h* in properties).  These
    are not SourceMod Handles, but internal Source structures.
Error:
    Invalid input entity, or offset out of reasonable bounds.
Return:
    Entity index at the given location.  If there is no entity,
    or the stored entity is invalid, then -1 is returned.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntDataFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
Notes:
    Peeks into an entity&apos;s object data and retrieves the float value at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Value at the given memory location.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntDataString" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Peeks into an entity&apos;s object data and retrieves the string at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Number of non-null bytes written.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntDataVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    vec                     Vector buffer to store data in.
Notes:
    Peeks into an entity&apos;s object data and retrieves the vector at the
    given offset.
    Both a Vector and a QAngle are three floats.  This is a
    convenience function and will work with both types.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntProp" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    size                    Number of bytes to write (valid values are 1, 2, or 4).
                            This value is auto-detected, and the size parameter is
                            only used as a fallback in case detection fails.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves an integer value from an entity&apos;s property.
    This function is considered safer and more robust over GetEntData,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or property not found.
Return:
    Value at the given property offset.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="int size=4"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntPropArraySize" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
Notes:
    Retrieves the count of values that an entity property&apos;s array can store.
Error:
    Invalid entity or property not found.
Return:
    Size of array (in elements) or 1 if property is not an array.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntPropEnt" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves an entity index from an entity&apos;s property.
    This function is considered safer and more robust over GetEntDataEnt*,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Entity index at the given property.
    If there is no entity, or the entity is not valid,
    then -1 is returned.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntPropFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves a float value from an entity&apos;s property.
    This function is considered safer and more robust over GetEntDataFloat,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Value at the given property offset.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntPropString" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    type                    Property type.
    prop                    Property to use.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Gets a network property as a string.
Error:
    Invalid entity, offset out of reasonable bounds, or property is not a valid string.
Return:
    Number of non-null bytes written.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntPropVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    vec                     Vector buffer to store data in.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Retrieves a vector of floats from an entity, given a named network property.
    This function is considered safer and more robust over GetEntDataVector,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity, property not found, or property not
    actually a vector data type.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="float vec[3]"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntSendPropOffs" func="yes">
            <Overload retVal="stock int" descr="
Params:
    ent                     Entity index.
    prop                    Property name.
    actual                  Defaults to false for backwards compatibility.
                            If true, the newer FindSendPropInfo() function
                            is used instead.
Notes:
    Wrapper function for finding a send property for a particular entity.
Return:
    An offset, or -1 on failure.
">
                <Param name="int ent"/>
                <Param name="const char[] prop"/>
                <Param name="bool actual=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityAddress" func="yes">
            <Overload retVal="native Address" descr="
Params:
    entity                  Entity index.
Notes:
    Gets the memory address of an entity.
Error:
    Invalid entity.
Return:
    Address of the entity.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityClassname" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    entity                  Index of the entity.
    clsname                 Buffer to store the classname.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves the classname of an entity.
    This is like GetEdictClassname(), except it works for ALL
    entities, not just edicts.
Return:
    True on success, false if there is no classname set.
">
                <Param name="int entity"/>
                <Param name="char[] clsname"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityCount" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the number of networked entities in the server.
    Note: For legacy reasons, this only returns the current count
    of networked entities (current edicts), rather than total
    count of current entities.
Return:
    Number of entities in the server.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Entity index.
Notes:
    Get an entity&apos;s flags.
    The game&apos;s actual flags are internally translated by SM
    to match the entity flags defined above as the actual values
    can differ per engine.
Error:
    Invalid entity index, or lack of mod compliance.
Return:
    Entity&apos;s flags, see entity flag defines above.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityGravity" func="yes">
            <Overload retVal="stock float" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s gravity.
Error:
    Invalid entity index, or lack of mod compliance.
Return:
    Entity&apos;s m_flGravity value.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityMoveType" func="yes">
            <Overload retVal="stock MoveType" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s movetype.
Error:
    Invalid entity index, or lack of mod compliance.
Return:
    Movetype, see enum above.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityNetClass" func="yes">
            <Overload retVal="native bool" descr="
Params:
    edict                   Index of the entity.
    clsname                 Buffer to store the serverclass name.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves an entity&apos;s networkable serverclass name.
    This is not the same as the classname and is used for networkable state changes.
Error:
    Invalid edict index.
Return:
    True on success, false if the edict is not networkable.
">
                <Param name="int edict"/>
                <Param name="char[] clsname"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityRenderColor" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    r                       Amount of red (0-255)
    g                       Amount of green (0-255)
    b                       Amount of blue (0-255)
    a                       Amount of alpha (0-255)
Notes:
    Gets an entity&apos;s color.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="int &amp;r"/>
                <Param name="int &amp;g"/>
                <Param name="int &amp;b"/>
                <Param name="int &amp;a"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityRenderFx" func="yes">
            <Overload retVal="stock RenderFx" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s render Fx.
Error:
    Invalid entity index, or lack of mod compliance.
Return:
    RenderFx value.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEntityRenderMode" func="yes">
            <Overload retVal="stock RenderMode" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s render mode.
Error:
    Invalid entity index, or lack of mod compliance.
Return:
    RenderMode value.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEventBool" func="yes">
            <Overload retVal="native bool" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the boolean value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
Return:
    The boolean value of the specified event key.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="bool defValue=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEventFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the floating point value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
Return:
    The floating point value of the specified event key.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="float defValue=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEventInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the integer value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
Return:
    The integer value of the specified event key.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="int defValue=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEventName" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    name                    Buffer to store the name of the event.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a game event.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetEventString" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    value                   Buffer to store the value of the specified event key.
    maxlength               Maximum length of string buffer.
    defValue                Optional default value to use if the key is not found.
Notes:
    Retrieves the string value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
                <Param name="const char[] defvalue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetExcludeMapList" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   An ADT array handle to add the map strings to.
Notes:
    Gets the current list of excluded maps.
">
                <Param name="ArrayList array"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetExtensionFileStatus" func="yes">
            <Overload retVal="native int" descr="
Params:
    name                    Extension name (like &apos;sdktools.ext&apos;).
    error                   Optional error message buffer.
    maxlength               Length of optional error message buffer.
Notes:
    Returns the status of an extension, by filename.
Return:
    -2 if the extension was not found.
    -1 if the extension was found but failed to load.
    0 if the extension loaded but reported an error.
    1 if the extension is running without error.
">
                <Param name="const char[] name"/>
                <Param name="char[] error=&apos;&apos;"/>
                <Param name="int maxlength=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetFeatureStatus" func="yes">
            <Overload retVal="native featureStatus" descr="
Params:
    type                    Feature type.
    name                    Feature name.
Notes:
    Returns whether a feature exists, and if so, whether it is usable.
Return:
    Feature status.
">
                <Param name="FeatureType type"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetFileTime" func="yes">
            <Overload retVal="native int" descr="
Params:
    file                    File name.
    tmode                   Time mode.
Notes:
    Returns a file timestamp as a unix timestamp.
Return:
    Time value, or -1 on failure.
">
                <Param name="const char[] file"/>
                <Param name="FileTimeMode tmode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetForwardFunctionCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    fwd                     Handle to global or private forward.
Notes:
    Returns the number of functions in a global or private forward&apos;s call list.
Error:
    Invalid or corrupt forward handle.
Return:
    Number of functions in forward.
">
                <Param name="Handle fwd"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetFunctionByName" func="yes">
            <Overload retVal="native function" descr="
Params:
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to search in the calling plugin.
    name                    Name of the function.
Notes:
    Gets a function id from a function name.
Error:
    Invalid or corrupt plugin handle.
Return:
    Function id or INVALID_FUNCTION if not found.
">
                <Param name="Handle plugin"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameDescription" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Buffer to store the description.
    maxlength               Maximum size of the buffer.
    original                If true, retrieves the original game description,
                            ignoring any potential hooks from plugins.
Notes:
    Returns the game description from the mod.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="bool original=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameFolderName" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Buffer to store the directory name.
    maxlength               Maximum size of the buffer.
Notes:
    Returns the name of the game&apos;s directory.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameFrameTime" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns the time the Game took processing the last frame.
Return:
    Game frame time.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameSoundParams" func="yes">
            <Overload retVal="native bool" descr="
Params:
    gameSound               Name of game sound.
    channel                 Channel to emit with.
    level                   Sound level.
    volume                  Sound volume.
    pitch                   Sound pitch.
    sample                  Sound file name relative to the &apos;sound&apos; folder.
    maxlength               Maximum length of sample string buffer.
    entity                  Entity the sound is being emitted from.
Notes:
    Retrieves the parameters for a game sound.
    Game sounds are found in a game&apos;s scripts/game_sound.txt or other files
    referenced from it
    Note that if a game sound has a rndwave section, one of them will be returned
    at random.
Return:
    True if the sound was successfully retrieved, false if it
    was not found
">
                <Param name="const char[] gameSound"/>
                <Param name="int &amp;channel"/>
                <Param name="int &amp;soundLevel"/>
                <Param name="float &amp;volume"/>
                <Param name="int &amp;pitch"/>
                <Param name="char[] sample"/>
                <Param name="int maxlength"/>
                <Param name="int entity=SOUND_FROM_PLAYER"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameTickCount" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the game&apos;s internal tick count.
Return:
    Game tick count.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetGameTime" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns the game time based on the game tick.
Return:
    Game tick time.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetLanguageByCode" func="yes">
            <Overload retVal="native int" descr="
Params:
    code                    Language code (2-3 characters usually).
Notes:
    Retrieves the language number from a language code.
Return:
    Language number. -1 if not found.
">
                <Param name="const char[] code"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetLanguageByName" func="yes">
            <Overload retVal="native int" descr="
Params:
    name                    Language name (case insensitive).
Notes:
    Retrieves the language number from a language name.
Return:
    Language number. -1 if not found.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetLanguageCount" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the number of languages known in languages.cfg.
Return:
    Language count.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetLanguageInfo" func="yes">
            <Overload retVal="native void" descr="
Params:
    language                Language number.
    code                    Language code buffer (2-3 characters usually).
    codeLen                 Maximum length of the language code buffer.
    name                    Language name buffer.
    nameLen                 Maximum length of the language name buffer.
Notes:
    Retrieves info about a given language number.
Error:
    Invalid language number.
">
                <Param name="int language"/>
                <Param name="char[] code=&apos;&apos;"/>
                <Param name="int codeLen=0"/>
                <Param name="char[] name=&apos;&apos;"/>
                <Param name="int nameLen=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetListenOverride" func="yes">
            <Overload retVal="native ListenOverride" descr="
Params:
    iReceiver               The listener index.
    iSender                 The sender index.
Notes:
    Retrieves the override of the receiver&apos;s ability to listen to the sender.
Return:
    The override value.
">
                <Param name="int iReceiver"/>
                <Param name="int iSender"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMapDisplayName" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map name (usually same as map path relative to maps/ dir,
                            excluding .bsp extension).
    displayName             Map&apos;s display name, i.e. cp_mymapname or de_mymapname.
                            If FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound,
                            the map cannot be resolved and this native will return false,
                            but displayName will be a copy of map.
    maxlen                  Maximum length to write to displayName var.
Notes:
    Get the display name of a workshop map.
    Note: You do not need to call FindMap first.  This native will call FindMap internally.
Return:
    true if FindMap returns FindMap_Found, FindMap_FuzzyMatch, or
    FindMap_NonCanonical.
    false if FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound.
">
                <Param name="const char[] map"/>
                <Param name="char[] displayName"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMapHistory" func="yes">
            <Overload retVal="native void" descr="
Params:
    item                    Item number. Must be 0 or greater and less than GetMapHistorySize().
    map                     Buffer to store the map name.
    mapLen                  Length of map buffer.
    reason                  Buffer to store the change reason.
    reasonLen               Length of the reason buffer.
    startTime               Time the map started.
Notes:
    Retrieves a map from the map history list.
Error:
    Invalid item number.
">
                <Param name="int item"/>
                <Param name="char[] map"/>
                <Param name="int mapLen"/>
                <Param name="char[] reason"/>
                <Param name="int reasonLen"/>
                <Param name="int &amp;startTime"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMapHistorySize" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Gets the current number of maps in the map history
Return:
    Number of maps.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetMapTimeLeft" func="yes">
            <Overload retVal="native bool" descr="
Params:
    timeleft                Variable to store the time, in seconds.  If the
                            value is less than 0, the time limit is infinite.
Notes:
    Returns an estimate of the time left before the map ends.  If the server
    has not processed any frames yet (i.e. no players have joined the map yet),
    then the time left returned will always be infinite.
Return:
    True if the operation is supported, false otherwise.
">
                <Param name="int &amp;timeleft"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMapTimeLimit" func="yes">
            <Overload retVal="native bool" descr="
Params:
    time                    Set to the number of total seconds in the map time
                            limit, or 0 if there is no time limit set.
Notes:
    Retrieves the current map time limit.  If the server has not processed any
    frames yet (i.e. no players have joined the map yet), then the time limit
    returned will always be 0.
Return:
    True on success, false if operation is not supported.
">
                <Param name="int &amp;time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMaxEntities" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the maximum number of networked entities.
    Note: For legacy reasons, this only returns the maximum
    networked entities (maximum edicts), rather than total
    maximum entities.
Return:
    Maximum number of networked entities.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetMaxHumanPlayers" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the maximum number of human players allowed on the server.  This is
    a game-specific function used on newer games to limit the number of humans
    that can join a game and can be lower than MaxClients. It is the number often
    reflected in the server browser or when viewing the output of the status command.
    On unsupported games or modes without overrides, it will return the same value
    as MaxClients.
    You should not globally cache the value to GetMaxHumanPlayers() because it can change across
    game modes. You may still cache it locally.
Return:
    Maximum number of humans allowed.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetMaxPageItems" func="yes">
            <Overload retVal="native int" descr="
Params:
    hStyle                  MenuStyle Handle, or INVALID_HANDLE to use the default style.
Notes:
    Returns a style&apos;s maximum items per page.
Error:
    Invalid Handle other than INVALID_HANDLE.
Return:
    Maximum items per page.
">
                <Param name="Handle hStyle=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuExitBackButton" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
Notes:
    Returns whether or not the menu has an &apos;exit back&apos; button.  By default,
    menus do not have an exit back button.
    Exit Back buttons appear as &apos;Back&apos; on page 1 of paginated menus and have
    functionality defined by the user in MenuEnd_ExitBack.
Error:
    Invalid Handle.
Return:
    True if the menu has an exit back button; false otherwise.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuExitButton" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
Notes:
    Returns whether or not the menu has an exit button.
    By default, menus have an exit button.
Error:
    Invalid Handle.
Return:
    True if the menu has an exit button; false otherwise.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    position                Position, starting from 0.
    infoBuf                 Info buffer.
    infoBufLen              Maximum length of the info buffer.
    style                   By-reference variable to store drawing flags.
    dispBuf                 Display buffer.
    dispBufLen              Maximum length of the display buffer.
Notes:
    Retrieves information about a menu item.
Error:
    Invalid Handle.
Return:
    True on success, false if position is invalid.
">
                <Param name="Handle menu"/>
                <Param name="int position"/>
                <Param name="char[] infoBuf"/>
                <Param name="int infoBufLen"/>
                <Param name="int &amp;style=0"/>
                <Param name="char[] dispBuf=&apos;&apos;"/>
                <Param name="int dispBufLen=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuItemCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Menu Handle.
Notes:
    Returns the number of items in a menu.
Error:
    Invalid Handle.
Return:
    Number of items in the menu.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuOptionFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Menu Handle.
Notes:
    Retrieves a menu&apos;s option flags.
Error:
    Invalid Handle.
Return:
    A bitstring of MENUFLAG bits.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuPagination" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Handle to the menu.
Notes:
    Returns a menu&apos;s pagination setting.
Error:
    Invalid Handle.
Return:
    Pagination setting.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuSelectionPosition" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the first item on the page of a currently selected menu.
    This is only valid inside a MenuAction_Select callback.
Error:
    Not called from inside a MenuAction_Select callback.
Return:
    First item number on the page the client was viewing
    before selecting the item in the callback.  This can
    be used to re-display the menu from the original
    position.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuStyle" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    menu                    Handle to the menu.
Notes:
    Returns a menu&apos;s MenuStyle Handle.  The Handle
    is global and cannot be freed.
Error:
    Invalid Handle.
Return:
    Handle to the menu&apos;s draw style.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuStyleHandle" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    style                   Menu Style.
Notes:
    Returns a style&apos;s global Handle.
Return:
    A Handle, or INVALID_HANDLE if not found or unusable.
">
                <Param name="MenuStyle style"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuTitle" func="yes">
            <Overload retVal="native int" descr="
Params:
    menu                    Menu Handle.
    buffer                  Buffer to store title.
    maxlength               Maximum length of the buffer.
Notes:
    Returns the text of a menu&apos;s title.
Error:
    Invalid Handle/
Return:
    Number of bytes written.
">
                <Param name="Handle menu"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMenuVoteInfo" func="yes">
            <Overload retVal="stock void" descr="
Params:
    param2                  Second parameter of MenuAction_VoteEnd.
    winningVotes            Number of votes received by the winning option.
    totalVotes              Number of total votes received.
Notes:
    Retrieves voting information from MenuAction_VoteEnd.
">
                <Param name="int param2"/>
                <Param name="int &amp;winningVotes"/>
                <Param name="int &amp;totalVotes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetMyHandle" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Returns the calling plugin&apos;s Handle.
Return:
    Handle of the calling plugin.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   Parameter number, starting from 1.
    local                   Local array to copy into.
    size                    Maximum size of local array.
Notes:
    Gets an array from a native parameter (always by reference).
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    SP_ERROR_NONE on success, anything else on failure.
">
                <Param name="int param"/>
                <Param name="any[] local"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeCell" func="yes">
            <Overload retVal="native any" descr="
Params:
    param                   Parameter number, starting from 1.
Notes:
    Gets a cell from a native parameter.
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    Cell value at the parameter number.
">
                <Param name="int param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeCellRef" func="yes">
            <Overload retVal="native any" descr="
Params:
    param                   Parameter number, starting from 1.
Notes:
    Gets a cell from a native parameter, by reference.
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    Cell value at the parameter number.
">
                <Param name="int param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeFunction" func="yes">
            <Overload retVal="native function" descr="
Params:
    param                   Parameter number, starting from 1.
Notes:
    Gets a function pointer from a native parameter.
Error:
    Invalid parameter number, or calling from a non-native function.
Return:
    Function pointer at the given parameter number.
">
                <Param name="int param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeString" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   Parameter number, starting from 1.
    buffer                  Buffer to store the string in.
    maxlength               Maximum length of the buffer.
    bytes                   Optionally store the number of bytes written.
Notes:
    Retrieves a string from a native parameter.
    Output conditions are undefined on failure.
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
">
                <Param name="int param"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int &amp;bytes=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNativeStringLength" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   Parameter number, starting from 1.
    length                  Stores the length of the string.
Notes:
    Retrieves the string length from a native parameter string.  This is useful for
    fetching the entire string using dynamic arrays.
    If this function succeeds, Get/SetNativeString will also succeed.
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
">
                <Param name="int param"/>
                <Param name="int &amp;length"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNextMap" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Buffer to store the nextmap name.
    maxlen                  Maximum length of the map buffer.
Notes:
    Returns SourceMod&apos;s internal nextmap.
Return:
    True if a Map was found and copied, false if no nextmap is set (map will be unchanged).
">
                <Param name="char[] map"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNominatedMapList" func="yes">
            <Overload retVal="native void" descr="
Params:
    maparray                An ADT array handle to add the map strings to.
    ownerarray              An optional ADT array handle to add the nominator client indexes to.
Notes:
    Gets the current list of nominated maps.
">
                <Param name="ArrayList maparray"/>
                <Param name="ArrayList ownerarray = null"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetNumStringTables" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the number of string tables that currently exist.
Return:
    Number of string tables that currently exist.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetPackPosition" func="yes">
            <Overload retVal="native DataPackPos" descr="
Params:
    pack                    Handle to the data pack.
Notes:
    Returns the read or write position in a data pack.
Error:
    Invalid handle.
Return:
    Position in the data pack, only usable with calls to SetPackPosition.
">
                <Param name="Handle pack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPanelCurrentKey" func="yes">
            <Overload retVal="native int" descr="
Params:
    panel                   A MenuPanel Handle.
Notes:
    Returns the current key position.
Error:
    Invalid Handle.
Return:
    Current key position starting at 1.
">
                <Param name="Handle panel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPanelStyle" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    panel                   A MenuPanel Handle.
Notes:
    Returns a MenuPanel&apos;s parent style.
Error:
    Invalid Handle.
Return:
    The MenuStyle Handle that created the panel.
">
                <Param name="Handle panel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPanelTextRemaining" func="yes">
            <Overload retVal="native int" descr="
Params:
    panel                   A MenuPanel Handle.
Notes:
    Returns the amount of text the menu can still hold.  If this is
    limit is reached or overflowed, the text is silently truncated.
    Radio menus: Currently 511 characters (512 bytes).
    Valve menus: Currently -1 (no meaning).
Error:
    Invalid Handle.
Return:
    Number of characters that the menu can still hold,
    or -1 if there is no known limit.
">
                <Param name="Handle panel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPlayerDecalFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
    hex                     Buffer to store the logo filename.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the decal file name associated with a given client.
Error:
    Invalid client or client not in game.
Return:
    True on success, otherwise false.
">
                <Param name="int client"/>
                <Param name="char[] hex"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPlayerJingleFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
    hex                     Buffer to store the jingle filename.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the jingle file name associated with a given client.
Error:
    Invalid client or client not in game.
Return:
    True on success, otherwise false.
">
                <Param name="int client"/>
                <Param name="char[] hex"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPlayerResourceEntity" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the entity index of the player resource/manager entity.
Return:
    Index of resource entity or -1 if not found.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetPlayerWeaponSlot" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index.
    slot                    Slot index (mod specific).
Notes:
    Returns the weapon in a player&apos;s slot.
Error:
    Invalid client or client not in game, or lack of mod support.
Return:
    Entity index on success, -1 if no weapon existed.
">
                <Param name="int client"/>
                <Param name="int slot"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPluginFilename" func="yes">
            <Overload retVal="native void" descr="
Params:
    plugin                  Plugin Handle (INVALID_HANDLE uses the calling plugin).
    buffer                  Buffer to the store the file name.
    maxlength               Maximum length of the name buffer.
Notes:
    Retrieves a plugin&apos;s file name relative to the plugins folder.
Error:
    Invalid Handle.
">
                <Param name="Handle plugin"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPluginInfo" func="yes">
            <Overload retVal="native bool" descr="
Params:
    plugin                  Plugin Handle (INVALID_HANDLE uses the calling plugin).
    info                    Plugin info property to retrieve.
    buffer                  Buffer to store info in.
    maxlength               Maximum length of buffer.
Notes:
    Retrieves a plugin&apos;s public info.
Error:
    Invalid Handle.
Return:
    True on success, false if property is not available.
">
                <Param name="Handle plugin"/>
                <Param name="PluginInfo info"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetPluginIterator" func="yes">
            <Overload retVal="native Handle" descr="
Notes:
    Returns an iterator that can be used to search through plugins.
Error:
    Invalid Handle.
Return:
    Handle to iterate with.  Must be closed via
    CloseHandle().
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetPluginStatus" func="yes">
            <Overload retVal="native PluginStatus" descr="
Params:
    plugin                  Plugin Handle (INVALID_HANDLE uses the calling plugin).
Notes:
    Returns a plugin&apos;s status.
Error:
    Invalid Handle.
Return:
    Status code for the plugin.
">
                <Param name="Handle plugin"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetProfilerTime" func="yes">
            <Overload retVal="native float" descr="
Params:
    prof                    Profiling object.
Notes:
    Returns the amount of high-precision time in seconds
    that passed during the profiler&apos;s last start/stop
    cycle.
Error:
    Invalid Handle.
Return:
    Time elapsed in seconds.
">
                <Param name="Handle prof"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetRandomFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    fMin                    Minimum random bound.
    fMax                    Maximum random bound.
Notes:
    Returns a random floating point number from the Half-Life 2 Random Stream.
Return:
    A random number between (inclusive) fMin and fMax.
">
                <Param name="float fMin=0.0"/>
                <Param name="float fMax=1.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetRandomInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    nmin                    Minimum random bound.
    nmax                    Maximum random bound.
Notes:
    Returns a random number from the Half-Life 2 Random Stream.
Return:
    A random number between (inclusive) nmin and nmax.
">
                <Param name="int nmin"/>
                <Param name="int nmax"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetRegexSubString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    regex                   The regex handle to extract data from.
    str_id                  The index of the expression to get - starts at 0, and ends at captures - 1.
    buffer                  The buffer to set to the matching substring.
    maxlen                  The maximum string length of the buffer.
Notes:
    Returns a matched substring from a regex handle.
    Substring ids start at 0 and end at captures-1, where captures is the number returned
    by MatchRegex.
Return:
    True if a substring was found, False on fail/error
    @note str_id = 0 is the full captured string, anything else is the capture group index.
">
                <Param name="Handle regex"/>
                <Param name="int str_id"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetServerAuthId" func="yes">
            <Overload retVal="native void" descr="
Params:
    authType                Auth id type and format to use.
                            (Only AuthId_Steam3 and AuthId_SteamID64 are supported)
    auth                    Buffer to store the server&apos;s auth id.
    maxlen                  Maximum length of string buffer (includes NULL terminator).
Notes:
    Retrieves the server&apos;s authentication string (SteamID).
    Note: If called before server is connected to Steam, auth id
    will be invalid ([I:0:1], 1, etc.)
Error:
    Invalid AuthIdType given.
">
                <Param name="AuthIdType authType"/>
                <Param name="char[] auth"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetServerLanguage" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Retrieves the server&apos;s language.
Return:
    Language number server is using.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetServerNetStats" func="yes">
            <Overload retVal="native void" descr="
Params:
    in                      Buffer to store the input traffic velocity.
    out                     Buffer to store the output traffic velocity.
Notes:
    Returns the average server network traffic in bytes/sec.
">
                <Param name="float &amp;inAmount"/>
                <Param name="float &amp;outAmout"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetServerSteamAccountId" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the server&apos;s Steam account ID.
Return:
    Steam account ID or 0 if not available.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetStackBlockSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    stack                   Stack Handle.
Notes:
    Returns the blocksize the stack was created with.
Error:
    Invalid Handle
Return:
    The blocksize of the stack.
">
                <Param name="Handle stack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetSteamAccountID" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client Index.
    validate                Check backend validation status.
                            DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,
                            You WILL KNOW if you need to use this, MOST WILL NOT.
Notes:
    Returns the client&apos;s Steam account ID, a number uniquely identifying a given Steam account.
    This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.
Error:
    If the client is not connected or the index is invalid.
Return:
    Steam account ID or 0 if not available.
">
                <Param name="int client"/>
                <Param name="bool validate=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetStringTableData" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    stringidx               A string index.
    userdata                Buffer to store the user data. This will be set to &apos;&apos; if there is no user data.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the user data associated with a given string index.
Error:
    Invalid string table index or string index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="int tableidx"/>
                <Param name="int stringidx"/>
                <Param name="char[] userdata"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetStringTableDataLength" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    stringidx               A string index.
Notes:
    Returns the length of the user data associated with a given string index.
Error:
    Invalid string table index or string index.
Return:
    Length of user data. This will be 0 if there is no user data.
">
                <Param name="int tableidx"/>
                <Param name="int stringidx"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetStringTableMaxStrings" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
Notes:
    Returns the maximum number of strings that are allowed in a given string table.
Error:
    Invalid string table index.
Return:
    Maximum number of strings allowed.
">
                <Param name="int tableidx"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetStringTableName" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    name                    Buffer to store the name of the string table.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a string table.
Error:
    Invalid string table index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="int tableidx"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetStringTableNumStrings" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
Notes:
    Returns the number of strings that currently exist in a given string table.
Error:
    Invalid string table index.
Return:
    Number of strings that currently exist.
">
                <Param name="int tableidx"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetSysTickCount" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the operating system&apos;s &apos;tick count,&apos; which is a number of
    milliseconds since the operating system loaded.  This can be used
    for basic benchmarks.
Return:
    Tick count in milliseconds.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetTeamClientCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    index                   Team index.
Notes:
    Retrieves the number of players in a certain team.
    Note: This native should not be called before OnMapStart.
Error:
    Invalid team index.
Return:
    Number of players in the team.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTeamCount" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns the total number of teams in a game.
    Note: This native should not be called before OnMapStart.
Return:
    Total number of teams.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetTeamEntity" func="yes">
            <Overload retVal="native int" descr="
Params:
    teamIndex               Team index.
Notes:
    Returns the entity index of a team.
Error:
    Invalid team index.
Return:
    Entity index of team.
">
                <Param name="int teamIndex"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTeamName" func="yes">
            <Overload retVal="native void" descr="
Params:
    index                   Team index.
    name                    Buffer to store string in.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the team name based on a team index.
    Note: This native should not be called before OnMapStart.
Error:
    Invalid team index.
">
                <Param name="int index"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTeamScore" func="yes">
            <Overload retVal="native int" descr="
Params:
    index                   Team index.
Notes:
    Returns the score of a team based on a team index.
    Note: This native should not be called before OnMapStart.
Error:
    Invalid team index.
Return:
    Score.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTickInterval" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns the number of seconds in between game server ticks.
    Note: A tick, in this context, is a frame.
Return:
    Number of seconds in between ticks.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetTickedTime" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns the simulated game time.
    This time is internally maintained by SourceMod and is based on the game
    tick count and tick rate.  Unlike GetGameTime(), it will increment past
    map changes and while no players are connected.  Unlike GetEngineTime(),
    it will not increment based on the system clock (i.e. it is still bound
    to the ticking process).
Return:
    Time based on the game tick count.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetTime" func="yes">
            <Overload retVal="native int" descr="
Params:
    bigStamp                Optional array to store the 64bit timestamp in.
Notes:
    Gets the system time as a unix timestamp.
Return:
    32bit timestamp (number of seconds since unix epoch).
">
                <Param name="int bigStamp[2]={0,0}"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTopMenuInfoString" func="yes">
            <Overload retVal="native int" descr="
Params:
    topmenu                 TopMenu Handle.
    parent                  TopMenuObject ID.
    buffer                  Buffer to store info string.
    maxlength               Maximum size of info string.
Notes:
    Retrieves the info string of a top menu item.
Error:
    Invalid TopMenu Handle or TopMenuObject ID.
Return:
    Number of bytes written, not including the
    null terminator.
">
                <Param name="Handle topmenu"/>
                <Param name="TopMenuObject parent"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTopMenuObjName" func="yes">
            <Overload retVal="native int" descr="
Params:
    topmenu                 TopMenu Handle.
    topobj                  TopMenuObject ID.
    buffer                  Buffer to store info string.
    maxlength               Maximum size of info string.
Notes:
    Retrieves the name string of a top menu item.
Error:
    Invalid TopMenu Handle or TopMenuObject ID.
Return:
    Number of bytes written, not including the
    null terminator.
">
                <Param name="Handle topmenu"/>
                <Param name="TopMenuObject topobj"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTrieArray" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    array                   Buffer to store array.
    max_size                Maximum size of array buffer.
    size                    Optional parameter to store the number of elements written to the buffer.
Notes:
    Retrieves an array in a Map.
Error:
    Invalid Handle.
Return:
    True on success.  False if the key is not set, or the key is set
    as a value or string (not an array).
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="any[] array"/>
                <Param name="int max_size"/>
                <Param name="int &amp;size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTrieSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    map                     Map Handle.
Notes:
    Retrieves the number of elements in a map.
Error:
    Invalid Handle.
Return:
    Number of elements in the trie.
">
                <Param name="Handle map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTrieSnapshotKey" func="yes">
            <Overload retVal="native int" descr="
Params:
    snapshot                Map snapshot.
    index                   Key index (starting from 0).
    buffer                  String buffer.
    maxlength               Maximum buffer length.
Notes:
    Retrieves the key string of a given key in a map snapshot.
Error:
    Invalid Handle or index out of range.
Return:
    Number of bytes written to the buffer.
">
                <Param name="Handle snapshot"/>
                <Param name="int index"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTrieString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    value                   Buffer to store value.
    max_size                Maximum size of string buffer.
    size                    Optional parameter to store the number of bytes written to the buffer.
Notes:
    Retrieves a string in a Map.
Error:
    Invalid Handle.
Return:
    True on success.  False if the key is not set, or the key is set
    as a value or array (not a string).
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int max_size"/>
                <Param name="int &amp;size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetTrieValue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    value                   Variable to store value.
Notes:
    Retrieves a value in a Map.
Error:
    Invalid Handle.
Return:
    True on success.  False if the key is not set, or the key is set
    as an array or string (not a value).
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="any &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetURandomFloat" func="yes">
            <Overload retVal="native float" descr="
Notes:
    Returns a uniform random float in the range [0, 1).
    Note: Uniform random number streams are seeded automatically per-plugin.
Return:
    Uniform random floating-point number.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetURandomInt" func="yes">
            <Overload retVal="native int" descr="
Notes:
    Returns a random integer in the range [0, 2^31-1].
    Note: Uniform random number streams are seeded automatically per-plugin.
Return:
    Random integer.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetUserAdmin" func="yes">
            <Overload retVal="native AdminId" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Retrieves a client&apos;s AdminId.
Error:
    Invalid client index, or client not connected.
Return:
    AdminId of the client, or INVALID_ADMIN_ID if none.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetUserFlagBits" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns client access flags.  If the client is not an admin,
    the result is always 0.
Error:
    Invalid client index, or client not connected.
Return:
    Flags
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetUserMessageId" func="yes">
            <Overload retVal="native UserMsg" descr="
Params:
    msg                     String containing message name (case sensitive).
Notes:
    Returns the ID of a given message, or -1 on failure.
Return:
    A message index, or INVALID_MESSAGE_ID on failure.
">
                <Param name="const char[] msg"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetUserMessageName" func="yes">
            <Overload retVal="native bool" descr="
Params:
    msg_id                  Message index.
    msg                     Buffer to store the name of the message.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a message by ID.
Return:
    True if message index is valid, false otherwise.
">
                <Param name="UserMsg msg_id"/>
                <Param name="char[] msg"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetUserMessageType" func="yes">
            <Overload retVal="native UserMessageType" descr="
Notes:
    Returns usermessage serialization type used for the current engine
Return:
    The supported usermessage type.
">
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorAngles" func="yes">
            <Overload retVal="native void" descr="
Params:
    vec                     Vector.
    angle                   Angle buffer.
Notes:
    Returns angles from a vector.
">
                <Param name="const float vec[3]"/>
                <Param name="float angle[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorCrossProduct" func="yes">
            <Overload retVal="native void" descr="
Params:
    vec1                    First vector.
    vec2                    Second vector.
    result                  Resultant vector.
Notes:
    Computes the cross product of two vectors.  Any input array can be the same
    as the output array.
">
                <Param name="const float vec1[3]"/>
                <Param name="const float vec2[3]"/>
                <Param name="float result[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorDistance" func="yes">
            <Overload retVal="native float" descr="
Params:
    vec1                    First vector.
    vec2                    Second vector.
    squared                 If true, the result will be squared (for optimization).
Notes:
    Calculates the distance between two vectors.
Return:
    Vector distance.
">
                <Param name="const float vec1[3]"/>
                <Param name="const float vec2[3]"/>
                <Param name="bool squared=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorDotProduct" func="yes">
            <Overload retVal="native float" descr="
Params:
    vec1                    First vector.
    vec2                    Second vector.
Notes:
    Calculates the dot product of two vectors.
Return:
    Dot product of the two vectors.
">
                <Param name="const float vec1[3]"/>
                <Param name="const float vec2[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorLength" func="yes">
            <Overload retVal="native float" descr="
Params:
    vec                     Vector.
    squared                 If true, the result will be squared (for optimization).
Notes:
    Calculates a vector&apos;s length.
Return:
    Vector length (magnitude).
">
                <Param name="const float vec[3]"/>
                <Param name="bool squared=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetVectorVectors" func="yes">
            <Overload retVal="native void" descr="
Params:
    vec                     Vector.
    right                   Right vector buffer or NULL_VECTOR.
    up                      Up vector buffer or NULL_VECTOR.
Notes:
    Returns direction vectors from a vector.
">
                <Param name="const float vec[3]"/>
                <Param name="float right[3]"/>
                <Param name="float up[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GivePlayerAmmo" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  The client index.
    amount                  Amount of ammo to give. Is capped at ammotype&apos;s limit.
    ammotype                Type of ammo to give to player.
    suppressSound           If true, don&apos;t play the ammo pickup sound.
Notes:
    Gives ammo of a certain type to a player.
    This natives obeys the maximum amount of ammo a player can carry per ammo type.
Return:
    Amount of ammo actually given.
">
                <Param name="int client"/>
                <Param name="int amount"/>
                <Param name="int ammotype"/>
                <Param name="bool suppressSound=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GivePlayerItem" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index.
    item                    Item classname (such as weapon_ak47).
    iSubType                Unknown.
Notes:
    Gives a named item to a player.
Error:
    Invalid client or client not in game, or lack of mod support.
Return:
    Entity index on success, or -1 on failure.
">
                <Param name="int client"/>
                <Param name="const char[] item"/>
                <Param name="int iSubType=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HasEndOfMapVoteFinished" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Checks if MapChooser&apos;s end of map vote has completed.
Return:
    True if complete, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="HasEntProp" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
Notes:
    Checks if an entity property exists on an entity.
Error:
    Invalid entity.
Return:
    Whether the property exists on the entity.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookConVarChange" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    callback                An OnConVarChanged function pointer.
Notes:
    Creates a hook for when a console variable&apos;s value is changed.
Error:
    Invalid or corrupt Handle or invalid callback function.
">
                <Param name="Handle convar"/>
                <Param name="ConVarChanged callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookEntityOutput" func="yes">
            <Overload retVal="native void" descr="
Params:
    classname               The classname to hook.
    output                  The output name to hook.
    callback                An EntityOutput function pointer.
Notes:
    Add an entity output hook on a entity classname
Error:
    Entity Outputs disabled.
">
                <Param name="const char[] classname"/>
                <Param name="const char[] output"/>
                <Param name="EntityOutput callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookEvent" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Name of event.
    callback                An EventHook function pointer.
    mode                    Optional EventHookMode determining the type of hook.
Notes:
    Creates a hook for when a game event is fired.
Error:
    Invalid event name or invalid callback function.
">
                <Param name="const char[] name"/>
                <Param name="EventHook callback"/>
                <Param name="EventHookMode mode=EventHookMode_Post"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookEventEx" func="yes">
            <Overload retVal="native bool" descr="
Params:
    name                    Name of event.
    callback                An EventHook function pointer.
    mode                    Optional EventHookMode determining the type of hook.
Notes:
    Creates a hook for when a game event is fired.
Error:
    Invalid callback function.
Return:
    True if event exists and was hooked successfully, false otherwise.
">
                <Param name="const char[] name"/>
                <Param name="EventHook callback"/>
                <Param name="EventHookMode mode=EventHookMode_Post"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookSingleEntityOutput" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  The entity on which to add a hook.
    output                  The output name to hook.
    callback                An EntityOutput function pointer.
    once                    Only fire this hook once and then remove itself.
Notes:
    Add an entity output hook on a single entity instance
Error:
    Entity Outputs disabled or Invalid Entity index.
">
                <Param name="int entity"/>
                <Param name="const char[] output"/>
                <Param name="EntityOutput callback"/>
                <Param name="bool once=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="HookUserMessage" func="yes">
            <Overload retVal="native void" descr="
Params:
    msg_id                  Message index.
    hook                    Function to use as a hook.
    intercept               If intercept is true, message will be fully intercepted,
                            allowing the user to block the message.  Otherwise,
                            the hook is normal and ignores the return value.
    post                    Notification function.
Notes:
    Hooks a user message.
Error:
    Invalid message index.
">
                <Param name="UserMsg msg_id"/>
                <Param name="MsgHook hook"/>
                <Param name="bool intercept=false"/>
                <Param name="MsgPostHook post=INVALID_FUNCTION"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IgniteEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
    time                    Number of seconds to set on fire.
    npc                     True to only affect NPCs.
    size                    Unknown.
    level                   Unknown.
Notes:
    Ignites an entity on fire.
Error:
    Invalid entity or client not in game, or lack of mod support.
">
                <Param name="int entity"/>
                <Param name="float time"/>
                <Param name="bool npc=false"/>
                <Param name="float size=0.0"/>
                <Param name="bool level=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ImplodeStrings" func="yes">
            <Overload retVal="stock int" descr="
Params:
    strings                 An array of strings.
    numStrings              Number of strings in the array.
    join                    The join string to insert between each string.
    buffer                  Output buffer to write the joined string to.
    maxLength               Maximum length of the output buffer.
Notes:
    Joins an array of strings into one string, with a &apos;join&apos; string inserted in
    between each given string.  This function complements ExplodeString.
Return:
    Number of bytes written to the output buffer.
">
                <Param name="const char[][] strings"/>
                <Param name="int numStrings"/>
                <Param name="const char[] join"/>
                <Param name="char[] buffer"/>
                <Param name="int maxLength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InactivateClient" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  The client index
Notes:
    Sets the client to an inactive state waiting for a new map
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InitiateMapChooserVote" func="yes">
            <Overload retVal="native void" descr="
Params:
    when                    MapChange consant of when the resulting mapchange should occur.
    inputarray              ADT array list of maps to add to the vote.
Notes:
    Initiates a MapChooser map vote
    Note: If no input array is specified mapchooser will use its internal list. This includes
    any nominations and excluded maps (as per mapchoosers convars).
">
                <Param name="MapChange when"/>
                <Param name="ArrayList inputarray=null"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InsertMenuItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    position                Position, starting from 0.
    info                    Item information string.
    display                 Default item display string.
    style                   Drawing style flags.  Anything other than DEFAULT or
                            DISABLED will be completely ignored when paginating.
Notes:
    Inserts an item into the menu before a certain position; the new item will
    be at the given position and all next items pushed forward.
Error:
    Invalid Handle or menu position.
Return:
    True on success, false on failure.
">
                <Param name="Handle menu"/>
                <Param name="position"/>
                <Param name="const char[] info"/>
                <Param name="const char[] display"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InsertServerCommand" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Inserts a server command at the beginning of the server command buffer.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="IntToString" func="yes">
            <Overload retVal="native int" descr="
Params:
    num                     Integer to convert.
    str                     Buffer to store string in.
    maxlength               Maximum length of string buffer.
Notes:
    Converts an integer to a string.
Return:
    Number of cells written to buffer.
">
                <Param name="int num"/>
                <Param name="char[] str"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InternalShowMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    str                     Full menu string as would be passed over the network.
    time                    Time to hold the menu for.
    keys                    Selectable key bitstring.
    handler                 Optional handler function, with the same rules as
                            SendPanelToClient().
Notes:
    This function is provided for legacy code only.  Some older plugins may use
    network messages instead of the panel API.  This function wraps the panel
    API for eased portability into the SourceMod menu system.
    This function is only usable with the Radio Menu style.  You do not need to
    split up your menu into multiple packets; SourceMod will break the string
    up internally.
Error:
    Invalid client index, or radio menus not supported.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="const char[] str"/>
                <Param name="int time"/>
                <Param name="int keys=-1"/>
                <Param name="MenuHandler handler=INVALID_FUNCTION"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharAlpha" func="yes">
            <Overload retVal="native bool" descr="
Params:
    chr                     Character to test.
Notes:
    Returns whether a character is an ASCII alphabet character.
    Multi-byte characters will always return false.
Return:
    True if character is alphabetical, otherwise false.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharLower" func="yes">
            <Overload retVal="native bool" descr="
Params:
    chr                     Character to test.
Notes:
    Returns whether an alphabetic character is lowercase.
    Multi-byte characters will always return false.
Return:
    True if character is lowercase, otherwise false.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharMB" func="yes">
            <Overload retVal="native int" descr="
Params:
    chr                     Character to test.
Notes:
    Returns if a character is multi-byte or not.
Return:
    0 for a normal 7-bit ASCII character,
    otherwise number of bytes in multi-byte character.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharNumeric" func="yes">
            <Overload retVal="native bool" descr="
Params:
    chr                     Character to test.
Notes:
    Returns whether a character is numeric.
    Multi-byte characters will always return false.
Return:
    True if character is numeric, otherwise false.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharSpace" func="yes">
            <Overload retVal="native bool" descr="
Params:
    chr                     Character to test.
Notes:
    Returns whether a character is whitespace.
    Multi-byte characters will always return false.
Return:
    True if character is whitespace, otherwise false.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsCharUpper" func="yes">
            <Overload retVal="native bool" descr="
Params:
    chr                     Character to test.
Notes:
    Returns whether an alphabetic character is uppercase.
    Multi-byte characters will always return false.
Return:
    True if character is uppercase, otherwise false.
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsChatTrigger" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Returns whether the current say hook is a chat trigger.
    This function is only meaningful inside say or say_team hooks.
Return:
    True if a chat trigger, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientAuthorized" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player has been authenticated.
Return:
    True if player has been authenticated, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientConnected" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player is connected.
Return:
    True if player is connected to the server, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientInGame" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index (index does not have to be connected).
Notes:
    Returns if a certain player has entered the game.
Error:
    Invalid client index.
Return:
    True if player has entered the game, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientInKickQueue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index (must be connected).
Notes:
    Returns if a client is in the &apos;kick queue&apos; (i.e. the client will be kicked
    shortly and thus they should not appear as valid).
Error:
    Invalid client index.
Return:
    True if in the kick queue, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientInVotePool" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
Notes:
    Returns whether a client is in the pool of clients allowed
    to participate in the current vote.  This is determined by
    the client list passed to VoteMenu().
Error:
    If no vote is in progress or client index is invalid.
Return:
    True if client is allowed to vote, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientMuted" func="yes">
            <Overload retVal="native bool" descr="
Params:
    iMuter                  The muter index.
    iMutee                  The mutee index.
Notes:
    Retrieves if the muter has muted the mutee.
Return:
    True if muter has muted mutee, false otherwise.
">
                <Param name="int iMuter"/>
                <Param name="int iMutee"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientObserver" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player is an observer/spectator.
Return:
    True if player is an observer, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientReplay" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player is the Replay bot.
Return:
    True if player is the Replay bot, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientSourceTV" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player is the SourceTV bot.
Return:
    True if player is the SourceTV bot, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsClientTimingOut" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns if a client is timing out
Error:
    Invalid client index, client not connected, or fake client.
Return:
    True if client is timing out, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsDecalPrecached" func="yes">
            <Overload retVal="native bool" descr="
Params:
    decal                   Name of the decal to check.
Notes:
    Returns if a given decal is precached.
Return:
    True if precached, false otherwise.
">
                <Param name="const char[] decal"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsDedicatedServer" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Returns whether the server is dedicated.
Return:
    True if dedicated, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="IsEndOfFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    file                    Handle to the file.
Notes:
    Tests if the end of file has been reached.
Error:
    Invalid Handle.
Return:
    True if end of file has been reached, false otherwise.
">
                <Param name="Handle file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsEntNetworkable" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Index of the entity.
Notes:
    Returns whether or not an entity has a valid networkable edict.
Return:
    True if networkable, false if invalid or not networkable.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsFakeClient" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player index.
Notes:
    Returns if a certain player is a fake client.
Return:
    True if player is a fake client, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsGenericPrecached" func="yes">
            <Overload retVal="native bool" descr="
Params:
    generic                 Name of the generic file to check.
Notes:
    Returns if a given generic file is precached.
Return:
    True if precached, false otherwise.
">
                <Param name="const char[] generic"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsMapValid" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map name, excluding .bsp extension.
Notes:
    Returns whether a map is valid or not.
Return:
    True if valid, false otherwise.
">
                <Param name="const char[] map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsModelPrecached" func="yes">
            <Overload retVal="native bool" descr="
Params:
    model                   Name of the model to check.
Notes:
    Returns if a given model is precached.
Return:
    True if precached, false otherwise.
">
                <Param name="const char[] model"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsNativeParamNullString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    param                   Parameter number, starting from 1.
Notes:
    Check if the native parameter is the NULL_STRING.
Return:
    True if NULL_STRING, false otherwise.
">
                <Param name="int param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsNativeParamNullVector" func="yes">
            <Overload retVal="native bool" descr="
Params:
    param                   Parameter number, starting from 1.
Notes:
    Check if the native parameter is the NULL_VECTOR.
Return:
    True if NULL_VECTOR, false otherwise.
">
                <Param name="int param"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsNewVoteAllowed" func="yes">
            <Overload retVal="stock bool" descr="
Notes:
    Quick stock to determine whether voting is allowed.  This doesn&apos;t let you
    fine-tune a reason for not voting, so it&apos;s not recommended for lazily
    telling clients that voting isn&apos;t allowed.
Return:
    True if voting is allowed, false if voting is in progress
    or the cooldown is active.
">
            </Overload>
        </KeyWord>
        <KeyWord name="IsNullString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    str                     The string to test.
Notes:
    Check if the given string is the NULL_STRING.
Return:
    True if NULL_STRING, false otherwise.
">
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsNullVector" func="yes">
            <Overload retVal="native bool" descr="
Params:
    vec                     The vector to test.
Notes:
    Check if the given vector is the NULL_VECTOR.
Return:
    True if NULL_VECTOR, false otherwise.
">
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsPackReadable" func="yes">
            <Overload retVal="native bool" descr="
Params:
    pack                    Handle to the data pack.
    bytes                   Number of bytes to simulate reading.
Notes:
    Returns whether or not a specified number of bytes from the data pack
    position to the end can be read.
Error:
    Invalid handle.
Return:
    True if can be read, false otherwise.
">
                <Param name="Handle pack"/>
                <Param name="int bytes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsPlayerAlive" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Returns if the client is alive or dead.
    Note: This function was originally in SDKTools and was moved to core.
Error:
    Invalid client index, client not in game, or no mod support.
Return:
    True if the client is alive, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsPluginDebugging" func="yes">
            <Overload retVal="native bool" descr="
Params:
    plugin                  Plugin Handle (INVALID_HANDLE uses the calling plugin).
Notes:
    Retrieves whether or not a plugin is being debugged.
Error:
    Invalid Handle.
Return:
    True if being debugged, false otherwise.
">
                <Param name="Handle plugin"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsProfilingActive" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Returns true if the global profiler is enabled; false otherwise. It is
    not necessary to call this before Enter/LeaveProfilingEvent.
">
            </Overload>
        </KeyWord>
        <KeyWord name="IsServerProcessing" func="yes">
            <Overload retVal="native bool" descr="
Notes:
    Returns whether or not the server is processing frames or not.
    The server does not process frames until at least one client joins the game.
    Once the first player has in, even if that player, leaves, the server&apos;s
    timers and entities will work.
Return:
    True if the server is ticking, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="IsStackEmpty" func="yes">
            <Overload retVal="native bool" descr="
Params:
    stack                   Stack Handle.
Notes:
    Checks if a stack is empty.
Error:
    Invalid Handle.
Return:
    True if empty, false if not empty.
">
                <Param name="Handle stack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsTranslatedForLanguage" func="yes">
            <Overload retVal="native bool" descr="
Params:
    phrase                  Phrase to check.
    language                Language number.
Notes:
    Determines if there is a translation for the specified language.
Return:
    True if translation exists.
">
                <Param name="const char[] phrase"/>
                <Param name="int language"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsValidConVarChar" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    c                       Character to validate.
Notes:
    Returns true if the supplied character is valid in a ConVar name.
Return:
    True is valid for ConVars, false otherwise
">
                <Param name="int c"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsValidEdict" func="yes">
            <Overload retVal="native bool" descr="
Params:
    edict                   Index of the edict.
Notes:
    Returns whether or not an edict index is valid.
Return:
    True if valid, false otherwise.
">
                <Param name="int edict"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsValidEntity" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Index of the entity.
Notes:
    Returns whether or not an entity is valid.  Returns false
    if there is no matching CBaseEntity for this entity index.
Return:
    True if valid, false otherwise.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsVoteInProgress" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Deprecated; no longer used.
Notes:
    Returns whether a vote is in progress.
Return:
    True if a vote is in progress, false otherwise.
">
                <Param name="Handle menu=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KeyValuesToFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    file                    File to dump write to.
Notes:
    Converts a KeyValues tree to a file.  The tree is dumped
    from the current position.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle kv"/>
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KickClient" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Optional formatting rules for disconnect reason.
                            Note that a period is automatically appended to the string by the engine.
    ...                     Variable number of format parameters.
Notes:
    Disconnects a client from the server as soon as the next frame starts.
    Note: Originally, KickClient() was immediate.  The delay was introduced
    because despite warnings, plugins were using it in ways that would crash.
    The new safe version can break cases that rely on immediate disconnects,
    but ensures that plugins do not accidentally cause crashes.
    If you need immediate disconnects, use KickClientEx().
    Note: IsClientInKickQueue() will return true before the kick occurs.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] format=&apos;&apos;"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="KickClientEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Optional formatting rules for disconnect reason.
                            Note that a period is automatically appended to the string by the engine.
    ...                     Variable number of format parameters.
Notes:
    Immediately disconnects a client from the server.
    Kicking clients from certain events or callbacks may cause crashes.  If in
    doubt, create a short (0.1 second) timer to kick the client in the next
    available frame.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] format=&apos;&apos;"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="KillTimer" func="yes">
            <Overload retVal="native void" descr="
Params:
    timer                   Timer Handle to kill.
    autoClose               If autoClose is true, the data that was passed to CreateTimer() will
                            be closed as a handle if TIMER_DATA_HNDL_CLOSE was not specified.
Notes:
    Kills a timer.  Use this instead of CloseHandle() if you need more options.
Error:
    Invalid handles will cause a run time error.
">
                <Param name="Handle timer"/>
                <Param name="bool autoClose=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvCopySubkeys" func="yes">
            <Overload retVal="native void" descr="
Params:
    origin                  Origin KeyValues Handle.
    dest                    Destination KeyValues Handle.
Notes:
    Makes a new copy of all subkeys in the origin KeyValues to
    the destination KeyValues.
    NOTE: All KeyValues are processed from the current location not the root one.
Error:
    Invalid Handle.
">
                <Param name="Handle origin"/>
                <Param name="Handle dest"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvDeleteKey" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key.
Notes:
    Removes the given key from the current position.
Error:
    Invalid Handle.
Return:
    True on success, false if key did not exist.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvDeleteThis" func="yes">
            <Overload retVal="native int" descr="
Params:
    kv                      KeyValues Handle.
Notes:
    Removes the current sub-key and attempts to set the position
    to the sub-key after the removed one.  If no such sub-key exists,
    the position will be the parent key in the traversal stack.
    Given the sub-key having position &apos;N&apos; in the traversal stack, the
    removal will always take place from position &apos;N-1.&apos;
Error:
    Invalid Handle.
Return:
    1 if removal succeeded and there was another key.
    0 if the current node was not contained in the
    previous node, or no previous node exists.
    -1 if removal succeeded and there were no more keys,
    thus the state is as if KvGoBack() was called.
">
                <Param name="Handle kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvFindKeyById" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    id                      KeyValues id.
    name                    Buffer to store the name.
    maxlength               Maximum length of the value buffer.
Notes:
    Finds a KeyValues name by id.
Error:
    Invalid Handle.
Return:
    True on success, false if id not found.
">
                <Param name="Handle kv"/>
                <Param name="int id"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    r                       Red value, set by reference.
    g                       Green value, set by reference.
    b                       Blue value, set by reference.
    a                       Alpha value, set by reference.
Notes:
    Retrieves a set of color values from a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int &amp;r"/>
                <Param name="int &amp;g"/>
                <Param name="int &amp;b"/>
                <Param name="int &amp;a"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetDataType" func="yes">
            <Overload retVal="native KvDataTypes" descr="
Params:
    kv                      KeyValues Handle.
    key                     Key name.
Notes:
    Returns the data type at a key.
Error:
    Invalid Handle.
Return:
    KvDataType value of the key.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a floating point value from a KeyValues key.
Error:
    Invalid Handle.
Return:
    Floating point value of the key.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="float defvalue=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetNameSymbol" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    key                     Key name.
    id                      Id of the found KeyValue.
Notes:
    Finds a KeyValues id inside a KeyValues tree.
Error:
    Invalid Handle.
Return:
    True on success, false if key not found.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int &amp;id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetNum" func="yes">
            <Overload retVal="native int" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves an integer value from a KeyValues key.
Error:
    Invalid Handle.
Return:
    Integer value of the key.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int defvalue=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetSectionName" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    section                 Buffer to store the section name.
    maxlength               Maximum length of the name buffer.
Notes:
    Retrieves the current section name.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle kv"/>
                <Param name="char[] section"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetSectionSymbol" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    id                      Id of the current section.
Notes:
    Retrieves the current section id.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle kv"/>
                <Param name="int &amp;id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetString" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   Buffer to store key value in.
    maxlength               Maximum length of the value buffer.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a string value from a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
                <Param name="const char[] defvalue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetUInt64" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   Array to represent the large integer.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a large integer value from a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int value[2]"/>
                <Param name="int defvalue[2]={0,0}"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGetVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    vec                     Destination vector to store the value in.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a vector value from a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="float vec[3]"/>
                <Param name="const float defvalue[3]={0.0, 0.0, 0.0}"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGoBack" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
Notes:
    Jumps back to the previous position.  Returns false if there are no
    previous positions (i.e., at the root node).  This should be called
    once for each successful Jump call, in order to return to the top node.
    This function pops one node off the internal traversal stack.
Error:
    Invalid Handle.
Return:
    True on success, false if there is no higher node.
">
                <Param name="Handle kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGotoFirstSubKey" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    keyOnly                 If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the first sub key.
    This native adds to the internal traversal stack.
Error:
    Invalid Handle.
Return:
    True on success, false if there was no first sub key.
">
                <Param name="Handle kv"/>
                <Param name="bool keyOnly=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvGotoNextKey" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    keyOnly                 If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the next sub key.
    This native does NOT add to the internal traversal stack, and thus
    KvGoBack() is not needed for each successive call to this function.
Error:
    Invalid Handle.
Return:
    True on success, false if there was no next sub key.
">
                <Param name="Handle kv"/>
                <Param name="bool keyOnly=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvJumpToKey" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key.
    create                  If true, and the key does not exist, it will be created.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not and was not created.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="bool create=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvJumpToKeySymbol" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    id                      KeyValues id.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not.
">
                <Param name="Handle kv"/>
                <Param name="int id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvNodesInStack" func="yes">
            <Overload retVal="native int" descr="
Params:
    kv                      KeyValues Handle.
Notes:
    Returns the position in the jump stack; I.e. the number of calls
    required for KvGoBack to return to the root node.  If at the root node,
    0 is returned.
Error:
    Invalid Handle.
Return:
    Number of non-root nodes in the jump stack.
">
                <Param name="Handle kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvRewind" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
Notes:
    Sets the position back to the top node, emptying the entire node
    traversal history.  This can be used instead of looping KvGoBack()
    if recursive iteration is not important.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSavePosition" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
Notes:
    Saves the current position in the traversal stack onto the traversal
    stack.  This can be useful if you wish to use KvGotoNextKey() and
    have the previous key saved for backwards traversal.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    r                       Red value.
    g                       Green value.
    b                       Blue value.
    a                       Alpha value.
Notes:
    Sets a set of color values of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int r"/>
                <Param name="int g"/>
                <Param name="int b"/>
                <Param name="int a=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetEscapeSequences" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    useEscapes              Whether or not to read escape sequences.
Notes:
    Sets whether or not the KeyValues parser will read escape sequences.
    For example, \n would be read as a literal newline.  This defaults
    to false for new KeyValues structures.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="bool useEscapes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   Floating point value.
Notes:
    Sets a floating point value of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetNum" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   Value number.
Notes:
    Sets an integer value of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetSectionName" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    section                 Section name.
Notes:
    Sets the current section name.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] section"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetString" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   String value.
Notes:
    Sets a string value of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetUInt64" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   Large integer value (0=High bits, 1=Low bits)
Notes:
    Sets a large integer value of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="const int value[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="KvSetVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    vec                     Vector value.
Notes:
    Sets a vector value of a KeyValues key.
Error:
    Invalid Handle.
">
                <Param name="Handle kv"/>
                <Param name="const char[] key"/>
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LeaveProfilingEvent" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Mark the end of the last profiling event. This must be called in the same
    stack frame as StartProfilingEvent(). Not doing so, or throwing errors,
    will make the resulting profile very wrong.
">
            </Overload>
        </KeyWord>
        <KeyWord name="LibraryExists" func="yes">
            <Overload retVal="native bool" descr="
Params:
    name                    Library name of a plugin or extension.
Notes:
    Returns whether a library exists.  This function should be considered
    expensive; it should only be called on plugin to determine availability
    of resources.  Use OnLibraryAdded()/OnLibraryRemoved() to detect changes
    in optional resources.
Return:
    True if exists, false otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LoadFromAddress" func="yes">
            <Overload retVal="native int" descr="
Params:
    addr                    Address to a memory location.
    size                    How many bytes should be read.
Notes:
    Load up to 4 bytes from a memory address.
Return:
    The value that is stored at that address.
">
                <Param name="Address addr"/>
                <Param name="NumberType size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LoadGameConfigFile" func="yes">
            <Overload retVal="native GameData" descr="
Params:
    file                    File to load.  The path must be relative to the &apos;gamedata&apos; folder under the config folder
                            and the extension should be omitted.
Notes:
    Loads a game config file.
Return:
    A handle to the game config file or INVALID_HANDLE on failure.
">
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LoadTopMenuConfig" func="yes">
            <Overload retVal="native bool" descr="
Params:
    topmenu                 TopMenu Handle.
    file                    File path.
    error                   Error buffer.
    maxlength               Maximum size of the error buffer.
                            Error buffer will be filled with a
                            zero-terminated string if false is
                            returned.
Notes:
    Re-sorts the items in a TopMenu via a configuration file.
    The format of the configuration file should be a Valve Key-Values
    formatted file that SourceMod can parse.  There should be one root
    section, and one sub-section for each category.  Each sub-section&apos;s
    name should match the category name.
    Each sub-section may only contain key/value pairs in the form of:
    key: &apos;item&apos;
    value: Name of the item as passed to AddToTopMenu().
    The TopMenu will draw items in the order declared in the configuration
    file.  If items do not appear in the configuration file, they are sorted
    per-player based on how the handler function renders for that player.
    These items appear after the configuration sorted items.
Error:
    Invalid TopMenu Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle topmenu"/>
                <Param name="const char[] file"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LoadTranslations" func="yes">
            <Overload retVal="native void" descr="
Params:
    file                    Translation file.
Notes:
    Loads a translation file for the plugin calling this native.
    If no extension is specified, .txt is assumed.
">
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LockStringTables" func="yes">
            <Overload retVal="native bool" descr="
Params:
    lock                    Determines whether network string tables should be locked.
                            True means the tables should be locked for writing; false means unlocked.
Notes:
    Locks or unlocks the network string tables.
Return:
    Previous lock state.
">
                <Param name="bool lock"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogAction" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client performing the action, 0 for server, or -1 if not
                            applicable.
    target                  Client being targetted, or -1 if not applicable.
    message                 Message format.
    ...                     Message formatting parameters.
Notes:
    Logs an action from a command or event whereby interception and routing may
    be important.  This is intended to be a logging version of ShowActivity().
">
                <Param name="int client"/>
                <Param name="int target"/>
                <Param name="const char[] message"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogError" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  String format.
    ...                     Format arguments.
Notes:
    Logs a plugin error message to the SourceMod logs.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogMessage" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  String format.
    ...                     Format arguments.
Notes:
    Logs a plugin message to the SourceMod logs.  The log message will be
    prefixed by the plugin&apos;s logtag (filename).
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogStackTrace" func="yes">
            <Overload retVal="native void" descr="
Params:
    fmt                     Format string to send with the stack trace.
    ...                     Format arguments.
Notes:
    Logs a stack trace from the current function call. Code
    execution continues after the call
Error:
    Always logs a stack trace.
">
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogToFile" func="yes">
            <Overload retVal="native void" descr="
Params:
    file                    File to write the log message in.
    format                  String format.
    ...                     Format arguments.
Notes:
    Logs a message to any file.  The log message will be in the normal
    SourceMod format, with the plugin logtag prepended.
Error:
    File could not be opened/written.
">
                <Param name="const char[] file"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogToFileEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    file                    File to write the log message in.
    format                  String format.
    ...                     Format arguments.
Notes:
    Same as LogToFile(), except no plugin logtag is prepended.
Error:
    File could not be opened/written.
">
                <Param name="const char[] file"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogToGame" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  String format.
    ...                     Format arguments.
Notes:
    Logs a generic message to the HL2 logs.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogToOpenFile" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    Handle to the file.
    message                 Message format.
    ...                     Message format parameters.
Notes:
    Same as LogToFile(), except uses an open file Handle.  The file must
    be opened in text appending mode.
Error:
    Invalid Handle.
">
                <Param name="Handle hndl"/>
                <Param name="const char[] message"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogToOpenFileEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    Handle to the file.
    message                 Message format.
    ...                     Message format parameters.
Notes:
    Same as LogToFileEx(), except uses an open file Handle.  The file must
    be opened in text appending mode.
Error:
    Invalid Handle.
">
                <Param name="Handle hndl"/>
                <Param name="const char[] message"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="Logarithm" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value.
    base                    Logarithm base to use, default is 10.
Notes:
    Returns the logarithm of any base specified.
Return:
    log(value)/log(base).
">
                <Param name="float value"/>
                <Param name="float base=10.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_BindIdentity" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    authMethod              Auth method to use, predefined or from RegisterAuthIdentType().
    ident                   String containing the arbitrary, unique identity.
Notes:
    Binds an admin to an identity for fast lookup later on.  The bind must be unique.
Return:
    True on success, false if the auth method was not found,
    ident was already taken, or ident invalid for auth method.
">
                <Param name="const char[] authMethod"/>
                <Param name="const char[] ident"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_CanTarget" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    target                  Target admin (may be INVALID_ADMIN_ID).
Notes:
    Tests whether one admin can target another.
    The heuristics for this check are as follows:
    0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.
    1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.
    2. If the targeted AdminId is the same as the targeting AdminId,
    (self) targeting succeeds.
    3. If the targeting admin is root, targeting succeeds.
    4. If the targeted admin has access higher (as interpreted by
    (sm_immunity_mode) than the targeting admin, then targeting fails.
    5. If the targeted admin has specific immunity from the
    targeting admin via group immunities, targeting fails.
    6. Targeting succeeds.
Return:
    True if targetable, false if immune.
">
                <Param name="AdminId other"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_GetFlags" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    mode                    Access mode to use.
Notes:
    Returns the bitstring of access flags on an admin.
Return:
    A bitstring containing which flags are enabled.
">
                <Param name="AdmAccessMode mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_GetGroup" func="yes">
            <Overload retVal="public native GroupId" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Group number to retrieve, from 0 to N-1, where N
                            is the value of the GroupCount property.
    name                    Buffer to store the group&apos;s name.
                            Note: This will safely chop UTF-8 strings.
    maxlength               Maximum size of the output name buffer.
Notes:
    Returns group information from an admin.
Return:
    A GroupId index and a name pointer, or
    INVALID_GROUP_ID and NULL if an error occurred.
">
                <Param name="int index"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_GetPassword" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Optional buffer to store the admin&apos;s password.
    maxlength               Maximum size of the output name buffer.
                            Note: This will safely chop UTF-8 strings.
Notes:
    Gets an admin&apos;s password.
Return:
    True if there was a password set, false otherwise.
">
                <Param name="char[] buffer=&apos;&apos;"/>
                <Param name="int maxlength=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_GetUsername" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    String buffer to store name.
    maxlength               Maximum size of string buffer.
Notes:
    Retrieves an admin&apos;s user name as made with CreateAdmin().
    This function can return UTF-8 strings, and will safely chop UTF-8 strings.
Return:
    Number of bytes written.
">
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_HasFlag" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    flag                    Admin flag to use.
    mode                    Access mode to check.
Notes:
    Returns whether or not a flag is enabled on an admin.
Return:
    True if enabled, false otherwise.
">
                <Param name="AdminFlag flag"/>
                <Param name="AdmAccessMode mode=Access_Effective"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_InheritGroup" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    gid                     GroupId index of the group.
Notes:
    Adds a group to an admin&apos;s inherited group list.  Any flags the group has
    will be added to the admin&apos;s effective flags.
Return:
    True on success, false on invalid input or duplicate membership.
">
                <Param name="GroupId gid"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_SetFlag" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    flag                    Admin flag to use.
    enabled                 True to enable, false to disable.
Notes:
    Sets whether or not a flag is enabled on an admin.
">
                <Param name="AdminFlag flag"/>
                <Param name="bool enabled"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_M_SetPassword" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    password                String containing the password.
Notes:
    Sets a password on an admin.
">
                <Param name="const char[] password"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_P_GroupCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    The number of groups of which this admin is a member.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_AdminId_P_ImmunityLevel" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_AdminId_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Immunity level used for targetting.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_C_ArrayList" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    blocksize               The number of cells each member of the array can
                            hold.  For example, 32 cells is equivalent to:
                            new Array[X][32]
    startsize               Initial size of the array.  Note that data will
                            NOT be auto-initialized.
Notes:
    Creates a dynamic global cell array.  While slower than a normal array,
    it can be used globally AND dynamically, which is otherwise impossible.
    The contents of the array are uniform; i.e. storing a string at index X
    and then retrieving it as an integer is NOT the same as StringToInt()!
    The &apos;blocksize&apos; determines how many cells each array slot has; it cannot
    be changed after creation.
Return:
    New Handle to the array object.
">
                <Param name="int blocksize=1"/>
                <Param name="int startsize=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Clear" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Clears an array of all entries.  This is the same as Resize(0).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Clone" func="yes">
            <Overload retVal="public native ArrayList" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Clones an array, returning a new handle with the same size and data.
    This should NOT be confused with CloneHandle. This is a completely new
    handle with the same data but no relation to the original. It should
    closed when no longer needed.
Return:
    New handle to the cloned array object
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Erase" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array to remove at.
Notes:
    Removes an array index, shifting the entire array down from that position
    on.  For example, if item 8 of 10 is removed, the last 3 items will then be
    (6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.
Error:
    Invalid index.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_FindString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    item                    String to search for
Notes:
    Returns the index for the first occurrence of the provided string. If
    the string cannot be located, -1 will be returned.
Return:
    Array index, or -1 on failure
">
                <Param name="const char[] item"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_FindValue" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    item                    Value to search for
    block                   Optionally which block to search in
Notes:
    Returns the index for the first occurrence of the provided value. If the
    value cannot be located, -1 will be returned.
Error:
    Invalid block index
Return:
    Array index, or -1 on failure
">
                <Param name="any item"/>
                <Param name="int block=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Get" func="yes">
            <Overload retVal="public native any" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    block                   Optionally specify which block to read from
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally read as a byte instead of a cell.
Notes:
    Retrieves a cell value from an array.
Error:
    Invalid index.
Return:
    Value read.
">
                <Param name="int index"/>
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_GetArray" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    buffer                  Buffer to store the array in.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Retrieves an array of cells from an array.
Error:
    Invalid index.
Return:
    Number of cells copied.
">
                <Param name="int index"/>
                <Param name="any[] buffer"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_GetString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    buffer                  Buffer to copy to.
    maxlength               Maximum size of the buffer.
Notes:
    Retrieves a string value from an array.
Error:
    Invalid index.
Return:
    Number of characters copied.
">
                <Param name="int index"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Push" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   Value to push.
Notes:
    Pushes a value onto the end of an array, adding a new index.
    This may safely be used even if the array has a blocksize greater
    than 1.
Error:
    Invalid Handle or out of memory.
Return:
    Index of the new entry.
">
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_PushArray" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    values                  Block of values to copy.
    size                    If not set, the number of elements copied from the array
                            will be equal to the blocksize.  If set higher than the
                            blocksize, the operation will be truncated.
Notes:
    Pushes an array of cells onto the end of an array.  The cells
    are pushed as a block (i.e. the entire array sits at the index),
    rather than pushing each cell individually.
Return:
    Index of the new entry.
">
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_PushString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   String to push.
Notes:
    Pushes a string onto the end of an array, truncating it if it is too big.
Return:
    Index of the new entry.
">
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Resize" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    newsize                 New size.
Notes:
    Resizes an array.  If the size is smaller than the current size, the
    array is truncated.  If the size is larger than the current size,
    the data at the additional indexes will not be initialized.
">
                <Param name="int newsize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Set" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    value                   Cell value to set.
    block                   Optionally specify which block to write to
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally set as a byte instead of a cell.
Notes:
    Sets a cell value in an array.
Error:
    Invalid index, or invalid block.
">
                <Param name="int index"/>
                <Param name="any value"/>
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_SetArray" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    values                  Array to copy.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Sets an array of cells in an array.
Error:
    Invalid index.
Return:
    Number of cells copied.
">
                <Param name="int index"/>
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_SetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array.
    value                   String value to set.
Notes:
    Sets a string value in an array.
Error:
    Invalid index.
Return:
    Number of characters copied.
">
                <Param name="int index"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_ShiftUp" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Index in the array to shift up from.
Notes:
    Shifts an array up.  All array contents after and including the given
    index are shifted up by one, and the given index is then &apos;free.&apos;
    After shifting, the contents of the given index is undefined.
Error:
    Invalid index.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_Sort" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    order                   Sort order to use, same as other sorts.
    type                    Data type stored in the ADT Array
Notes:
    Sort an ADT Array. Specify the type as Integer, Float, or String.
">
                <Param name="SortOrder order"/>
                <Param name="SortType type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_SortCustom" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    sortfunc                Sort comparison function to use
    hndl                    Optional Handle to pass through the comparison calls.
Notes:
    Custom sorts an ADT Array. You must pass in a comparison function.
">
                <Param name="SortFuncADTArray sortfunc"/>
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_M_SwapAt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index1                  First index.
    index2                  Second index.
Notes:
    Swaps two items in the array.
Error:
    Invalid index.
">
                <Param name="int index1"/>
                <Param name="int index2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_P_BlockSize" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieve the blocksize the array was created with.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayList_Handle_P_Length" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayList_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieve the size of the array.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_C_ArrayStack" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    blocksize               The number of cells each entry in the stack can
                            hold.  For example, 32 cells is equivalent to:
                            new Array[X][32]
Notes:
    Creates a stack structure.  A stack is a LIFO (last in, first out)
    vector (array) of items.  It has O(1) insertion and O(1) removal.
    Stacks have two operations: Push (adding an item) and Pop (removes
    items in reverse-push order).
    The contents of the stack are uniform; i.e. storing a string and then
    retrieving it as an integer is NOT the same as StringToInt()!
    The &apos;blocksize&apos; determines how many cells each slot has; it cannot
    be changed after creation.
">
                <Param name="int blocksize=1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_Pop" func="yes">
            <Overload retVal="public native any" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    block                   Optionally specify which block to read from
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally read as a byte instead of a cell.
Notes:
    Pops a cell value from a stack.
Error:
    The stack is empty.
Return:
    True on success, false if the stack is empty.
">
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_PopArray" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to store the array in.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Pops an array of cells from a stack.
Error:
    The stack is empty.
">
                <Param name="any[] buffer"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_PopString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to store string.
    maxlength               Maximum size of the buffer.
                            @oaram written      Number of characters written to buffer, not including
                            the null terminator.
Notes:
    Pops a string value from a stack.
Error:
    The stack is empty.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int &amp;written = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_Push" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   Value to push.
Notes:
    Pushes a value onto the end of the stack, adding a new index.
    This may safely be used even if the stack has a blocksize
    greater than 1.
">
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_PushArray" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    stack                   Stack Handle.
    values                  Block of values to copy.
    size                    If not set, the number of elements copied from the array
                            will be equal to the blocksize.  If set higher than the
                            blocksize, the operation will be truncated.
Notes:
    Pushes a copy of an array of cells onto the end of a stack. The cells
    are pushed as a block (i.e. the entire array takes up one stack slot),
    rather than pushing each cell individually.
">
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_M_PushString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   String to push.
Notes:
    Pushes a copy of a string onto the end of a stack, truncating it if it
    is too big.
">
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_P_BlockSize" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieve the blocksize the stack was created with.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ArrayStack_Handle_P_Empty" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ArrayStack_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns true if the stack is empty, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadAngle" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    numBits                 Optional number of bits to use.
Notes:
    Reads a bit angle from a readable bitbuffer (bf_read).
Return:
    Angle read.
">
                <Param name="int numBits=8"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadAngles" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    angles                  Destination angle vector.
Notes:
    Reads a 3D angle vector from a readable bitbuffer (bf_read).
">
                <Param name="float angles[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadBool" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a single bit from a readable bitbuffer (bf_read).
Return:
    Bit value read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadByte" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a byte from a readable bitbuffer (bf_read).
Return:
    Byte value read (read as 8bit).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadChar" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a character from a readable bitbuffer (bf_read).
Return:
    Character value read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadCoord" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a coordinate from a readable bitbuffer (bf_read).
Return:
    Coordinate read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadEntity" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads an entity from a readable bitbuffer (bf_read).
Return:
    Entity index read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a floating point number from a readable bitbuffer (bf_read).
Return:
    Floating point value read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadNum" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a normal integer to a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 32bit).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadShort" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a 16bit integer from a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 16bit).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    line                    If true the buffer will be copied until it reaches a &apos;\n&apos; or a null terminator.
Notes:
    Reads a string from a readable bitbuffer (bf_read).
Return:
    Number of bytes written to the buffer.  If the bitbuffer stream overflowed,
    that is, had no terminator before the end of the stream, then a negative
    number will be returned equal to the number of characters written to the
    buffer minus 1.  The buffer will be null terminated regardless of the
    return value.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="bool line=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadVecCoord" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    coord                   Destination coordinate array.
Notes:
    Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).
">
                <Param name="float coord[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadVecNormal" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    vec                     Destination vector array.
Notes:
    Reads a 3D normal vector from a readable bitbuffer (bf_read).
">
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_M_ReadWord" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    bf                      bf_read handle to read from.
Notes:
    Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).
Return:
    Integer value read (read as 16bit).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfRead_Handle_P_BytesLeft" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfRead_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the number of bytes left in a readable bitbuffer (bf_read).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteAngle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    angle                   Angle to write.
    numBits                 Optional number of bits to use.
Notes:
    Writes a bit angle to a writable bitbuffer (bf_write).
">
                <Param name="float angle"/>
                <Param name="int numBits=8"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteAngles" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    angles                  Angle vector to write.
Notes:
    Writes a 3D angle vector to a writable bitbuffer (bf_write).
">
                <Param name="float angles[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteBool" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    bit                     Bit to write (true for 1, false for 0).
Notes:
    Writes a single bit to a writable bitbuffer (bf_write).
">
                <Param name="bool bit"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteByte" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    byte                    Byte to write (value will be written as 8bit).
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
">
                <Param name="int byte"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteChar" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    chr                     Character to write.
Notes:
    Writes a byte to a writable bitbuffer (bf_write).
">
                <Param name="int chr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteCoord" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    coord                   Coordinate to write.
Notes:
    Writes a coordinate to a writable bitbuffer (bf_write).
">
                <Param name="float coord"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteEntity" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    ent                     Entity index to write.
Notes:
    Writes an entity to a writable bitbuffer (bf_write).
">
                <Param name="int ent"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    num                     Number to write.
Notes:
    Writes a floating point number to a writable bitbuffer (bf_write).
">
                <Param name="float num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteNum" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    num                     Integer to write (value will be written as 32bit).
Notes:
    Writes a normal integer to a writable bitbuffer (bf_write).
">
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteShort" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    num                     Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit integer to a writable bitbuffer (bf_write).
">
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    string                  Text string to write.
Notes:
    Writes a string to a writable bitbuffer (bf_write).
">
                <Param name="const char[] string"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteVecCoord" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    coord                   Coordinate array to write.
Notes:
    Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).
">
                <Param name="float coord[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteVecNormal" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    vec                     Vector to write.
Notes:
    Writes a 3D normal vector to a writable bitbuffer (bf_write).
">
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_BfWrite_Handle_M_WriteWord" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_BfWrite_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    num                     Integer to write (value will be written as 16bit).
Notes:
    Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).
">
                <Param name="int num"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_C_CommandIterator" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a new CommandIterator. Must be freed with delete or
    CloseHandle().
    The CommandIterator can be used to iterate commands created by
    SourceMod plugins and allows inspection of properties associated
    with the command.
Return:
    New CommandIterator Handle.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_M_GetDescription" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to copy to.
    maxlen                  Maximum size of the buffer.
Notes:
    Retrieves the command&apos;s description.
Error:
    Invalid iterator position.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_M_GetName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to copy to.
    maxlen                  Maximum size of the buffer.
Notes:
    Retrieves the command&apos;s name.
Error:
    Invalid iterator position.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_M_Next" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Determines if there is a next command. If one is found, the
    iterator is advanced to it.
Return:
    true if found and iterator is advanced.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_P_Flags" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieves the command&apos;s default flags
Error:
    Invalid iterator position.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_CommandIterator_Handle_P_Plugin" func="yes">
            <Overload retVal="property Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_CommandIterator_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieves the plugin handle of the command&apos;s creator
Error:
    Invalid iterator position.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_AddChangeHook" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    callback                An OnConVarChanged function pointer.
Notes:
    Creates a hook for when a console variable&apos;s value is changed.
">
                <Param name="ConVarChanged callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_GetBounds" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    type                    Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper.
    value                   By-reference cell to store the specified floating point bound value.
Notes:
    Retrieves the specified bound of a console variable.
Return:
    True if the convar has the specified bound set, false otherwise.
">
                <Param name="ConVarBounds type"/>
                <Param name="float &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_GetDefault" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   Buffer to store the default value of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the default string value of a console variable.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_GetName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Buffer to store the name of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a console variable.
">
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_GetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    convar                  Handle to the convar.
    value                   Buffer to store the value of the convar.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the string value of a console variable.
">
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_RemoveChangeHook" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    convar                  Handle to the convar.
    callback                An OnConVarChanged function pointer.
Notes:
    Removes a hook for when a console variable&apos;s value is changed.
Error:
    No active hook on convar.
">
                <Param name="ConVarChanged callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_ReplicateToClient" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index
    value                   String value to send
Notes:
    Replicates a convar value to a specific client. This does not change the actual convar value.
Error:
    Invalid client index, client not in game, or client is fake
Return:
    True on success, false on failure
">
                <Param name="int client"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_RestoreDefault" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Resets the console variable to its default value.
    Note: The replicate and notify params are only relevant for the
    original, Dark Messiah, and Episode 1 engines. Newer engines
    automatically do these things when the convar value is changed.
">
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_SetBool" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   New boolean value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the boolean value of a console variable.
    Note: The replicate and notify params are only relevant for the
    original, Dark Messiah, and Episode 1 engines. Newer engines
    automatically do these things when the convar value is changed.
">
                <Param name="bool value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_SetBounds" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    type                    Type of bound to set, ConVarBound_Lower or ConVarBound_Upper
    set                     If set to true, convar will use specified bound. If false, bound will be removed.
    value                   Floating point value to use as the specified bound.
Notes:
    Sets the specified bound of a console variable.
">
                <Param name="ConVarBounds type"/>
                <Param name="bool set"/>
                <Param name="float value=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_SetFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   New floating point value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the floating point value of a console variable.
    Note: The replicate and notify params are only relevant for the
    original, Dark Messiah, and Episode 1 engines. Newer engines
    automatically do these things when the convar value is changed.
">
                <Param name="float value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_SetInt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   New integer value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the integer value of a console variable.
    Note: The replicate and notify params are only relevant for the
    original, Dark Messiah, and Episode 1 engines. Newer engines
    automatically do these things when the convar value is changed.
">
                <Param name="int value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_M_SetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    value                   New string value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the string value of a console variable.
    Note: The replicate and notify params are only relevant for the
    original, Dark Messiah, and Episode 1 engines. Newer engines
    automatically do these things when the convar value is changed.
">
                <Param name="const char[] value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_P_BoolValue" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Retrieves or sets a boolean value for the convar.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_P_Flags" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Gets or sets the flag bits (FCVAR_*) on the convar.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_P_FloatValue" func="yes">
            <Overload retVal="property float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Retrieves or sets a float value for the convar.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_ConVar_Handle_P_IntValue" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_ConVar_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Retrieves or sets an integer value for the convar.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_C_Cookie" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Name of the new preference cookie.
    description             Optional description of the preference cookie.
    access                  What CookieAccess level to assign to this cookie.
Notes:
    Creates a new Client preference cookie.
    Handles returned can be closed via CloseHandle() when
    no longer needed.
Error:
    Cookie name is blank.
Return:
    A handle to the newly created cookie. If the cookie already
    exists, a handle to it will still be returned.
">
                <Param name="const char[] name"/>
                <Param name="const char[] description"/>
                <Param name="CookieAccess access"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_M_Get" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
    buffer                  Copyback buffer for value.
    maxlen                  Maximum length of the buffer.
Notes:
    Retrieve the value of a Client preference cookie.
Error:
    Invalid cookie handle or invalid client index.
">
                <Param name="int client"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_M_GetClientTime" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
Notes:
    Returns the last updated timestamp for a client cookie
Return:
    Last updated timestamp.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_M_Set" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
    value                   String value to set.
Notes:
    Set the value of a Client preference cookie.
Error:
    Invalid cookie handle or invalid client index.
">
                <Param name="int client"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_M_SetByAuthId" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    authID                  String Auth/STEAM ID of player to set.
    value                   String value to set.
Notes:
    Sets the value of a Client preference cookie based on an authID string.
Error:
    Invalid cookie handle.
">
                <Param name="const char[] authID"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_M_SetPrefabMenu" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    type                    A CookieMenu prefab menu type.
    display                 Text to show on the menu.
    handler                 Optional handler callback for translations and output on selection
    info                    Info data to pass to the callback.
Notes:
    Add a new prefab item to the client cookie settings menu.
    Note: This handles everything automatically and does not require a callback
Error:
    Invalid cookie handle.
">
                <Param name="CookieMenu type"/>
                <Param name="const char[] display"/>
                <Param name="CookieMenuHandler handler=INVALID_FUNCTION"/>
                <Param name="any info=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Cookie_Handle_P_AccessLevel" func="yes">
            <Overload retVal="property CookieAccess" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Cookie_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the access level of a cookie
Error:
    Invalid cookie handle.
Return:
    CookieAccess access level.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBDriver_Handle_M_GetIdentifier" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBDriver_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    ident                   Identification string buffer.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves a driver&apos;s identification string.
    Example: &apos;mysql&apos;, &apos;sqlite&apos;
">
                <Param name="char[] ident"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBDriver_Handle_M_GetProduct" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBDriver_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    product                 Product string buffer.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves a driver&apos;s product string.
    Example: &apos;MySQL&apos;, &apos;SQLite&apos;
">
                <Param name="char[] product"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   The field index (starting from 0).
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches a float from a field in the current row of a result set.
    If the result is NULL, a value of 0.0 will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid field index, invalid type conversion requested
    from the database, or no current result set.
Return:
    A float value.
">
                <Param name="int field"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchInt" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   The field index (starting from 0).
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches an integer from a field in the current row of a result set.
    If the result is NULL, a value of 0 will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid field index, invalid type conversion requested
    from the database, or no current result set.
Return:
    An integer value.
">
                <Param name="int field"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchMoreResults" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Advances to the next set of results.
    In some SQL implementations, multiple result sets can exist on one query.
    This is possible in MySQL with simple queries when executing a CALL
    query.  If this is the case, all result sets must be processed before
    another query is made.
Return:
    True if there was another result set, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchRow" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Fetches a row from the current result set.  This must be
    successfully called before any results are fetched.
    If this function fails, _MoreResults can be used to
    tell if there was an error or the result set is finished.
Return:
    True if a row was fetched, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchSize" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   The field index (starting from 0).
Notes:
    Returns the length of a field&apos;s data in the current row of a result
    set.  This only needs to be called for strings to determine how many
    bytes to use.  Note that the return value does not include the null
    terminator.
Error:
    Invalid field index or no current result set.
Return:
    Number of bytes for the field&apos;s data size.
">
                <Param name="int field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FetchString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   The field index (starting from 0).
    buffer                  String buffer.
    maxlength               Maximum size of the string buffer.
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches a string from a field in the current row of a result set.
    If the result is NULL, an empty string will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid field index, invalid type conversion requested
    from the database, or no current result set.
Return:
    Number of bytes written.
">
                <Param name="int field"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FieldNameToNum" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Name of the field (case sensitive).
    field                   Variable to store field index in.
Notes:
    Retrieves a field index by name.
Error:
    No current result set.
Return:
    True if found, false if not found.
">
                <Param name="const char[] name"/>
                <Param name="int &amp;field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_FieldNumToName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field number (starting from 0).
    name                    Name buffer.
    maxlength               Maximum length of the name buffer.
Notes:
    Retrieves the name of a field by index.
Error:
    Invalid field index, or no current result set.
">
                <Param name="int field"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_IsFieldNull" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   The field index (starting from 0).
Notes:
    Returns whether a field&apos;s data in the current row of a result set is
    NULL or not.  NULL is an SQL type which means &apos;no data.&apos;
Error:
    Invalid field index, or no current result set.
Return:
    True if data is NULL, false otherwise.
">
                <Param name="int field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_M_Rewind" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Rewinds a result set back to the first result.
Error:
    No current result set.
Return:
    True on success, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_AffectedRows" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the number of affected rows from the query that generated this
    result set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_FieldCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieves the number of fields in the last result set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_HasResults" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns whether or not a result set exists.  This will
    return true even if 0 results were returned, but false
    on queries like UPDATE, INSERT, or DELETE.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_InsertId" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the insert id from the query that generated this result set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_MoreRows" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns if there are more rows.
Return:
    True if there are more rows, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBResultSet_Handle_P_RowCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBResultSet_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Params:
    query                   A query (or statement) Handle.
Notes:
    Retrieves the number of rows in the last result set.
Return:
    Number of rows in the current result set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBStatement_Handle_M_BindFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBStatement_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    param                   The parameter index (starting from 0).
    value                   The float number to bind.
Notes:
    Binds a parameter in a prepared statement to a given float value.
Error:
    Invalid parameter index, or SQL error.
">
                <Param name="int param"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBStatement_Handle_M_BindInt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBStatement_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    param                   The parameter index (starting from 0).
    number                  The number to bind.
    signed                  True to bind the number as signed, false to
                            bind it as unsigned.
Notes:
    Binds a parameter in a prepared statement to a given integer value.
Error:
    Invalid parameter index, or SQL error.
">
                <Param name="int param"/>
                <Param name="int number"/>
                <Param name="bool signed=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DBStatement_Handle_M_BindString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DBStatement_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    param                   The parameter index (starting from 0).
    value                   The string to bind.
    copy                    Whether or not SourceMod should copy the value
                            locally if necessary.  If the string contents
                            won&apos;t change before calling SQL_Execute(), this
                            can be set to false for optimization.
Notes:
    Binds a parameter in a prepared statement to a given string value.
Error:
    Invalid parameter index, or SQL error.
">
                <Param name="int param"/>
                <Param name="const char[] value"/>
                <Param name="bool copy"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_C_DataPack" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a new data pack.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_IsReadable" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    unused                  Unused variable. Exists for backwards compatability.
Notes:
    Returns whether or not a specified number of bytes from the data pack
    position to the end can be read.
">
                <Param name="int unused = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_ReadCell" func="yes">
            <Overload retVal="public native any" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a cell from a data pack.
Return:
    A cell at this position
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_ReadFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a float from a data pack.
Return:
    Float at this position
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_ReadFunction" func="yes">
            <Overload retVal="public native function" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Reads a function pointer from a data pack.
Return:
    Function pointer.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_ReadString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Reads a string from a data pack.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_Reset" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    clear                   If true, clears the contained data.
Notes:
    Resets the position in a data pack.
">
                <Param name="bool clear=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_WriteCell" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    cell                    Cell to add.
    insert                  Determines whether mid-pack writes will insert instead of overwrite.
Notes:
    Packs a normal cell into a data pack.
">
                <Param name="any cell"/>
                <Param name="bool insert = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_WriteFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    val                     Float to add.
    insert                  Determines whether mid-pack writes will insert instead of overwrite.
Notes:
    Packs a float into a data pack.
">
                <Param name="float val"/>
                <Param name="bool insert = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_WriteFunction" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    fktptr                  Function pointer to add.
    insert                  Determines whether mid-pack writes will insert instead of overwrite.
Notes:
    Packs a function pointer into a data pack.
">
                <Param name="Function fktptr"/>
                <Param name="bool insert = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_M_WriteString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    str                     String to add.
    insert                  Determines whether mid-pack writes will insert instead of overwrite.
Notes:
    Packs a string into a data pack.
">
                <Param name="const char[] str"/>
                <Param name="bool insert = false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DataPack_Handle_P_Position" func="yes">
            <Overload retVal="property DataPackPos" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DataPack_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    The read or write position in a data pack.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_Escape" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    string                  String to quote.
    buffer                  Buffer to store quoted string in.
    maxlength               Maximum length of the buffer.
    written                 Optionally returns the number of bytes written.
Notes:
    Escapes a database string for literal insertion.  This is not needed
    for binding strings in prepared statements.
    Generally, database strings are inserted into queries enclosed in
    single quotes (&apos;).  If user input has a single quote in it, the
    quote needs to be escaped.  This function ensures that any unsafe
    characters are safely escaped according to the database engine and
    the database&apos;s character set.
    NOTE: SourceMod only guarantees properly escaped strings when the query
    encloses the string in &apos;&apos;. While drivers tend to allow &apos; instead, the string
    may be not be escaped (for example, on SQLite)!
Return:
    True on success, false if buffer is not big enough.
    The buffer must be at least 2*strlen(string)+1.
">
                <Param name="const char[] string"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int &amp;written=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_Execute" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    txn                     A transaction handle.
    onSuccess               An optional callback to receive a successful transaction.
    onError                 An optional callback to receive an error message.
    data                    An optional value to pass to callbacks.
    prio                    Priority queue to use.
Notes:
    Sends a transaction to the database thread. The transaction handle is
    automatically closed. When the transaction completes, the optional
    callback is invoked.
">
                <Param name="Transaction txn"/>
                <Param name="SQLTxnSuccess onSuccess = INVALID_FUNCTION"/>
                <Param name="SQLTxnFailure onError = INVALID_FUNCTION"/>
                <Param name="any data = 0"/>
                <Param name="DBPriority priority = DBPrio_Normal"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_Format" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
    All format specifiers are escaped (see SQL_EscapeString) unless the &apos;!&apos; flag is used.
Return:
    Number of cells written.
">
                <Param name="const char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_IsSameConnection" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Returns whether a database is the same connection as another database.
">
                <Param name="Database other"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_Query" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    callback                Callback.
    query                   Query string.
    data                    Extra data value to pass to the callback.
    prio                    Priority queue to use.
Notes:
    Executes a query via a thread. The result handle is passed through the
    callback.
    The database handle returned through the callback is always a new Handle,
    and if necessary, IsSameConnection() should be used to test against other
    connections.
    The result handle returned through the callback is temporary and destroyed
    at the end of the callback.
">
                <Param name="SQLQueryCallback callback"/>
                <Param name="const char[] query"/>
                <Param name="any data = 0"/>
                <Param name="DBPriority prio = DBPrio_Normal"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_M_SetCharset" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    characterset            The character set string to change to.
Notes:
    Sets the character set of the connection.
    Like SET NAMES .. in mysql, but stays after connection problems.
    Example: &apos;utf8&apos;, &apos;latin1&apos;
Return:
    True, if character set was changed, false otherwise.
">
                <Param name="const char[] charset"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Database_Handle_P_Driver" func="yes">
            <Overload retVal="property DBDriver" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Database_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the driver for this database connection.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_DirectoryListing_Handle_M_GetNext" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_DirectoryListing_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  String buffer to hold directory name.
    maxlength               Maximum size of string buffer.
    type                    Optional variable to store the file type.
Notes:
    Reads the current directory entry as a local filename, then moves to the
    next file.
    Note: Both the &apos;.&apos; and &apos;..&apos; automatic directory entries will be retrieved.
Return:
    True on success, false if there are no more files to read.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="FileType &amp;type=FileType_Unknown"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_Cancel" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Cancels a previously created game event that has not been fired. This
    is necessary to avoid leaking memory when an event isn&apos;t fired.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_Fire" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    dontBroadcast           Optional boolean that determines if event should be broadcast to clients.
Notes:
    Fires a game event.
    This function closes the event Handle after completing.
">
                <Param name="bool dontBroadcast=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_FireToClient" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Index of client to receive the event..
Notes:
    Fires a game event to only the specified client.
    Unlike Fire, this function DOES NOT close the event Handle.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_GetBool" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the boolean value of a game event&apos;s key.
Return:
    The boolean value of the specified event key.
">
                <Param name="const char[] key"/>
                <Param name="bool defValue=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_GetFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the floating point value of a game event&apos;s key.
Return:
    The floating point value of the specified event key.
">
                <Param name="const char[] key"/>
                <Param name="float defValue=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_GetInt" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    defValue                Optional default value to use if the key is not found.
Notes:
    Returns the integer value of a game event&apos;s key.
Return:
    The integer value of the specified event key.
">
                <Param name="const char[] key"/>
                <Param name="int defValue=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_GetName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Buffer to store the name of the event.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the name of a game event.
">
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_GetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    value                   Buffer to store the value of the specified event key.
    maxlength               Maximum length of string buffer.
    defValue                Optional default value to use if the key is not found.
Notes:
    Retrieves the string value of a game event&apos;s key.
">
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
                <Param name="const char[] defvalue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_SetBool" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    value                   New boolean value.
Notes:
    Sets the boolean value of a game event&apos;s key.
">
                <Param name="const char[] key"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_SetFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    value                   New floating point value.
Notes:
    Sets the floating point value of a game event&apos;s key.
">
                <Param name="const char[] key"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_SetInt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    value                   New integer value.
Notes:
    Sets the integer value of a game event&apos;s key.
    Integer value refers to anything that can be reduced to an integer.
    The various size specifiers, such as &apos;byte&apos; and &apos;short&apos; are still
    integers, and only refer to how much data will actually be sent
    over the network (if applicable).
">
                <Param name="const char[] key"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_M_SetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of event key.
    value                   New string value.
Notes:
    Sets the string value of a game event&apos;s key.
">
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Event_Handle_P_BroadcastDisabled" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Event_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Sets whether an event&apos;s broadcasting will be disabled or not.
    This has no effect on events Handles that are not from HookEvent
    or HookEventEx callbacks.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_Close" func="yes">
            <Overload retVal="public void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Close the file handle. This is the same as using CloseHandle() or delete.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_EndOfFile" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Tests if the end of file has been reached.
Return:
    True if end of file has been reached, false otherwise.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_Flush" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Flushes a file&apos;s buffered output; any buffered output
    is immediately written to the file.
Return:
    True on success or use_valve_fs specified with OpenFile,
    otherwise false on failure.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_Read" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    items                   Array to store each item read.
    num_items               Number of items to read into the array.
    size                    Size of each element, in bytes, to be read.
                            Valid sizes are 1, 2, or 4.
Notes:
    Reads binary data from a file.
Return:
    Number of elements read, or -1 on error.
">
                <Param name="int[] items"/>
                <Param name="int num_items"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadInt16" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Variable to store the data read.
Notes:
    Reads a single int16 (short) from a file. The value is sign-extended to
    an int32.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadInt32" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Variable to store the data read.
Notes:
    Reads a single int32 (int/cell) from a file.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadInt8" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Variable to store the data read.
Notes:
    Reads a single int8 (byte) from a file. The returned value is sign-
    extended to an int32.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadLine" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  String buffer to hold the line.
    maxlength               Maximum size of string buffer.
Notes:
    Reads a line of text from a file.
Return:
    True on success, false otherwise.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to store the string.
    max_size                Maximum size of the string buffer.
    read_count              If -1, reads until a null terminator is encountered in
                            the file.  Otherwise, read_count bytes are read
                            into the buffer provided.  In this case the buffer
                            is not explicitly null terminated, and the buffer
                            will contain any null terminators read from the file.
Notes:
    Reads a UTF8 or ANSI string from a file.
Error:
    read_count &gt; max_size.
Return:
    Number of characters written to the buffer, or -1
    if an error was encountered.
">
                <Param name="char[] buffer"/>
                <Param name="int max_size"/>
                <Param name="int read_count=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadUint16" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Variable to store the data read.
Notes:
    Reads a single unt16 (unsigned short) from a file. The value is zero-
    extended to an int32.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_ReadUint8" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Variable to store the data read.
Notes:
    Reads a single uint8 (unsigned byte) from a file. The returned value is
    zero-extended to an int32.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_Seek" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    position                Position relative to what is specified in whence.
    where                   SEEK_ constant value of where to see from.
Notes:
    Sets the file position indicator.
Return:
    True on success, false otherwise.
">
                <Param name="int position"/>
                <Param name="int where"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_Write" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    items                   Array of items to write.  The data is read directly.
                            That is, in 1 or 2-byte mode, the lower byte(s) in
                            each cell are used directly, rather than performing
                            any casts from a 4-byte number to a smaller number.
    num_items               Number of items in the array.
    size                    Size of each item in the array in bytes.
                            Valid sizes are 1, 2, or 4.
Notes:
    Writes binary data to a file.
Return:
    True on success, false on error.
">
                <Param name="const int[] items"/>
                <Param name="int num_items"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_WriteInt16" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Data to write (truncated to an int16).
Notes:
    Writes a single int16 (short) to a file.
Return:
    True on success, false on failure.
">
                <Param name="int data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_WriteInt32" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Data to write.
Notes:
    Writes a single int32 (int/cell) to a file.
Return:
    True on success, false on failure.
">
                <Param name="int data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_WriteInt8" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    data                    Data to write (truncated to an int8).
Notes:
    Writes a single int8 (byte) to a file.
Return:
    True on success, false on failure.
">
                <Param name="int data"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_WriteLine" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    hndl                    Handle to the file.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Writes a line of text to a text file.  A newline is automatically appended.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_M_WriteString" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  String to write.
    term                    True to append NUL terminator, false otherwise.
Notes:
    Writes a binary string to a file.
Return:
    True on success, false on error.
">
                <Param name="const char[] buffer"/>
                <Param name="bool term"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_File_Handle_P_Position" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_File_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Get the current position in the file; returns -1 on failure.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_C_FrameIterator" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a stack frame iterator to build your own stack traces.
Return:
    New handle to a FrameIterator.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_M_GetFilePath" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to copy to.
    maxlen                  Max size of the buffer.
Notes:
    Gets the file path to the current call in the call stack.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_M_GetFunctionName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to copy to.
    maxlen                  Max size of the buffer.
Notes:
    Gets the name of the current function in the call stack.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_M_Next" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Advances the iterator to the next stack frame.
Error:
    No next element exception.
Return:
    True if another frame was fetched and data can be successfully read.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_M_Reset" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Resets the iterator back to it&apos;s starting position.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_FrameIterator_Handle_P_LineNumber" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_FrameIterator_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the line number of the current function call.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GameData_Handle_C_GameData" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GameData_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    file                    File to load.  The path must be relative to the &apos;gamedata&apos; folder under the config folder
                            and the extension should be omitted.
Notes:
    Loads a game config file.
Return:
    A handle to the game config file or null on failure.
">
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GameData_Handle_M_GetAddress" func="yes">
            <Overload retVal="public native Address" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GameData_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Name of the property to find.
Notes:
    Finds an address calculation in a GameConfig file,
    performs LoadFromAddress on it as appropriate, then returns the final address.
Return:
    An address calculated on success, or 0 on failure.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GameData_Handle_M_GetKeyValue" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GameData_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key to retrieve from the Keys section.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Gets the value of a key from the &apos;Keys&apos; section.
Return:
    True if key existed, false otherwise.
">
                <Param name="const char[] key"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GameData_Handle_M_GetOffset" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GameData_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key to retrieve from the offset section.
Notes:
    Returns an offset value.
Return:
    An offset, or -1 on failure.
">
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GlobalForward_Handle_C_GlobalForward" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GlobalForward_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Name of public function to use in forward.
    type                    Execution type to be used.
    ...                     Variable number of parameter types (up to 32).
Notes:
    Creates a global forward.
    The name used to create the forward is used as its public function in all target plugins.
    This is ideal for global, static forwards that are never changed.
    Global forwards cannot be cloned.
    Use CloseHandle() to destroy these.
Error:
    More than 32 paramater types passed.
Return:
    Handle to new global forward.
">
                <Param name="const char[] name"/>
                <Param name="ExecType type"/>
                <Param name="ParamType ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GlobalForward_Handle_P_FunctionCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GlobalForward_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the number of functions in a global or private forward&apos;s call list.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_AddCommandOverride" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    String containing command name (case sensitive).
    type                    Override type (specific command or group).
    rule                    Override allow/deny setting.
Notes:
    Adds a group-specific override type.
">
                <Param name="const char[] name"/>
                <Param name="OverrideType type"/>
                <Param name="OverrideRule rule"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_AddGroupImmunity" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    other                   Group id to receive immunity to.
Notes:
    Adds immunity to a specific group.
">
                <Param name="GroupId other"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_GetCommandOverride" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    String containing command name (case sensitive).
    type                    Override type (specific command or group).
    rule                    Optional pointer to store allow/deny setting.
Notes:
    Retrieves a group-specific command override.
Return:
    True if an override exists, false otherwise.
">
                <Param name="const char[] name"/>
                <Param name="OverrideType type"/>
                <Param name="OverrideRule &amp;rule"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_GetFlags" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Returns the flag set that is added to users from this group.
Return:
    Bitstring containing the flags enabled.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_GetGroupImmunity" func="yes">
            <Overload retVal="public native GroupId" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    number                  Index from 0 to N-1, from GroupImmunitiesCount.
Notes:
    Returns a group that this group is immune to given an index.
Return:
    GroupId that this group is immune to, or INVALID_GROUP_ID on failure.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_HasFlag" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    flag                    Admin flag to retrieve.
Notes:
    Gets whether or not a flag is enabled on a group&apos;s flag set.
Return:
    True if enabled, false otherwise,
">
                <Param name="AdminFlag flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_M_SetFlag" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    flag                    Admin flag to toggle.
    enabled                 True to set the flag, false to unset/disable.
Notes:
    Adds or removes a flag from a group&apos;s flag set.
">
                <Param name="AdminFlag flag"/>
                <Param name="bool enabled"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_P_GroupImmunitiesCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Number of specific group immunities
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_GroupId_P_ImmunityLevel" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_GroupId_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Immunity level used for targetting.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_C_KeyValues" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Name of the root section.
    firstKey                If non-empty, specifies the first key value.
    firstValue              If firstKey is non-empty, specifies the first key&apos;s value.
Notes:
    Creates a new KeyValues structure.  The Handle must be closed with
    CloseHandle() or delete.
">
                <Param name="const char[] name"/>
                <Param name="const char[] firstKey=&apos;&apos;"/>
                <Param name="const char[] firstValue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_DeleteKey" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key.
Notes:
    Removes the given key from the current position.
Return:
    True on success, false if key did not exist.
">
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_DeleteThis" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    kv                      KeyValues Handle.
Notes:
    Removes the current sub-key and attempts to set the position
    to the sub-key after the removed one.  If no such sub-key exists,
    the position will be the parent key in the traversal stack.
    Given the sub-key having position &apos;N&apos; in the traversal stack, the
    removal will always take place from position &apos;N-1.&apos;
Return:
    1 if removal succeeded and there was another key.
    0 if the current node was not contained in the
    previous node, or no previous node exists.
    -1 if removal succeeded and there were no more keys,
    thus the state is as if KvGoBack() was called.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_ExportToFile" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    file                    File to dump write to.
Notes:
    Exports a KeyValues tree to a file. The tree is dumped from the current position.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_ExportToString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to write to.
    maxlength               Max length of buffer.
Notes:
    Exports a KeyValues tree to a string. The string is dumped from the current position.
Return:
    Number of bytes that can be written to buffer.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_FindKeyById" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    id                      KeyValues id.
    name                    Buffer to store the name.
    maxlength               Maximum length of the value buffer.
Notes:
    Finds a KeyValues name by id.
Return:
    True on success, false if id not found.
">
                <Param name="int id"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetColor" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    r                       Red value, set by reference.
    g                       Green value, set by reference.
    b                       Blue value, set by reference.
    a                       Alpha value, set by reference.
Notes:
    Retrieves a set of color values from a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="int &amp;r"/>
                <Param name="int &amp;g"/>
                <Param name="int &amp;b"/>
                <Param name="int &amp;a"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetColor4" func="yes">
            <Overload retVal="public void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    color                   Red, green, blue, and alpha channels.
Notes:
    Retrieves a set of color values from a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="int color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetDataType" func="yes">
            <Overload retVal="public native KvDataTypes" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key name.
Notes:
    Returns the data type at a key.
Return:
    KvDataType value of the key.
">
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a floating point value from a KeyValues key.
Return:
    Floating point value of the key.
">
                <Param name="const char[] key"/>
                <Param name="float defvalue=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetNameSymbol" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key name.
    id                      Id of the found KeyValue.
Notes:
    Finds a KeyValues id inside a KeyValues tree.
Return:
    True on success, false if key not found.
">
                <Param name="const char[] key"/>
                <Param name="int &amp;id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetNum" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves an integer value from a KeyValues key.
Return:
    Integer value of the key.
">
                <Param name="const char[] key"/>
                <Param name="int defvalue=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetSectionName" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    section                 Buffer to store the section name.
    maxlength               Maximum length of the name buffer.
Notes:
    Retrieves the current section name.
Return:
    True on success, false on failure.
">
                <Param name="char[] section"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetSectionSymbol" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    kv                      KeyValues Handle.
    id                      Id of the current section.
Notes:
    Retrieves the current section id.
Return:
    True on success, false on failure.
">
                <Param name="int &amp;id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    value                   Buffer to store key value in.
    maxlength               Maximum length of the value buffer.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a string value from a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int maxlength"/>
                <Param name="const char[] defvalue=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetUInt64" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    value                   Array to represent the large integer.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a large integer value from a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="int value[2]"/>
                <Param name="int defvalue[2]={0,0}"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GetVector" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    vec                     Destination vector to store the value in.
    defvalue                Optional default value to use if the key is not found.
Notes:
    Retrieves a vector value from a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="float vec[3]"/>
                <Param name="const float defvalue[3]={0.0, 0.0, 0.0}"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GoBack" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Jumps back to the previous position.  Returns false if there are no
    previous positions (i.e., at the root node).  This should be called
    once for each successful Jump call, in order to return to the top node.
    This function pops one node off the internal traversal stack.
Return:
    True on success, false if there is no higher node.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GotoFirstSubKey" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    keyOnly                 If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the first sub key.
    This native adds to the internal traversal stack.
Return:
    True on success, false if there was no first sub key.
">
                <Param name="bool keyOnly=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_GotoNextKey" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    keyOnly                 If false, non-keys will be traversed (values).
Notes:
    Sets the current position in the KeyValues tree to the next sub key.
    This native does NOT add to the internal traversal stack, and thus
    GoBack() is not needed for each successive call to this function.
Return:
    True on success, false if there was no next sub key.
">
                <Param name="bool keyOnly=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_Import" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    other                   Origin KeyValues Handle.
Notes:
    Imports subkeys in the given KeyValues, at the current position in that
    KeyValues, into the current position in this KeyValues. Note that this
    copies keys; it does not embed a reference to them.
">
                <Param name="KeyValues other"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_ImportFromFile" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    file                    File to read from.
Notes:
    Imports a file in KeyValues format. The file is read into the current
    position of the tree.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_ImportFromString" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  String buffer to load into the KeyValues.
    resourceName            The resource name of the KeyValues, used for error tracking purposes.
Notes:
    Converts a given string to a KeyValues tree.  The string is read into
    the current postion of the tree.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] buffer"/>
                <Param name="const char[] resourceName=&apos;StringToKeyValues&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_JumpToKey" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key.
    create                  If true, and the key does not exist, it will be created.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not and was not created.
">
                <Param name="const char[] key"/>
                <Param name="bool create=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_JumpToKeySymbol" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    id                      KeyValues id.
Notes:
    Sets the current position in the KeyValues tree to the given key.
Return:
    True if the key exists, false if it does not.
">
                <Param name="int id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_NodesInStack" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Returns the position in the jump stack; I.e. the number of calls
    required for KvGoBack to return to the root node.  If at the root node,
    0 is returned.
Return:
    Number of non-root nodes in the jump stack.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_Rewind" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    kv                      KeyValues Handle.
Notes:
    Sets the position back to the top node, emptying the entire node
    traversal history.  This can be used instead of looping KvGoBack()
    if recursive iteration is not important.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SavePosition" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    kv                      KeyValues Handle.
Notes:
    Saves the current position in the traversal stack onto the traversal
    stack.  This can be useful if you wish to use KvGotoNextKey() and
    have the previous key saved for backwards traversal.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetColor" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    r                       Red value.
    g                       Green value.
    b                       Blue value.
    a                       Alpha value.
Notes:
    Sets a set of color values of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="int r"/>
                <Param name="int g"/>
                <Param name="int b"/>
                <Param name="int a=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetColor4" func="yes">
            <Overload retVal="public void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    color                   Red, green, blue and alpha channels.
Notes:
    Sets a set of color values of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="const int color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetEscapeSequences" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    useEscapes              Whether or not to read escape sequences.
Notes:
    Sets whether or not the KeyValues parser will read escape sequences.
    For example, \n would be read as a literal newline.  This defaults
    to false for new KeyValues structures.
">
                <Param name="bool useEscapes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    value                   Floating point value.
Notes:
    Sets a floating point value of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetNum" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    value                   Value number.
Notes:
    Sets an integer value of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetSectionName" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    section                 Section name.
Notes:
    Sets the current section name.
">
                <Param name="const char[] section"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    kv                      KeyValues Handle.
    key                     Name of the key, or NULL_STRING.
    value                   String value.
Notes:
    Sets a string value of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetUInt64" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    value                   Large integer value (0=High bits, 1=Low bits)
Notes:
    Sets a large integer value of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="const int value[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_M_SetVector" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Name of the key, or NULL_STRING.
    vec                     Vector value.
Notes:
    Sets a vector value of a KeyValues key.
">
                <Param name="const char[] key"/>
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_KeyValues_Handle_P_ExportLength" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_KeyValues_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Amount of bytes written by ExportToFile &amp; ExportToString.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_C_Menu" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    handler                 Function which will receive menu actions.
    actions                 Optionally set which actions to receive.  Select,
                            Cancel, and End will always be received regardless
                            of whether they are set or not.  They are also
                            the only default actions.
Notes:
    Creates a new, empty menu using the default style.
">
                <Param name="MenuHandler handler"/>
                <Param name="MenuAction actions=MENU_ACTIONS_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_AddItem" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    info                    Item information string.
    display                 Default item display string.
    style                   Drawing style flags.  Anything other than DEFAULT or
                            DISABLED will be completely ignored when paginating.
Notes:
    Appends a new item to the end of a menu.
Error:
    Item limit reached.
Return:
    True on success, false on failure.
">
                <Param name="const char[] info"/>
                <Param name="const char[] display"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_Cancel" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Cancels a menu from displaying on all clients.  While the
    cancellation is in progress, this menu cannot be re-displayed
    to any clients.
    The menu may still exist on the client&apos;s screen after this command.
    This simply verifies that the menu is not being used anywhere.
    If any vote is in progress on a menu, it will be cancelled.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_Display" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
    time                    Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client.
Error:
    Client not in game.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_DisplayAt" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
    first_item              First item to begin drawing from.
    time                    Maximum time to leave menu on the screen.
Notes:
    Displays a menu to a client, starting from the given item.
Error:
    Client not in game.
    /
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="int first_item"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_DisplayVote" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    clients                 Array of clients to broadcast to.
    numClients              Number of clients in the array.
    time                    Maximum time to leave menu on the screen.
    flags                   Optional voting flags.
Notes:
    Broadcasts a menu to a list of clients.  The most selected item will be
    returned through MenuAction_End.  On a tie, a random item will be returned
    from a list of the tied items.
    Note that MenuAction_VoteEnd and MenuAction_VoteStart are both
    default callbacks and do not need to be enabled.
Error:
    A vote is already in progress.
Return:
    True on success, false if this menu already has a
    vote session in progress.
">
                <Param name="int[] clients"/>
                <Param name="int numClients"/>
                <Param name="int time"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_DisplayVoteToAll" func="yes">
            <Overload retVal="public bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    time                    Maximum time to leave menu on the screen.
    flags                   Optional voting flags.
Notes:
    Sends a vote menu to all clients.  See VoteMenu() for more information.
Return:
    True on success, false if this menu already has a
    vote session in progress.
">
                <Param name="int time"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_GetItem" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    position                Position, starting from 0.
    infoBuf                 Info buffer.
    infoBufLen              Maximum length of the info buffer.
    style                   By-reference variable to store drawing flags.
    dispBuf                 Display buffer.
    dispBufLen              Maximum length of the display buffer.
Notes:
    Retrieves information about a menu item.
Return:
    True on success, false if position is invalid.
">
                <Param name="int position"/>
                <Param name="char[] infoBuf"/>
                <Param name="int infoBufLen"/>
                <Param name="int &amp;style=0"/>
                <Param name="char[] dispBuf=&apos;&apos;"/>
                <Param name="int dispBufLen=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_GetTitle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    buffer                  Buffer to store title.
    maxlength               Maximum length of the buffer.
Notes:
    Returns the text of a menu&apos;s title.
Return:
    Number of bytes written.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_InsertItem" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    position                Position, starting from 0.
    info                    Item information string.
    display                 Default item display string.
    style                   Drawing style flags.  Anything other than DEFAULT or
                            DISABLED will be completely ignored when paginating.
Notes:
    Inserts an item into the menu before a certain position; the new item will
    be at the given position and all next items pushed forward.
Error:
    Invalid menu position.
Return:
    True on success, false on failure.
">
                <Param name="int position"/>
                <Param name="const char[] info"/>
                <Param name="const char[] display"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_RemoveAllItems" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Removes all items from a menu.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_RemoveItem" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    position                Position, starting from 0.
Notes:
    Removes an item from the menu.
Error:
    Invalid menu position.
Return:
    True on success, false on failure.
">
                <Param name="int position"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_SetTitle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    fmt                     Message string format
    ...                     Message string arguments.
Notes:
    Sets the menu&apos;s default title/instruction message.
">
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_M_ToPanel" func="yes">
            <Overload retVal="public native Panel" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a raw MenuPanel based off the menu&apos;s style.
    The Handle must be freed with CloseHandle().
Return:
    A new MenuPanel Handle.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_ExitBackButton" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Controls whether or not the menu has an &apos;exit back&apos; button. By default,
    menus do not have an exit back button.
    Exit Back buttons appear as &apos;Back&apos; on page 1 of paginated menus and have
    functionality defined by the user in MenuEnd_ExitBack.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_ExitButton" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Returns whether or not the menu has an exit button. By default, menus
    have an exit button.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_ItemCount" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the number of items in a menu.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_NoVoteButton" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets whether or not the menu has a &apos;no vote&apos; button in slot 1.
    By default, menus do not have a no vote button.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_OptionFlags" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Get or set the menu&apos;s option flags.
    If a certain bit is not supported, it will be stripped before being set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_Pagination" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Get or set the menu&apos;s pagination.
    If pagination is MENU_NO_PAGINATION, and the exit button flag is set,
    then the exit button flag is removed. It can be re-applied if desired.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_Selection" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the first item on the page of a currently selected menu.
    This is only valid inside a MenuAction_Select callback.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_Style" func="yes">
            <Overload retVal="property Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the menu style. The Handle is global and cannot be closed.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Menu_Handle_P_VoteResultCallback" func="yes">
            <Overload retVal="property VoteHandler" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Menu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets an advanced vote handling callback. If this callback is set,
    MenuAction_VoteEnd will not be called.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_C_Panel" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    hStyle                  MenuStyle Handle, or null to use the default style.
Notes:
    Constructor for a new Panel.
">
                <Param name="Handle hStyle = null"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_CanDrawFlags" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    style                   ITEMDRAW style flags.
Notes:
    Returns whether or not the given drawing flags are supported by
    the menu style.
Return:
    True if item is drawable, false otherwise.
">
                <Param name="int style"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_DrawItem" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    text                    Display text to use.  If not a raw line,
                            the style may automatically add color markup.
                            No numbering or newlines are needed.
    style                   ITEMDRAW style flags.
Notes:
    Draws an item on a panel.  If the item takes up a slot, the position
    is returned.
Return:
    A slot position, or 0 if item was a rawline or could not be drawn.
">
                <Param name="const char[] text"/>
                <Param name="int style=ITEMDRAW_DEFAULT"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_DrawText" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    text                    Display text to use.
Notes:
    Draws a raw line of text on a panel, without any markup other than a
    newline.
Return:
    True on success, false if raw lines are not supported.
">
                <Param name="const char[] text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_Send" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  A client to draw to.
    handler                 The MenuHandler function to catch actions with.
    time                    Time to hold the menu for.
Notes:
    Sends a panel to a client.  Unlike full menus, the handler
    function will only receive the following actions, both of
    which will have null for a menu, and the client as param1.
    MenuAction_Select (param2 will be the key pressed)
    MenuAction_Cancel (param2 will be the reason)
    Also, if the menu fails to display, no callbacks will be called.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="MenuHandler handler"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_SetKeys" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    keys                    An integer where each bit N allows key
                            N+1 to be selected.  If no keys are selectable,
                            then key 0 (bit 9) is automatically set.
Notes:
    Sets the selectable key map of a panel.  This is not supported by
    all styles (only by Radio, as of this writing).
Return:
    True if supported, false otherwise.
">
                <Param name="int keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_M_SetTitle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    text                    Text to set as the title.
    onlyIfEmpty             If true, the title will only be set if no title is set.
Notes:
    Sets the panel&apos;s title.
">
                <Param name="const char[] text"/>
                <Param name="bool onlyIfEmpty=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_P_CurrentKey" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
    Has setter
Notes:
    Returns or sets the current key position, starting at 1. This cannot be
    used to traverse backwards.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_P_Style" func="yes">
            <Overload retVal="property Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the panel&apos;s style. Style handles are global and cannot be closed.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Panel_Handle_P_TextRemaining" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Panel_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the amount of text the menu can still hold.  If this is
    limit is reached or overflowed, the text is silently truncated.
    Radio menus: Currently 511 characters (512 bytes).
    Valve menus: Currently -1 (no meaning).
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_PrivateForward_GlobalForward_C_PrivateForward" func="yes">
            <Overload retVal="public native GlobalForward" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_PrivateForward_GlobalForward_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    type                    Execution type to be used.
    ...                     Variable number of parameter types (up to 32).
Notes:
    Creates a private forward.
    No functions are automatically added. Use AddToForward() to do this.
    Private forwards can be cloned.
    Use CloseHandle() to destroy these.
Error:
    More than 32 paramater types passed.
Return:
    Handle to new private forward.
">
                <Param name="ExecType type"/>
                <Param name="ParamType ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_PrivateForward_GlobalForward_M_AddFunction" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_PrivateForward_GlobalForward_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to specify the calling plugin.
    func                    Function to add to forward.
Notes:
    Adds a function to a private forward&apos;s call list.
    Cannot be used during an incomplete call.
Error:
    Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.
Return:
    True on success, false otherwise.
">
                <Param name="Handle plugin"/>
                <Param name="Function func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_PrivateForward_GlobalForward_M_RemoveAllFunctions" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_PrivateForward_GlobalForward_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    plugin                  Handle of the plugin to remove instances of.
                            Pass INVALID_HANDLE to specify the calling plugin.
Notes:
    Removes all instances of a plugin from a private forward&apos;s call list.
    Functions will be removed automatically if their parent plugin is unloaded.
Error:
    Invalid or corrupt private forward handle or invalid or corrupt plugin handle.
Return:
    Number of functions removed from forward.
">
                <Param name="Handle plugin"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_PrivateForward_GlobalForward_M_RemoveFunction" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_PrivateForward_GlobalForward_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to specify the calling plugin.
    func                    Function to remove from forward.
Notes:
    Removes a function from a private forward&apos;s call list.
    Only removes one instance.
    Functions will be removed automatically if their parent plugin is unloaded.
Error:
    Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.
Return:
    True on success, false otherwise.
">
                <Param name="Handle plugin"/>
                <Param name="Function func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Profiler_Handle_C_Profiler" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Profiler_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a new profile object.  The Handle must be freed
    using delete or CloseHandle().
Return:
    A new Profiler Handle.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Profiler_Handle_M_Start" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Profiler_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Starts a cycle for profiling.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Profiler_Handle_M_Stop" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Profiler_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Stops a cycle for profiling.
Error:
    Profiler was never started.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Profiler_Handle_P_Time" func="yes">
            <Overload retVal="property float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Profiler_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the amount of high-precision time in seconds
    that passed during the profiler&apos;s last start/stop
    cycle.
Return:
    Time elapsed in seconds.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddAngle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    angle                   Angle value to add.
Notes:
    Add an XYZ angle to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float angle[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddBool" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Boolean value to add.
Notes:
    Add a bool to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddColor" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    color                   Color value to add.
Notes:
    Add an RGBA color to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const int color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Float value to add.
Notes:
    Add a float or double to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddInt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Integer value to add.
Notes:
    Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddInt64" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Large integer value to add (0=High bits, 1=Low bits).
Notes:
    Add an int64, uint64, sint64, fixed64, sfixed64 to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int value[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddMessage" func="yes">
            <Overload retVal="public native Protobuf" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
Notes:
    Adds an embedded protobuf message to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
Return:
    Protobuf handle to added, embedded message.
">
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   String value to add.
Notes:
    Add a string to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddVector" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    vec                     Vector value to add.
Notes:
    Add an XYZ vector to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_AddVector2D" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    vec                     Vector value to add.
Notes:
    Add an XY vector to a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float vec[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_GetRepeatedFieldCount" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
Notes:
    Gets the number of elements in a repeated field of a protobuf message.
Error:
    Non-existent field, or non-repeated field.
Return:
    Number of elements in the field.
">
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_HasField" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
Notes:
    Returns whether or not the named, non-repeated field has a value set.
Error:
    Non-existent field, or repeated field.
Return:
    True if value has been set, else false.
">
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadAngle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    buffer                  Destination angle buffer.
    index                   Index into repeated field.
Notes:
    Reads an XYZ angle value from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="float buffer[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadBool" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads a bool from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
Return:
    Boolean value read.
">
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadColor" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    buffer                  Destination color buffer.
    index                   Index into repeated field.
Notes:
    Reads an RGBA color value from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int buffer[4]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadFloat" func="yes">
            <Overload retVal="public native float" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads a float or downcasted double from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
Return:
    Float value read.
">
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadInt" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
Return:
    Integer value read.
">
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadInt64" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Array to represent the large integer (0=High bits, 1=Low bits).
    index                   Index into repeated field.
Notes:
    Reads an int64, uint64, sint64, fixed64, sfixed64 from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int value[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadMessage" func="yes">
            <Overload retVal="public native Protobuf" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
Notes:
    Retrieve a handle to an embedded protobuf message in a protobuf message.
Error:
    Non-existent field, or incorrect field type.
Return:
    Protobuf handle to embedded message.
">
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadRepeatedMessage" func="yes">
            <Overload retVal="public native Protobuf" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    index                   Index in the repeated field.
Notes:
    Retrieve a handle to an embedded protobuf message in a protobuf message
    repeated field.
Error:
    Non-existent field, or incorrect field type.
Return:
    Protobuf handle to embedded message.
">
                <Param name="const char[] field"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    index                   Index into repeated field.
Notes:
    Reads a string from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadVector" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination vector buffer.
    index                   Index into repeated field.
Notes:
    Reads an XYZ vector value from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="float buffer[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_ReadVector2D" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    buffer                  Destination vector buffer.
    index                   Index into repeated field.
Notes:
    Reads an XY vector value from a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="float buffer[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_RemoveRepeatedFieldValue" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Removes a value by index from a protobuf message repeated field.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetAngle" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    angle                   Angle value to set.
    index                   Index into repeated field.
Notes:
    Sets an XYZ angle on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float angle[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetBool" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Boolean value to set.
    index                   Index into repeated field.
Notes:
    Sets a bool on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="bool value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetColor" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    color                   Color value to set.
    index                   Index into repeated field.
Notes:
    Sets an RGBA color on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const int color[4]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetFloat" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Float value to set.
    index                   Index into repeated field.
Notes:
    Sets a float or double on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="float value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetInt" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Integer value to set.
    index                   Index into repeated field.
Notes:
    Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetInt64" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   Large integer value to set (0=High bits, 1=Low bits).
    index                   Index into repeated field.
Notes:
    Sets an int64, uint64, sint64, fixed64, sfixed64 on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="int value[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    value                   String value to set.
    index                   Index into repeated field.
Notes:
    Sets a string on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const char[] value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetVector" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    vec                     Vector value to set.
    index                   Index into repeated field.
Notes:
    Sets an XYZ vector on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float vec[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Protobuf_Handle_M_SetVector2D" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Protobuf_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    field                   Field name.
    vec                     Vector value to set.
    index                   Index into repeated field.
Notes:
    Sets an XY vector on a protobuf message.
Error:
    Non-existent field, or incorrect field type.
">
                <Param name="const char[] field"/>
                <Param name="const float vec[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_C_Regex" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    pattern                 The regular expression pattern.
    flags                   General flags for the regular expression.
    error                   Error message encountered, if applicable.
    maxLen                  Maximum string length of the error buffer.
    errcode                 Regex type error code encountered, if applicable.
Notes:
    Compile a regular expression.
">
                <Param name="const char[] pattern"/>
                <Param name="int flags = 0"/>
                <Param name="char[] error=&apos;&apos;"/>
                <Param name="int maxLen = 0"/>
                <Param name="RegexError &amp;errcode = REGEX_ERROR_NONE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_CaptureCount" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    match                   Match to get the number of captures for. Match starts at 0, and ends at MatchCount() -1
Notes:
    Returns number of captures for a match
Return:
    Number of captures in the match.
    @note Use GetSubString() and loop from 1 -&gt; captures -1 for str_id to get all captures
">
                <Param name="int match = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_GetSubString" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    str_id                  The index of the expression to get - starts at 0, and ends at captures - 1.
    buffer                  The buffer to set to the matching substring.
    maxlen                  The maximum string length of the buffer.
    match                   Match to get the captures for - starts at 0, and ends at MatchCount() -1
Notes:
    Returns a matched substring from a regex handle.
    Substring ids start at 0 and end at captures-1, where captures is the
    number returned by Regex.Match or Regex.CaptureCount.
Return:
    True if a substring was found, False on fail/error
    @note str_id = 0 is the full captured string, anything else is the capture group index.
    if Regex.Match is used match can only be 0
">
                <Param name="int str_id"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
                <Param name="int match = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_Match" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    str                     The string to check.
    ret                     Error code, if applicable.
    offset                  Offset in the string to start searching from. MatchOffset returns the offset of the match.
Notes:
    Matches a string against a pre-compiled regular expression pattern.
Return:
    Number of captures found or -1 on failure.
    @note Use the regex handle passed to this function to extract
    matches with GetSubString().
">
                <Param name="const char[] str"/>
                <Param name="RegexError &amp;ret = REGEX_ERROR_NONE"/>
                <Param name="int offset = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_MatchAll" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    str                     The string to check.
    ret                     Error code, if applicable.
Notes:
    Gets all matches from a string against a pre-compiled regular expression pattern.
Return:
    Number of matches found or -1 on failure.
    @note Use GetSubString() and loop from 0 -&gt; totalmatches - 1.
">
                <Param name="const char[] str"/>
                <Param name="RegexError &amp;ret = REGEX_ERROR_NONE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_MatchCount" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Returns number of matches
    When using Match this is always 1 or 0 (unless an error occured)
Return:
    Total number of matches found.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Regex_Handle_M_MatchOffset" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Regex_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    match                   Match to get the offset of. Match starts at 0, and ends at MatchCount() -1
Notes:
    Returns the string offset of a match.
Return:
    Offset of the match in the string.
">
                <Param name="int match = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_C_SMCParser" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Create a new SMC file format parser.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_M_GetErrorString" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    error                   The SMCParseError code.
    buffer                  A string buffer for the error (contents undefined on failure).
    buf_max                 The maximum size of the buffer.
Notes:
    Gets an error string for an SMCError code.
Return:
    The number of characters written to buffer.
">
                <Param name="SMCError error"/>
                <Param name="char[] buffer"/>
                <Param name="int buf_max"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_M_ParseFile" func="yes">
            <Overload retVal="public native SMCError" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    file                    A string containing the file path.
    line                    An optional variable to store the last line number read.
    col                     An optional variable to store the last column number read.
Notes:
    Parses an SMC file.
Return:
    An SMCParseError result.
">
                <Param name="const char[] file"/>
                <Param name="int &amp;line = 0"/>
                <Param name="int &amp;col = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnEnd" func="yes">
            <Overload retVal="property SMC_ParseEnd" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_ParseEnd events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnEnterSection" func="yes">
            <Overload retVal="property SMC_NewSection" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_NewSection events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnKeyValue" func="yes">
            <Overload retVal="property SMC_KeyValue" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_KeyValue events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnLeaveSection" func="yes">
            <Overload retVal="property SMC_EndSection" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_EndSection events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnRawLine" func="yes">
            <Overload retVal="property SMC_RawLine" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_RawLine events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_SMCParser_Handle_P_OnStart" func="yes">
            <Overload retVal="property SMC_ParseStart" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_SMCParser_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Sets the callback for receiving SMC_ParseStart events.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMapSnapshot_Handle_M_GetKey" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMapSnapshot_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Key index (starting from 0).
    buffer                  String buffer.
    maxlength               Maximum buffer length.
Notes:
    Retrieves the key string of a given key in a map snapshot.
Error:
    Index out of range.
Return:
    Number of bytes written to the buffer.
">
                <Param name="int index"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMapSnapshot_Handle_M_KeyBufferSize" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMapSnapshot_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    index                   Key index (starting from 0).
Notes:
    Returns the buffer size required to store a given key. That is, it
    returns the length of the key plus one.
Error:
    Index out of range.
Return:
    Buffer size required to store the key string.
">
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMapSnapshot_Handle_P_Length" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMapSnapshot_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Returns the number of keys in the map snapshot.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_C_StringMap" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Creates a hash map. A hash map is a container that can map strings (called
    &apos;keys&apos;) to arbitrary values (cells, arrays, or strings). Keys in a hash map
    are unique. That is, there is at most one entry in the map for a given key.
    Insertion, deletion, and lookup in a hash map are all considered to be fast
    operations, amortized to O(1), or constant time.
    The word &apos;Trie&apos; in this API is historical. As of SourceMod 1.6, tries have
    been internally replaced with hash tables, which have O(1) insertion time
    instead of O(n).
    The StringMap must be freed via delete or CloseHandle().
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_Clear" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Clears all entries from a Map.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_GetArray" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    map                     Map Handle.
    key                     Key string.
    array                   Buffer to store array.
    max_size                Maximum size of array buffer.
    size                    Optional parameter to store the number of elements written to the buffer.
Notes:
    Retrieves an array in a Map.
Return:
    True on success.  False if the key is not set, or the key is set
    as a value or string (not an array).
">
                <Param name="const char[] key"/>
                <Param name="any[] array"/>
                <Param name="int max_size"/>
                <Param name="int &amp;size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_GetString" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
    value                   Buffer to store value.
    max_size                Maximum size of string buffer.
    size                    Optional parameter to store the number of bytes written to the buffer.
Notes:
    Retrieves a string in a Map.
Return:
    True on success.  False if the key is not set, or the key is set
    as a value or array (not a string).
">
                <Param name="const char[] key"/>
                <Param name="char[] value"/>
                <Param name="int max_size"/>
                <Param name="int &amp;size=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_GetValue" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
    value                   Variable to store value.
Notes:
    Retrieves a value in a Map.
Return:
    True on success.  False if the key is not set, or the key is set
    as an array or string (not a value).
">
                <Param name="const char[] key"/>
                <Param name="any &amp;value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_Remove" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
Notes:
    Removes a key entry from a Map.
Return:
    True on success, false if the value was never set.
">
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_SetArray" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
    array                   Array to store.
    num_items               Number of items in the array.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets an array value in a Map, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
">
                <Param name="const char[] key"/>
                <Param name="const any[] array"/>
                <Param name="int num_items"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_SetString" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
    value                   String to store.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets a string value in a Map, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
">
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_SetValue" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    key                     Key string.
    value                   Value to store at this key.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets a value in a hash map, either inserting a new entry or replacing an old one.
Return:
    True on success, false on failure.
">
                <Param name="const char[] key"/>
                <Param name="any value"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_M_Snapshot" func="yes">
            <Overload retVal="public native StringMapSnapshot" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Create a snapshot of the map&apos;s keys. See StringMapSnapshot.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_StringMap_Handle_P_Size" func="yes">
            <Overload retVal="property int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_StringMap_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has getter
Notes:
    Retrieves the number of elements in a map.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_C_TopMenu" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    handler                 Handler to use for drawing the root title.
Notes:
    Creates a new TopMenu.
Return:
    A new TopMenu.
">
                <Param name="TopMenuHandler handler"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_AddCategory" func="yes">
            <Overload retVal="public native TopMenuObject" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Object name (MUST be unique).
    handler                 Handler for topobj.
    cmdname                 Command name (for access overrides).
    flags                   Default access flags.
    info_string             Arbitrary storage (max 255 bytes).
Notes:
    Adds a category to a TopMenu.
Return:
    A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure.
">
                <Param name="const char[] name"/>
                <Param name="TopMenuHandler handler"/>
                <Param name="const char[] cmdname = &apos;&apos;"/>
                <Param name="int flags = 0"/>
                <Param name="const char[] info_string = &apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_AddItem" func="yes">
            <Overload retVal="public native TopMenuObject" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Object name (MUST be unique).
    handler                 Handler for topobj.
    category                The object of the parent category for the item.
    cmdname                 Command name (for access overrides).
    flags                   Default access flags.
    info_string             Arbitrary storage (max 255 bytes).
Notes:
    Adds an item to a TopMenu category.
Return:
    A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure.
">
                <Param name="const char[] name"/>
                <Param name="TopMenuHandler handler"/>
                <Param name="TopMenuObject parent"/>
                <Param name="const char[] cmdname = &apos;&apos;"/>
                <Param name="int flags = 0"/>
                <Param name="const char[] info_string = &apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_Display" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    client                  Client index.
    position                Position to display from.
Notes:
    Displays a TopMenu to a client.
Return:
    True on success, false on failure.
">
                <Param name="int client"/>
                <Param name="TopMenuPosition position"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_DisplayCategory" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    category                Category topobj id.
    client                  Client index.
Notes:
    Displays a TopMenu category to a client.
Return:
    True on success, false on failure.
">
                <Param name="TopMenuObject category"/>
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_FindCategory" func="yes">
            <Overload retVal="public native TopMenuObject" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    name                    Object&apos;s unique name.
Notes:
    Finds a category&apos;s topobj ID in a TopMenu.
Return:
    TopMenuObject ID on success, or
    INVALID_TOPMENUOBJECT on failure.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_GetInfoString" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    parent                  TopMenuObject ID.
    buffer                  Buffer to store info string.
    maxlength               Maximum size of info string.
Notes:
    Retrieves the info string of a top menu item.
Return:
    Number of bytes written, not including the  null terminator.
">
                <Param name="TopMenuObject parent"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_GetObjName" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    topobj                  TopMenuObject ID.
    buffer                  Buffer to store info string.
    maxlength               Maximum size of info string.
Notes:
    Retrieves the name string of a top menu item.
Return:
    Number of bytes written, not including the null terminator.
">
                <Param name="TopMenuObject topobj"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_LoadConfig" func="yes">
            <Overload retVal="public native bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    topmenu                 TopMenu Handle.
    file                    File path.
    error                   Error buffer.
    maxlength               Maximum size of the error buffer. Error buffer
                            will be filled with a zero-terminated string if
                            false is returned.
Notes:
    Re-sorts the items in a TopMenu via a configuration file.
    The format of the configuration file should be a Valve Key-Values
    formatted file that SourceMod can parse.  There should be one root
    section, and one sub-section for each category.  Each sub-section&apos;s
    name should match the category name.
    Each sub-section may only contain key/value pairs in the form of:
    key: &apos;item&apos;
    value: Name of the item as passed to AddToTopMenu().
    The TopMenu will draw items in the order declared in the configuration
    file.  If items do not appear in the configuration file, they are sorted
    per-player based on how the handler function renders for that player.
    These items appear after the configuration sorted items.
Return:
    True on success, false on failure.
">
                <Param name="const char[] file"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_M_Remove" func="yes">
            <Overload retVal="public native void" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    topobj                  TopMenuObject ID.
Notes:
    Removes an topobj from a TopMenu.
    Plugins&apos; topobjs are automatically removed all TopMenus when the given
    plugin unloads or pauses.  In the case of unpausing, all items are restored.
">
                <Param name="TopMenuObject topobj"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MM_TopMenu_Handle_P_CacheTitles" func="yes">
            <Overload retVal="property bool" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_TopMenu_Handle_P_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Property methods:
    Has setter
Notes:
    Set the menu title caching behavior of the TopMenu. By default titles
    are cached to reduce overhead. If you need dynamic menu titles which
    change each time the menu is displayed to a user, set this to false.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Transaction_Handle_C_Transaction" func="yes">
            <Overload retVal="public native Handle" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Transaction_Handle_C_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Notes:
    Create a new transaction.
">
            </Overload>
        </KeyWord>
        <KeyWord name="MM_Transaction_Handle_M_AddQuery" func="yes">
            <Overload retVal="public native int" descr="
Methodmap notes:
    This string is not a real Sourcemod Function!
    To use function remove the 'MM_Transaction_Handle_M_' prefix
    Read more here: https://github.com/raziEiL/SourceMod-Npp-Docs
Params:
    query                   Query string.
    data                    Extra data value to pass to the final callback.
Notes:
    Adds a query to the transaction.
Return:
    The index of the query in the transaction&apos;s query list.
">
                <Param name="const char[] query"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MakeCompatEntRef" func="yes">
            <Overload retVal="native int" descr="
Params:
    ref                     Entity reference.
Notes:
    Converts a reference into a backwards compatible version.
Return:
    Bcompat reference.
">
                <Param name="int ref"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MakeVectorFromPoints" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pt1                     First point (to be subtracted from the second).
    pt2                     Second point.
    output                  Output vector buffer.
Notes:
    Builds a vector from two points by subtracting the points.
">
                <Param name="const float pt1[3]"/>
                <Param name="const float pt2[3]"/>
                <Param name="float output[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MarkNativeAsOptional" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Native name.
Notes:
    Sets a native as optional, such that if it is unloaded, removed,
    or otherwise non-existent, the plugin will still work.  Calling
    removed natives results in a run-time error.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MatchRegex" func="yes">
            <Overload retVal="native int" descr="
Params:
    regex                   Regex Handle from CompileRegex()
    str                     The string to check.
    ret                     Error code, if applicable.
Notes:
    Matches a string against a pre-compiled regular expression pattern.
Return:
    Number of captures found or -1 on failure.
    @note Use the regex handle passed to this function to extract
    matches with GetRegexSubString().
">
                <Param name="Handle regex"/>
                <Param name="const char[] str"/>
                <Param name="RegexError &amp;ret = REGEX_ERROR_NONE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MorePlugins" func="yes">
            <Overload retVal="native bool" descr="
Params:
    iter                    Handle to the plugin iterator.
Notes:
    Returns whether there are more plugins available in the iterator.
Error:
    Invalid Handle.
Return:
    True on more plugins, false otherwise.
">
                <Param name="Handle iter"/>
            </Overload>
        </KeyWord>
        <KeyWord name="NegateVector" func="yes">
            <Overload retVal="stock void" descr="
Params:
    vec                     Vector.
Notes:
    Negatives a vector.
">
                <Param name="float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="NominateMap" func="yes">
            <Overload retVal="native NominateResult" descr="
Params:
    map                     Map to add.
    force                   Should we force the map in even if it requires overwriting an existing nomination?
    owner                   Client index of the nominator. If the client disconnects the nomination will be removed.
                            Use 0 for constant nominations
Notes:
    Attempt to add a map to the mapchooser map list.
Return:
    Nominate Result of the outcome
">
                <Param name="const char[] map"/>
                <Param name="bool force"/>
                <Param name="int owner"/>
            </Overload>
        </KeyWord>
        <KeyWord name="NormalizeVector" func="yes">
            <Overload retVal="native float" descr="
Params:
    vec                     Vector.
    result                  Resultant vector.
Notes:
    Normalizes a vector.  The input array can be the same as the output array.
Return:
    Vector length.
">
                <Param name="const float vec[3]"/>
                <Param name="float result[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="NotifyPostAdminCheck" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
Notes:
    Signals that a player has completed post-connection admin checks.
    Has no effect if the player has already had this event signalled.
    Note: This must be sent even if no admin id was assigned.
Error:
    Invalid client index or client not in-game AND authorized.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnAdminMenuCreated" func="yes">
            <Overload retVal="forward void" descr="
Params:
    topmenu                 Handle to the admin menu&apos;s TopMenu.
Notes:
    Called when the admin menu is created and 3rd party plugins can grab
    the Handle or add categories.
">
                <Param name="Handle topmenu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnAdminMenuReady" func="yes">
            <Overload retVal="forward void" descr="
Params:
    topmenu                 Handle to the admin menu&apos;s TopMenu.
Notes:
    Called when the admin menu is ready to have items added.
">
                <Param name="Handle topmenu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnAllPluginsLoaded" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called after all plugins have been loaded.  This is called once for
    every plugin.  If a plugin late loads, it will be called immediately
    after OnPluginStart().
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnAutoConfigsBuffered" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    This is called once, right after OnMapStart() but any time before
    OnConfigsExecuted().  It is called after the &apos;exec sourcemod.cfg&apos;
    command and all AutoExecConfig() exec commands have been added to
    the ServerCommand() buffer.
    If you need to load per-map settings that override default values,
    adding commands to the ServerCommand() buffer here will guarantee
    that they&apos;re set before OnConfigsExecuted().
    Unlike OnMapStart() and OnConfigsExecuted(), this is not called on
    late loads that occur after OnMapStart().
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnBanClient" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client being banned.
    time                    Time the client is being banned for (0 = permanent).
    flags                   One if AUTHID or IP will be enabled.  If AUTO is also
                            enabled, it means Core autodetected which to use.
    reason                  Reason passed via BanClient().
    kick_message            Kick message passed via BanClient().
    command                 Command string to identify the ban source.
    source                  Source value passed via BanClient().
Notes:
    Called for calls to BanClient() with a non-empty command.
Return:
    Plugin_Handled to block the actual server banning.
    Kicking will still occur.
">
                <Param name="int client"/>
                <Param name="int time"/>
                <Param name="int flags"/>
                <Param name="const char[] reason"/>
                <Param name="const char[] kick_message"/>
                <Param name="const char[] command"/>
                <Param name="any source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnBanIdentity" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    identity                Identity string being banned (authstring or ip).
    time                    Time the client is being banned for (0 = permanent).
    flags                   Ban flags (only IP or AUTHID are valid here).
    reason                  Reason passed via BanIdentity().
    command                 Command string to identify the ban source.
    source                  Source value passed via BanIdentity().
Notes:
    Called for calls to BanIdentity() with a non-empty command.
Return:
    Plugin_Handled to block the actual server banning.
">
                <Param name="const char[] identity"/>
                <Param name="int time"/>
                <Param name="int flags"/>
                <Param name="const char[] reason"/>
                <Param name="const char[] command"/>
                <Param name="any source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientAuthorized" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
    auth                    Client Steam2 id, if available, else engine auth id.
Notes:
    Called when a client receives an auth ID.  The state of a client&apos;s
    authorization as an admin is not guaranteed here.  Use
    OnClientPostAdminCheck() if you need a client&apos;s admin status.
    This is called by bots, but the ID will be &apos;BOT&apos;.
">
                <Param name="int client"/>
                <Param name="const char[] auth"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientCommand" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    args                    Number of arguments.
Notes:
    Called when a client is sending a command.
    As of SourceMod 1.3, the client is guaranteed to be in-game.
    Use command listeners (console.inc) for more advanced hooks.
Return:
    Plugin_Handled blocks the command from being sent,
    and Plugin_Continue resumes normal functionality.
">
                <Param name="int client"/>
                <Param name="int args"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientCommandKeyValues" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    kv                      Editable KeyValues data to be sent as the command.
                            (This handle should not be stored and will be closed
                            after this forward completes.)
Notes:
    Called when a client is sending a KeyValues command.
Return:
    Plugin_Handled blocks the command from being sent,
    and Plugin_Continue resumes normal functionality.
">
                <Param name="int client"/>
                <Param name="KeyValues kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientCommandKeyValues_Post" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
    kv                      KeyValues data sent as the command.
                            (This handle should not be stored and will be closed
                            after this forward completes.)
Notes:
    Called after a client has sent a KeyValues command.
">
                <Param name="int client"/>
                <Param name="KeyValues kv"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientConnect" func="yes">
            <Overload retVal="forward bool" descr="
Params:
    client                  Client index.
    rejectmsg               Buffer to store the rejection message when the connection is refused.
    maxlen                  Maximum number of characters for rejection buffer.
Notes:
    Called on client connection.  If you return true, the client will be allowed in the server.
    If you return false (or return nothing), the client will be rejected.  If the client is
    rejected by this forward or any other, OnClientDisconnect will not be called.
    Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write
    to the string buffer, it is not defined which plugin&apos;s string will be shown to the client,
    but it is guaranteed one of them will.
Return:
    True to validate client&apos;s connection, false to refuse it.
">
                <Param name="int client"/>
                <Param name="char[] rejectmsg"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientConnected" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called once a client successfully connects.  This callback is paired with OnClientDisconnect.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientCookiesCached" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called once a client&apos;s saved cookies have been loaded from the database.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientDisconnect" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called when a client is disconnecting from the server.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientDisconnect_Post" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called when a client is disconnected from the server.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientFloodCheck" func="yes">
            <Overload retVal="forward bool" descr="
Params:
    client                  Client index.  The server (0) will never be passed.
Notes:
    Called when a client has sent chat text.  This must return either true or
    false to indicate that a client is or is not spamming the server.
    The return value is a hint only.  Core or another plugin may decide
    otherwise.
Return:
    True if client is spamming the server, false otherwise.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientFloodResult" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.  The server (0) will never be passed.
    blocked                 True if client flooded last &apos;say&apos;, false otherwise.
Notes:
    Called after a client&apos;s flood check has been computed.  This can be used
    by antiflood algorithms to decay/increase flooding weights.
    Since the result from &apos;OnClientFloodCheck&apos; isn&apos;t guaranteed to be the
    final result, it is generally a good idea to use this to play with other
    algorithms nicely.
">
                <Param name="int client"/>
                <Param name="bool blocked"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientPostAdminCheck" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called once a client is authorized and fully in-game, and
    after all post-connection authorizations have been performed.
    This callback is guaranteed to occur on all clients, and always
    after each OnClientPutInServer() call.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientPostAdminFilter" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called directly before OnClientPostAdminCheck() as a method to
    alter administrative permissions before plugins perform final
    post-connect operations.
    In general, do not use this function unless you are specifically
    attempting to change access permissions.  Use OnClientPostAdminCheck()
    instead if you simply want to perform post-connect authorization
    routines.
    See OnClientPostAdminCheck() for more information.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientPreAdminCheck" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
Notes:
    Called once a client is authorized and fully in-game, but
    before admin checks are done.  This can be used to override
    the default admin checks for a client.  You should only use
    this for overriding; use OnClientPostAdminCheck() instead
    if you want notification.
    Note: If handled/blocked, PostAdminCheck must be signalled
    manually via NotifyPostAdminCheck().
    This callback is guaranteed to occur on all clients, and always
    after each OnClientPutInServer() call.
Return:
    Plugin_Handled to block admin checks.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientPutInServer" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called when a client is entering the game.
    Whether a client has a steamid is undefined until OnClientAuthorized
    is called, which may occur either before or after OnClientPutInServer.
    Similarly, use OnClientPostAdminCheck() if you need to verify whether
    connecting players are admins.
    GetClientCount() will include clients as they are passed through this
    function, as clients are already in game at this point.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientSayCommand" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    command                 Command name.
    sArgs                   Chat argument string.
Notes:
    Global listener for the chat commands.
Return:
    An Action value. Returning Plugin_Handled bypasses the game function call.
    Returning Plugin_Stop bypasses the post hook as well as the game function.
">
                <Param name="int client"/>
                <Param name="const char[] command"/>
                <Param name="const char[] sArgs"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientSayCommand_Post" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
    command                 Command name.
    sArgs                   Chat argument string.
Notes:
    Global post listener for the chat commands.
">
                <Param name="int client"/>
                <Param name="const char[] command"/>
                <Param name="const char[] sArgs"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnClientSettingsChanged" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Client index.
Notes:
    Called whenever the client&apos;s settings are changed.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnConfigsExecuted" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the map has loaded, servercfgfile (server.cfg) has been
    executed, and all plugin configs are done executing.  This is the best
    place to initialize plugin functions which are based on cvar data.
    This will always be called once and only once per map.  It will be
    called after OnMapStart().
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnEntityCreated" func="yes">
            <Overload retVal="forward void" descr="
Params:
    entity                  Entity index
    classname               Class name
Notes:
    When an entity is created
">
                <Param name="int entity"/>
                <Param name="const char[] classname"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnEntityDestroyed" func="yes">
            <Overload retVal="forward void" descr="
Params:
    entity                  Entity index
Notes:
    When an entity is destroyed
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnFileReceive" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    sFile                   Requested file path.
Notes:
    Called when a client sends a file to the server.
Return:
    Plugin_Handled to block the transfer, Plugin_Continue to let it proceed.
">
                <Param name="int client"/>
                <Param name="const char[] sFile"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnFileSend" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    sFile                   Requested file path.
Notes:
    Called when a client requests a file from the server.
Return:
    Plugin_Handled to block the transfer, Plugin_Continue to let it proceed.
">
                <Param name="int client"/>
                <Param name="const char[] sFile"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnGameFrame" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called before every server frame.  Note that you should avoid
    doing expensive computations or declaring large local arrays.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnGetGameDescription" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    gameDesc                Game description
Notes:
    When the game description is retrieved
    Not supported on ep2v.
Return:
    Plugin_Changed if gameDesc has been edited, else no change.
">
                <Param name="char gameDesc[64]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnLevelInit" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    mapName                 Name of the map
    mapEntities             Entities of the map
Notes:
    When the level is initialized
Return:
    Plugin_Changed if mapEntities has been edited, else no change.
">
                <Param name="const char[] mapName"/>
                <Param name="char mapEntities[2097152]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnLibraryAdded" func="yes">
            <Overload retVal="forward void" descr="
Params:
    name                    Library name.
Notes:
    Called after a library is added that the current plugin references
    optionally. A library is either a plugin name or extension name, as
    exposed via its include file.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnLibraryRemoved" func="yes">
            <Overload retVal="forward void" descr="
Params:
    name                    Library name.
Notes:
    Called right before a library is removed that the current plugin references
    optionally.  A library is either a plugin name or extension name, as
    exposed via its include file.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnLogAction" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    source                  Handle to the object logging the action, or INVALID_HANDLE
                            if Core is logging the action.
    ident                   Type of object logging the action (plugin, ext, or core).
    client                  Client the action is from; 0 for server, -1 if not applicable.
    target                  Client the action is targetting, or -1 if not applicable.
    message                 Message that is being logged.
Notes:
    Called when an action is going to be logged.
Return:
    Plugin_Continue will perform the default logging behavior.
    Plugin_Handled will stop Core from logging the message.
    Plugin_Stop is the same as Handled, but prevents any other
    plugins from handling the message.
">
                <Param name="Handle source"/>
                <Param name="Identity ident"/>
                <Param name="int client"/>
                <Param name="int target"/>
                <Param name="const char[] message"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnMapEnd" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called right before a map ends.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnMapStart" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the map is loaded.
    This used to be OnServerLoad(), which is now deprecated.
    Plugins still using the old forward will work.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnMapTimeLeftChanged" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Notification that the map&apos;s time left has changed via a change in the time
    limit or a change in the game rules (such as mp_restartgame).  This is useful
    for plugins trying to create timers based on the time left in the map.
    Calling ExtendMapTimeLimit() from here, without proper precaution, will
    cause infinite recursion.
    If the operation is not supported, this will never be called.
    If the server has not yet processed any frames (i.e. no players have joined
    the map yet), then this will be called once the server begins ticking, even
    if there is no time limit set.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnMapVoteStarted" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when mapchooser starts a Map Vote.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnNominationRemoved" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when mapchooser removes a nomination from its list.
    Nominations cleared on map start will not trigger this forward
">
                <Param name="const char[] map"/>
                <Param name="int owner"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnPlayerRunCmd" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Index of the client.
    buttons                 Copyback buffer containing the current commands (as bitflags - see entity_prop_stocks.inc).
    impulse                 Copyback buffer containing the current impulse command.
    vel                     Players desired velocity.
    angles                  Players desired view angles.
    weapon                  Entity index of the new weapon if player switches weapon, 0 otherwise.
    subtype                 Weapon subtype when selected from a menu.
    cmdnum                  Command number. Increments from the first command sent.
    tickcount               Tick count. A client&apos;s prediction based on the server&apos;s GetGameTickCount value.
    seed                    Random seed. Used to determine weapon recoil, spread, and other predicted elements.
    mouse                   Mouse direction (x, y).
Notes:
    Called when a clients movement buttons are being processed
Return:
    Plugin_Handled to block the commands from being processed, Plugin_Continue otherwise.
    @note To see if all 11 params are available, use FeatureType_Capability and FEATURECAP_PLAYERRUNCMD_11PARAMS.
">
                <Param name="int client"/>
                <Param name="int &amp;buttons"/>
                <Param name="int &amp;impulse"/>
                <Param name="float vel[3]"/>
                <Param name="float angles[3]"/>
                <Param name="int &amp;weapon"/>
                <Param name="int &amp;subtype"/>
                <Param name="int &amp;cmdnum"/>
                <Param name="int &amp;tickcount"/>
                <Param name="int &amp;seed"/>
                <Param name="int mouse[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnPlayerRunCmdPost" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Index of the client.
    buttons                 The current commands (as bitflags - see entity_prop_stocks.inc).
    impulse                 The current impulse command.
    vel                     Players desired velocity.
    angles                  Players desired view angles.
    weapon                  Entity index of the new weapon if player switches weapon, 0 otherwise.
    subtype                 Weapon subtype when selected from a menu.
    cmdnum                  Command number. Increments from the first command sent.
    tickcount               Tick count. A client&apos;s prediction based on the server&apos;s GetGameTickCount value.
    seed                    Random seed. Used to determine weapon recoil, spread, and other predicted elements.
    mouse                   Mouse direction (x, y).
Notes:
    Called after a clients movement buttons were processed.
">
                <Param name="int client"/>
                <Param name="int buttons"/>
                <Param name="int impulse"/>
                <Param name="const float vel[3]"/>
                <Param name="const float angles[3]"/>
                <Param name="int weapon"/>
                <Param name="int subtype"/>
                <Param name="int cmdnum"/>
                <Param name="int tickcount"/>
                <Param name="int seed"/>
                <Param name="const int mouse[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnPluginEnd" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the plugin is about to be unloaded.
    It is not necessary to close any handles or remove hooks in this function.
    SourceMod guarantees that plugin shutdown automatically and correctly releases
    all resources.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnPluginPauseChange" func="yes">
            <Overload retVal="forward void" descr="
Params:
    pause                   True if the plugin is being paused, false otherwise.
Notes:
    Called when the plugin&apos;s pause status is changing.
">
                <Param name="bool pause"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnPluginStart" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the plugin is fully initialized and all known external references
    are resolved. This is only called once in the lifetime of the plugin, and is
    paired with OnPluginEnd().
    If any run-time error is thrown during this callback, the plugin will be marked
    as failed.
">
            </Overload>
        </KeyWord>
        <KeyWord name="OnRebuildAdminCache" func="yes">
            <Overload retVal="forward void" descr="
Params:
    part                    Part of the admin cache to rebuild.
Notes:
    Called when part of the cache needs to be rebuilt.
">
                <Param name="AdminCachePart part"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnRemoveBan" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    identity                Identity string being banned (authstring or ip).
    flags                   Ban flags (only IP or AUTHID are valid here).
    command                 Command string to identify the ban source.
    source                  Source value passed via BanIdentity().
Notes:
    Called for calls to RemoveBan() with a non-empty command.
Return:
    Plugin_Handled to block the actual unbanning.
">
                <Param name="const char[] identity"/>
                <Param name="int flags"/>
                <Param name="const char[] command"/>
                <Param name="any source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OpenDirectory" func="yes">
            <Overload retVal="native DirectoryListing" descr="
Params:
    path                    Path to open.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to find files existing in any of
                            the Valve search paths, rather than solely files
                            existing directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Opens a directory/folder for contents enumeration.
    Directories are closed with CloseHandle() or delete.
    Directories Handles can be cloned.
    OpenDirectory() supports the &apos;file://&apos; notation.
Return:
    A Handle to the directory, null on error.
">
                <Param name="const char[] path"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;GAME&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OpenFile" func="yes">
            <Overload retVal="native file" descr="
Params:
    file                    File to open.
    mode                    Open mode.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to find files existing in valve
                            search paths, rather than solely files existing directly
                            in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Opens or creates a file, returning a File handle on success. File handles
    should be closed with delete or CloseHandle().
    The open mode may be one of the following strings:
    &apos;r&apos;: Open an existing file for reading.
    &apos;w&apos;: Create a file for writing, or truncate (delete the contents of) an
    existing file and then open it for writing.
    &apos;a&apos;: Create a file for writing, or open an existing file such that writes
    will be appended to the end.
    &apos;r+&apos;: Open an existing file for both reading and writing.
    &apos;w+&apos;: Create a file for reading and writing, or truncate an existing file
    and then open it for reading and writing.
    &apos;a+&apos;: Create a file for both reading and writing, or open an existing file
    such that writes will be appended to the end.
    The open mode may also contain an additional character after &apos;r&apos;, &apos;w&apos;, or &apos;a&apos;,
    but before any &apos;+&apos; sign. This character may be &apos;b&apos; (indicating binary mode) or
    &apos;t&apos; (indicating text mode). By default, &apos;text&apos; mode is implied. On Linux and
    Mac, this has no distinction from binary mode. On Windows, it causes the &apos;\n&apos;
    character (0xA) to be written as &apos;\r\n&apos; (0xD, 0xA).
    Example: &apos;rb&apos; opens a binary file for writing; &apos;at&apos; opens a text file for
    appending.
Return:
    A File handle, or null if the file could not be opened.
">
                <Param name="const char[] file"/>
                <Param name="const char[] mode"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;GAME&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddAngle" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    angle                   Angle value to add.
Notes:
    Add an XYZ angle to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float angle[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Boolean value to add.
Notes:
    Add a bool to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    color                   Color value to add.
Notes:
    Add an RGBA color to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const int color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Float value to add.
Notes:
    Add a float or double to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Integer value to add.
Notes:
    Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddMessage" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
Notes:
    Adds an embedded protobuf message to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    protobuf handle to added, embedded message.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddString" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   String value to add.
Notes:
    Add a string to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    vec                     Vector value to add.
Notes:
    Add an XYZ vector to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbAddVector2D" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    vec                     Vector value to add.
Notes:
    Add an XY vector to a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float vec[2]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbGetRepeatedFieldCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
Notes:
    Gets the number of elements in a repeated field of a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    Number of elements in the field.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadAngle" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination angle buffer.
    index                   Index into repeated field.
Notes:
    Reads an XYZ angle value from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="float buffer[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadBool" func="yes">
            <Overload retVal="native bool" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads a bool from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    Boolean value read.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination color buffer.
    index                   Index into repeated field.
Notes:
    Reads an RGBA color value from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int buffer[4]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads a float or downcasted double from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    Float value read.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    Integer value read.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadMessage" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
Notes:
    Retrieve a handle to an embedded protobuf message in a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    protobuf handle to embedded message.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadRepeatedMessage" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    index                   Index in the repeated field.
Notes:
    Retrieve a handle to an embedded protobuf message in a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
Return:
    protobuf handle to embedded message.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadString" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    index                   Index into repeated field.
Notes:
    Reads a string from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination vector buffer.
    index                   Index into repeated field.
Notes:
    Reads an XYZ vector value from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="float buffer[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbReadVector2D" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    buffer                  Destination vector buffer.
    index                   Index into repeated field.
Notes:
    Reads an XY vector value from a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="float buffer[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbRemoveRepeatedFieldValue" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    index                   Index into repeated field.
Notes:
    Removes a value by index from a protobuf message repeated field.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetAngle" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    angle                   Angle value to set.
    index                   Index into repeated field.
Notes:
    Sets an XYZ angle on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float angle[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Boolean value to set.
    index                   Index into repeated field.
Notes:
    Sets a bool on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="bool value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    color                   Color value to set.
    index                   Index into repeated field.
Notes:
    Sets an RGBA color on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const int color[4]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Float value to set.
    index                   Index into repeated field.
Notes:
    Sets a float or double on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="float value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   Integer value to set.
    index                   Index into repeated field.
Notes:
    Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="int value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetString" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    value                   String value to set.
    index                   Index into repeated field.
Notes:
    Sets a string on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const char[] value"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    vec                     Vector value to set.
    index                   Index into repeated field.
Notes:
    Sets an XYZ vector on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float vec[3]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PbSetVector2D" func="yes">
            <Overload retVal="native void" descr="
Params:
    pb                      protobuf handle.
    field                   Field name.
    vec                     Vector value to set.
    index                   Index into repeated field.
Notes:
    Sets an XY vector on a protobuf message.
Error:
    Invalid or incorrect Handle, non-existent field, or incorrect field type.
">
                <Param name="Handle pb"/>
                <Param name="const char[] field"/>
                <Param name="const float vec[2]"/>
                <Param name="int index = PB_FIELD_NOT_REPEATED"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PopStack" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    stack                   Stack Handle.
Notes:
    Pops a value off a stack, ignoring it completely.
Error:
    Invalid Handle.
Return:
    True if something was popped, false otherwise.
">
                <Param name="Handle stack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PopStackArray" func="yes">
            <Overload retVal="native bool" descr="
Params:
    stack                   Stack Handle.
    buffer                  Buffer to store the array in.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Pops an array of cells from a stack.
Error:
    Invalid Handle.
Return:
    True on success, false if the stack is empty.
">
                <Param name="Handle stack"/>
                <Param name="any[] buffer"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PopStackCell" func="yes">
            <Overload retVal="native bool" descr="
Params:
    stack                   Stack Handle.
    value                   Variable to store the value.
    block                   Optionally specify which block to read from
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally read as a byte instead of a cell.
Notes:
    Pops a cell value from a stack.
Error:
    Invalid Handle.
Return:
    True on success, false if the stack is empty.
">
                <Param name="Handle stack"/>
                <Param name="any &amp;value"/>
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PopStackString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    stack                   Stack Handle.
    buffer                  Buffer to store string.
    maxlength               Maximum size of the buffer.
Notes:
    Pops a string value from a stack.
Error:
    Invalid Handle.
Return:
    True on success, false if the stack is empty.
">
                <Param name="Handle stack"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int &amp;written=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Pow" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Value to be raised.
    exponent                Value to raise the base.
Notes:
    Returns the value raised to the power of the exponent.
Return:
    value^exponent.
">
                <Param name="float value"/>
                <Param name="float exponent"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheDecal" func="yes">
            <Overload retVal="native int" descr="
Params:
    decal                   Name of the decal to precache.
    preload                 If preload is true the file will be precached before level startup.
Notes:
    Precaches a given decal.
Return:
    Returns a decal index.
">
                <Param name="const char[] decal"/>
                <Param name="bool preload=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheGeneric" func="yes">
            <Overload retVal="native int" descr="
Params:
    generic                 Name of the generic file to precache.
    preload                 If preload is true the file will be precached before level startup.
Notes:
    Precaches a given generic file.
Return:
    Returns a generic file index.
">
                <Param name="const char[] generic"/>
                <Param name="bool preload=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheModel" func="yes">
            <Overload retVal="native int" descr="
Params:
    model                   Name of the model to precache.
    preload                 If preload is true the file will be precached before level startup.
Notes:
    Precaches a given model.
Return:
    Returns the model index, 0 for error.
">
                <Param name="const char[] model"/>
                <Param name="bool preload=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheScriptSound" func="yes">
            <Overload retVal="native bool" descr="
Params:
    soundname               Game sound to precache
Notes:
    Precache a game sound.
    Most games will precache all game sounds on map start, but this is not guaranteed...
    Team Fortress 2 is known to not pre-cache MvM game mode sounds on non-MvM maps.
    Due to the above, this native should be called before any calls to GetGameSoundParams,
    EmitGameSound*, or EmitAmbientGameSound.
    It should be safe to pass already precached game sounds to this function.
    Note: It precaches all files for a game sound.
Return:
    True if the game sound was found, false if sound did not exist
    or had no files
">
                <Param name="const char[] soundname"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheSentenceFile" func="yes">
            <Overload retVal="native int" descr="
Params:
    file                    Name of the sentence file to precache.
    preload                 If preload is true the file will be precached before level startup.
Notes:
    Precaches a given sentence file.
Return:
    Returns a sentence file index.
">
                <Param name="const char[] file"/>
                <Param name="bool preload=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrecacheSound" func="yes">
            <Overload retVal="native bool" descr="
Params:
    sound                   Name of the sound to precache.
    preload                 If preload is true the file will be precached before level startup.
Notes:
    Precaches a given sound.
Return:
    True if successfully precached, false otherwise.
">
                <Param name="const char[] sound"/>
                <Param name="bool preload=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrefetchSound" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Sound file name relative to the &apos;sound&apos; folder.
Notes:
    Prefetches a sound.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_AddParameter" func="yes">
            <Overload retVal="native void" descr="
Params:
    type                    Data type to convert to/from.
    pass                    How the data is passed in C++.
    decflags                Flags on decoding from the plugin to C++.
    encflags                Flags on encoding from C++ to the plugin.
Notes:
    Adds a parameter to the calling convention.  This should be called in normal ascending order.
">
                <Param name="SDKType type"/>
                <Param name="SDKPassMethod pass"/>
                <Param name="int decflags=0"/>
                <Param name="int encflags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_SetAddress" func="yes">
            <Overload retVal="native bool" descr="
Params:
    addr                    Address of function to use.
Notes:
    Uses the given function address for the SDK call.
Return:
    True on success, false on failure.
">
                <Param name="Address addr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_SetFromConf" func="yes">
            <Overload retVal="native bool" descr="
Params:
    gameconf                GameConfig Handle, or INVALID_HANDLE to use sdktools.games.txt.
    source                  Whether to look in Offsets or Signatures.
    name                    Name of the property to find.
Notes:
    Finds an address or virtual function index in a GameConfig file and sets it as
    the calling information for the SDK call.
Return:
    True on success, false if nothing was found.
">
                <Param name="Handle gameconf"/>
                <Param name="SDKFuncConfSource source"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_SetReturnInfo" func="yes">
            <Overload retVal="native void" descr="
Params:
    type                    Data type to convert to/from.
    pass                    How the data is passed in C++.
    decflags                Flags on decoding from the plugin to C++.
    encflags                Flags on encoding from C++ to the plugin.
Notes:
    Sets the return information of an SDK call.  Do not call this if there is no return data.
    This must be called if there is a return value (i.e. it is not necessarily safe to ignore
    the data).
">
                <Param name="SDKType type"/>
                <Param name="SDKPassMethod pass"/>
                <Param name="int decflags=0"/>
                <Param name="int encflags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_SetSignature" func="yes">
            <Overload retVal="native bool" descr="
Params:
    lib                     Library to use.
    signature               Binary data to search for in the library.  If it starts with &apos;@&apos;,
                            the bytes parameter is ignored and the signature is interpreted
                            as a symbol lookup in the library.
    bytes                   Number of bytes in the binary search string.
Notes:
    Finds an address in a library and sets it as the address to use for the SDK call.
Return:
    True on success, false if nothing was found.
">
                <Param name="SDKLibrary lib"/>
                <Param name="const char[] signature"/>
                <Param name="int bytes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrepSDKCall_SetVirtual" func="yes">
            <Overload retVal="native void" descr="
Params:
    vtblidx                 Virtual table index.
Notes:
    Sets the virtual index of the SDK call if it is virtual.
">
                <Param name="int vtblidx"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintCenterText" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to a specific client in the center of the screen.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintCenterTextAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to all clients in the center of the screen.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintHintText" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to a specific client with a hint box.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintHintTextToAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to all clients with a hint box.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintToChat" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to a specific client in the chat area.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintToChatAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Prints a message to all clients in the chat area.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintToConsole" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Sends a message to a client&apos;s console.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintToConsoleAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Sends a message to every client&apos;s console.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="PrintToServer" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Sends a message to the server console.
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ProcessTargetString" func="yes">
            <Overload retVal="native int" descr="
Params:
    pattern                 Pattern to find clients against.
    admin                   Admin performing the action, or 0 if the server.
    targets                 Array to hold targets.
    max_targets             Maximum size of the targets array.
    filter_flags            Filter flags.
    target_name             Buffer to store the target name.
    tn_maxlength            Maximum length of the target name buffer.
    tn_is_ml                OUTPUT: Will be true if the target name buffer is an ML phrase,
                            false if it is a normal string.
Notes:
    Processes a generic command target string, and resolves it to a list
    of clients or one client, based on filtering rules and a pattern.
    Note that you should use LoadTranslations(&apos;common.phrases&apos;) in OnPluginStart(),
    as that file is guaranteed to contain all of the translatable phrases that
    ProcessTargetString() will return.
Return:
    If a multi-target pattern was used, the number of clients found
    is returned.  If a single-target pattern was used, 1 is returned
    if one valid client is found.  Otherwise, a COMMAND_TARGET reason
    for failure is returned.
">
                <Param name="const char[] pattern"/>
                <Param name="int admin"/>
                <Param name="int[] targets"/>
                <Param name="int max_targets"/>
                <Param name="int filter_flags"/>
                <Param name="char[] target_name"/>
                <Param name="int tn_maxlength"/>
                <Param name="bool &amp;tn_is_ml"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushArrayArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    values                  Block of values to copy.
    size                    If not set, the number of elements copied from the array
                            will be equal to the blocksize.  If set higher than the
                            blocksize, the operation will be truncated.
Notes:
    Pushes an array of cells onto the end of an array.  The cells
    are pushed as a block (i.e. the entire array sits at the index),
    rather than pushing each cell individually.
Error:
    Invalid Handle or out of memory.
Return:
    Index of the new entry.
">
                <Param name="Handle array"/>
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushArrayCell" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    value                   Value to push.
Notes:
    Pushes a value onto the end of an array, adding a new index.
    This may safely be used even if the array has a blocksize
    greater than 1.
Error:
    Invalid Handle or out of memory.
Return:
    Index of the new entry.
">
                <Param name="Handle array"/>
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushArrayString" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    value                   String to push.
Notes:
    Pushes a string onto the end of an array, truncating it
    if it is too big.
Error:
    Invalid Handle or out of memory.
Return:
    Index of the new entry.
">
                <Param name="Handle array"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushStackArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    stack                   Stack Handle.
    values                  Block of values to copy.
    size                    If not set, the number of elements copied from the array
                            will be equal to the blocksize.  If set higher than the
                            blocksize, the operation will be truncated.
Notes:
    Pushes a copy of an array of cells onto the end of a stack.  The cells
    are pushed as a block (i.e. the entire array takes up one stack slot),
    rather than pushing each cell individually.
Error:
    Invalid Handle or out of memory.
">
                <Param name="Handle stack"/>
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushStackCell" func="yes">
            <Overload retVal="native void" descr="
Params:
    stack                   Stack Handle.
    value                   Value to push.
Notes:
    Pushes a value onto the end of the stack, adding a new index.
    This may safely be used even if the stack has a blocksize
    greater than 1.
Error:
    Invalid Handle or out of memory.
">
                <Param name="Handle stack"/>
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PushStackString" func="yes">
            <Overload retVal="native void" descr="
Params:
    stack                   Stack Handle.
    value                   String to push.
Notes:
    Pushes a copy of a string onto the end of a stack, truncating it if it is
    too big.
Error:
    Invalid Handle or out of memory.
">
                <Param name="Handle stack"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="QueryClientConVar" func="yes">
            <Overload retVal="native QueryCookie" descr="
Params:
    client                  Player index.
    cvarName                Name of client convar to query.
    callback                A function to use as a callback when the query has finished.
    value                   Optional value to pass to the callback function.
Notes:
    Starts a query to retrieve the value of a client&apos;s console variable.
Return:
    A cookie that uniquely identifies the query.
    Returns QUERYCOOKIE_FAILED on failure, such as when used on a bot.
">
                <Param name="int client"/>
                <Param name="const char[] cvarName"/>
                <Param name="ConVarQueryFinished callback"/>
                <Param name="any value=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RadToDeg" func="yes">
            <Overload retVal="stock float" descr="
Params:
    angle                   Radians.
Notes:
    Converts radians to degrees.
Return:
    Degrees.
">
                <Param name="float angle"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadCommandIterator" func="yes">
            <Overload retVal="native bool" descr="
Params:
    iter                    Command iterator Handle.
    name                    Name buffer.
    nameLen                 Name buffer size.
    eflags                  Effective default flags of a command.
    desc                    Command description buffer.
    descLen                 Command description buffer size.
Notes:
    Reads a command iterator, then advances to the next command if any.
    Only SourceMod specific commands are returned.
Return:
    True on success, false if there are no more commands.
">
                <Param name="Handle iter"/>
                <Param name="char[] name"/>
                <Param name="int nameLen"/>
                <Param name="int &amp;eflags=0"/>
                <Param name="char[] desc=&apos;&apos;"/>
                <Param name="int descLen=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadCookieIterator" func="yes">
            <Overload retVal="native bool" descr="
Params:
    iter                    Cookie iterator Handle.
    name                    Name buffer.
    nameLen                 Name buffer size.
    access                  Access level of the cookie.
    desc                    Cookie description buffer.
    descLen                 Cookie description buffer size.
Notes:
    Reads a cookie iterator, then advances to the next cookie if any.
Return:
    True on success, false if there are no more commands.
">
                <Param name="Handle iter"/>
                <Param name="char[] name"/>
                <Param name="int nameLen"/>
                <Param name="CookieAccess &amp;access"/>
                <Param name="char[] desc=&apos;&apos;"/>
                <Param name="int descLen=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadDirEntry" func="yes">
            <Overload retVal="native bool" descr="
Params:
    dir                     Handle to a directory.
    buffer                  String buffer to hold directory name.
    maxlength               Maximum size of string buffer.
    type                    Optional variable to store the file type.
Notes:
    Reads the current directory entry as a local filename, then moves to the next file.
    Contents of buffers are undefined when returning false.
    Both the &apos;.&apos; and &apos;..&apos; automatic directory entries will be retrieved for Windows and Linux.
Error:
    Invalid or corrupt Handle.
Return:
    True on success, false if there are no more files to read.
">
                <Param name="Handle dir"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="FileType &amp;type=FileType_Unknown"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadFile" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    Handle to the file.
    items                   Array to store each item read.
    num_items               Number of items to read into the array.
    size                    Size of each element, in bytes, to be read.
                            Valid sizes are 1, 2, or 4.
Notes:
    Reads binary data from a file.
Return:
    Number of elements read, or -1 on error.
">
                <Param name="Handle hndl"/>
                <Param name="int[] items"/>
                <Param name="int num_items"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadFileCell" func="yes">
            <Overload retVal="stock int" descr="
Params:
    hndl                    Handle to the file.
    data                    Variable to store the data read.
    size                    Size of the data to read in bytes.  Valid
                            sizes are 1, 2, or 4 bytes.
Notes:
    Reads a single binary cell from a file.
Error:
    Invalid Handle.
Return:
    Number of elements read (max 1), or -1 on error.
">
                <Param name="Handle hndl"/>
                <Param name="int &amp;data"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadFileLine" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    Handle to the file.
    buffer                  String buffer to hold the line.
    maxlength               Maximum size of string buffer.
Notes:
    Reads a line from a text file.
Return:
    True on success, false otherwise.
">
                <Param name="Handle hndl"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadFileString" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    Handle to the file.
    buffer                  Buffer to store the string.
    max_size                Maximum size of the string buffer.
    read_count              If -1, reads until a null terminator is encountered in
                            the file.  Otherwise, read_count bytes are read
                            into the buffer provided.  In this case the buffer
                            is not explicitly null terminated, and the buffer
                            will contain any null terminators read from the file.
Notes:
    Reads a UTF8 or ANSI string from a file.
Error:
    Invalid Handle, or read_count &gt; max_size.
Return:
    Number of characters written to the buffer, or -1
    if an error was encountered.
">
                <Param name="Handle hndl"/>
                <Param name="char[] buffer"/>
                <Param name="int max_size"/>
                <Param name="int read_count=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadFlagString" func="yes">
            <Overload retVal="native int" descr="
Params:
    flags                   Flag ASCII string.
    numchars                Optional variable to store the number of bytes read.
Notes:
    Converts a string of flag characters to a bit string.
Return:
    Bit string of ADMFLAG values.
">
                <Param name="const char[] flags"/>
                <Param name="int &amp;numchars=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadMapList" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    array                   Array to store the map list.  If INVALID_HANDLE, a new blank
                            array will be created.  The blocksize should be at least 16;
                            otherwise results may be truncated.  Items are added to the array
                            as strings.  The array is never checked for duplicates, and it is
                            not read beforehand.  Only the serial number is used to detect
                            changes.
    serial                  Serial number to identify last known map list change.  If -1, the
                            the value will not be checked.  If the map list has since changed,
                            the serial is updated (even if -1 was passed).  If there is an error
                            finding a valid maplist, then the serial is set to -1.
    str                     Config name, or &apos;default&apos; for the default map list.  Config names
                            should be somewhat descriptive.  For example, the admin menu uses
                            a config name of &apos;admin menu&apos;.  The list names can be configured
                            by users in addons/sourcemod/configs/maplists.cfg.
    flags                   MAPLIST_FLAG flags.
Notes:
    Loads a map list to an ADT Array.
    A map list is a list of maps from a file.  SourceMod allows easy configuration of
    maplists through addons/sourcemod/configs/maplists.cfg.  Each entry is given a
    name and a file (for example, &apos;rtv&apos; =&gt; &apos;rtv.cfg&apos;), or a name and a redirection
    (for example, &apos;rtv&apos; =&gt; &apos;default&apos;).  This native will read a map list entry,
    cache the file, and return the list of maps it holds.
    Serial change numbers are used to identify if a map list has changed.  Thus, if
    you pass a serial change number and it&apos;s equal to what SourceMod currently knows
    about the map list, then SourceMod won&apos;t re-parse the file.
    If the maps end up being read from the maps folder (MAPLIST_FLAG_MAPSFOLDER), they
    are automatically sorted in alphabetical, ascending order.
    Arrays created by this function are temporary and must be freed via CloseHandle().
    Modifying arrays created by this function will not affect future return values or
    or the contents of arrays returned to other plugins.
Error:
    Invalid array Handle that is not INVALID_HANDLE.
Return:
    On failure:
    INVALID_HANDLE is returned, the serial is set to -1, and the input
    array (if any) is left unchanged.
    On no change:
    INVALID_HANDLE is returned, the serial is unchanged, and the input
    array (if any) is left unchanged.
    On success:
    A valid array Handle is returned, containing at least one map string.
    If an array was passed, the return value is equal to the passed Array
    Handle.  If the passed array was not cleared, it will have grown by at
    least one item.  The serial number is updated to a positive number.
">
                <Param name="Handle array=INVALID_HANDLE"/>
                <Param name="int &amp;serial=-1"/>
                <Param name="const char[] str=&apos;default&apos;"/>
                <Param name="int flags=MAPLIST_FLAG_CLEARARRAY"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadPackCell" func="yes">
            <Overload retVal="native any" descr="
Params:
    pack                    Handle to the data pack.
Notes:
    Reads a cell from a data pack.
Error:
    Invalid handle, or bounds error.
Return:
    Cell value.
">
                <Param name="Handle pack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadPackFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    pack                    Handle to the data pack.
Notes:
    Reads a float from a data pack.
Error:
    Invalid handle, or bounds error.
Return:
    Float value.
">
                <Param name="Handle pack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadPackFunction" func="yes">
            <Overload retVal="native function" descr="
Params:
    pack                    Handle to the data pack.
Notes:
    Reads a function pointer from a data pack.
Error:
    Invalid handle, or bounds error.
Return:
    Function pointer.
">
                <Param name="Handle pack"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadPackString" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    buffer                  Destination string buffer.
    maxlen                  Maximum length of output string buffer.
Notes:
    Reads a string from a data pack.
Error:
    Invalid handle, or bounds error.
">
                <Param name="Handle pack"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadPlugin" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    iter                    Handle to the plugin iterator.
Notes:
    Returns the current plugin in the iterator and advances the iterator.
Error:
    Invalid Handle.
Return:
    Current plugin the iterator is at, before
    the iterator is advanced.
">
                <Param name="Handle iter"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReadStringTable" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    stringidx               A string index.
    str                     Buffer to store the string value.
    maxlength               Maximum length of string buffer.
Notes:
    Retrieves the string at a given index of a string table.
Error:
    Invalid string table index or string index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="int tableidx"/>
                <Param name="int stringidx"/>
                <Param name="char[] str"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReconnectClient" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  The client index
Notes:
    Reconnect a client without dropping the netchannel
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RedisplayAdminMenu" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    topmenu                 TopMenu Handle.
    client                  Client index.
Notes:
    Re-displays the admin menu to a client after selecting an item.
    Auto-aborts if the Handle is invalid.
Return:
    True on success, false on failure.
">
                <Param name="Handle topmenu"/>
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RedrawClientVoteMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    revotes                 True to allow revotes, false otherwise.
Notes:
    Redraws the current vote menu to a client in the voting pool.
Error:
    No vote in progress, int client is not in the voting pool,
    or client index is invalid.
Return:
    True on success, false if the client is in the vote pool
    but cannot vote again.
">
                <Param name="int client"/>
                <Param name="bool revotes=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RedrawMenuItem" func="yes">
            <Overload retVal="native int" descr="
Params:
    text                    Menu text to draw.
Notes:
    Redraws menu text from inside a MenuAction_DisplayItem callback.
Return:
    Item position; must be returned via the callback.
">
                <Param name="const char[] text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegAdminCmd" func="yes">
            <Overload retVal="native void" descr="
Params:
    cmd                     String containing command to register.
    callback                A function to use as a callback for when the command is invoked.
    adminflags              Administrative flags (bitstring) to use for permissions.
    description             Optional description to use for help.
    group                   String containing the command group to use.  If empty,
                            the plugin&apos;s filename will be used instead.
    flags                   Optional console flags.
Notes:
    Creates a console command as an administrative command.  If the command does not exist,
    it is created.  When this command is invoked, the access rights of the player are
    automatically checked before allowing it to continue.
    Admin commands are case sensitive from both the client and server.
Error:
    Command name is the same as an existing convar.
">
                <Param name="const char[] cmd"/>
                <Param name="ConCmd callback"/>
                <Param name="int adminflags"/>
                <Param name="const char[] description=&apos;&apos;"/>
                <Param name="const char[] group=&apos;&apos;"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegClientCookie" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    name                    Name of the new preference cookie.
    description             Optional description of the preference cookie.
    access                  What CookieAccess level to assign to this cookie.
Notes:
    Creates a new Client preference cookie.
    Handles returned by RegClientCookie can be closed via CloseHandle() when
    no longer needed.
Error:
    Cookie name is blank.
Return:
    A handle to the newly created cookie. If the cookie already
    exists, a handle to it will still be returned.
">
                <Param name="const char[] name"/>
                <Param name="const char[] description"/>
                <Param name="CookieAccess access"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegConsoleCmd" func="yes">
            <Overload retVal="native void" descr="
Params:
    cmd                     Name of the command to hook or create.
    callback                A function to use as a callback for when the command is invoked.
    description             Optional description to use for command creation.
    flags                   Optional flags to use for command creation.
Notes:
    Creates a console command, or hooks an already existing one.
    Console commands are case sensitive.  However, if the command already exists in the game,
    a client may enter the command in any case.  SourceMod corrects for this automatically,
    and you should only hook the &apos;real&apos; version of the command.
Error:
    Command name is the same as an existing convar.
">
                <Param name="const char[] cmd"/>
                <Param name="ConCmd callback"/>
                <Param name="const char[] description=&apos;&apos;"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegPluginLibrary" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Library name.
Notes:
    Registers a library name for identifying as a dependency to
    other plugins.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegServerCmd" func="yes">
            <Overload retVal="native void" descr="
Params:
    cmd                     Name of the command to hook or create.
    callback                A function to use as a callback for when the command is invoked.
    description             Optional description to use for command creation.
    flags                   Optional flags to use for command creation.
Notes:
    Creates a server-only console command, or hooks an already existing one.
    Server commands are case sensitive.
Error:
    Command name is the same as an existing convar.
">
                <Param name="const char[] cmd"/>
                <Param name="SrvCmd callback"/>
                <Param name="const char[] description=&apos;&apos;"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegisterAuthIdentType" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Codename to use for your authentication type.
Notes:
    Registers an authentication identity type.  You normally never need to call this except for
    very specific systems.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveAdmin" func="yes">
            <Overload retVal="native bool" descr="
Params:
    id                      AdminId index to remove/invalidate.
Notes:
    Removes an admin entry from the cache.
    This will remove any bindings to a specific user.
Return:
    True on success, false otherwise.
">
                <Param name="AdminId id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveAllFromForward" func="yes">
            <Overload retVal="native int" descr="
Params:
    fwd                     Handle to private forward.
    plugin                  Handle of the plugin to remove instances of.
                            Pass INVALID_HANDLE to specify the calling plugin.
Notes:
    Removes all instances of a plugin from a private forward&apos;s call list.
    Functions will be removed automatically if their parent plugin is unloaded.
Error:
    Invalid or corrupt private forward handle or invalid or corrupt plugin handle.
Return:
    Number of functions removed from forward.
">
                <Param name="Handle fwd"/>
                <Param name="Handle plugin"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveAllMenuItems" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
Notes:
    Removes all items from a menu.
Error:
    Invalid Handle or menu position.
">
                <Param name="Handle menu"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveAmbientSoundHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Function used for the hook.
Notes:
    Unhooks all played ambient sounds.
Error:
    Invalid function hook.
">
                <Param name="AmbientSHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveBan" func="yes">
            <Overload retVal="native bool" descr="
Params:
    identity                String to unban (ip or authstring).
    flags                   Flags (only IP and AUTHID are valid flags here).
    command                 Command string to identify the source.  If this is left
                            empty, then OnRemoveBan will not be called.
    source                  A source value that could be interpreted as a player
                            index of any sort (not actually checked by Core).
Notes:
    Removes a ban that was written to the server (either in memory or on disk).
Return:
    True on success, false on failure.
">
                <Param name="const char[] identity"/>
                <Param name="int flags"/>
                <Param name="const char[] command=&apos;&apos;"/>
                <Param name="any source=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveCommandListener" func="yes">
            <Overload retVal="native void" descr="
Params:
    callback                Callback.
    command                 Command, or if not specified, a global listener.
                            The command is case insensitive.
Notes:
    Removes a previously added command listener, in reverse order of being added.
Error:
    Callback has no active listeners.
">
                <Param name="CommandListener callback"/>
                <Param name="const char[] command=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveDir" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path to the directory.
Notes:
    Removes a directory.
    On most Operating Systems you cannot remove a directory which has files inside it.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] path"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveEdict" func="yes">
            <Overload retVal="native void" descr="
Params:
    edict                   Index of the edict.
Notes:
    Removes an edict from the world.
Error:
    Invalid edict index.
">
                <Param name="int edict"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Index of the entity.
Notes:
    Marks an entity for deletion.
Error:
    Invalid entity index.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveFromArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
    index                   Index in the array to remove at.
Notes:
    Removes an array index, shifting the entire array down from that position
    on.  For example, if item 8 of 10 is removed, the last 3 items will then be
    (6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.
Error:
    Invalid Handle or invalid index.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveFromForward" func="yes">
            <Overload retVal="native bool" descr="
Params:
    fwd                     Handle to private forward.
    plugin                  Handle of the plugin that contains the function.
                            Pass INVALID_HANDLE to specify the calling plugin.
    func                    Function to remove from forward.
Notes:
    Removes a function from a private forward&apos;s call list.
    Only removes one instance.
    Functions will be removed automatically if their parent plugin is unloaded.
Error:
    Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.
Return:
    True on success, false otherwise.
">
                <Param name="Handle fwd"/>
                <Param name="Handle plugin"/>
                <Param name="Function func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveFromTopMenu" func="yes">
            <Overload retVal="native void" descr="
Params:
    topmenu                 TopMenu Handle.
    topobj                  TopMenuObject ID.
Notes:
    Removes an topobj from a TopMenu.
    Plugins&apos; topobjs are automatically removed all TopMenus when the given
    plugin unloads or pauses.  In the case of unpausing, all items are restored.
Error:
    Invalid TopMenu Handle.
">
                <Param name="Handle topmenu"/>
                <Param name="TopMenuObject topobj"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveFromTrie" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
Notes:
    Removes a key entry from a Map.
Error:
    Invalid Handle.
Return:
    True on success, false if the value was never set.
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveGameLogHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Hook function.
Notes:
    Removes a game log hook.
">
                <Param name="GameLogHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveMenuItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    position                Position, starting from 0.
Notes:
    Removes an item from the menu.
Error:
    Invalid Handle or menu position.
Return:
    True on success, false on failure.
">
                <Param name="Handle menu"/>
                <Param name="int position"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveMultiTargetFilter" func="yes">
            <Overload retVal="native void" descr="
Params:
    pattern                 Pattern to match (case sensitive).
    filter                  Filter function.
Notes:
    Removes a multi-target filter function from ProcessTargetString().
">
                <Param name="const char[] pattern"/>
                <Param name="MultiTargetFilter filter"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveNominationByMap" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map to remove.
Notes:
    Attempt to remove a map from the mapchooser map list.
Return:
    True if the nomination was found and removed, or false if the nomination was not found.
">
                <Param name="const char[] map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveNominationByOwner" func="yes">
            <Overload retVal="native bool" descr="
Params:
    owner                   Client index of the nominator.
Notes:
    Attempt to remove a map from the mapchooser map list.
Return:
    True if the nomination was found and removed, or false if the nomination was not found.
">
                <Param name="int owner"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveNormalSoundHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    hook                    Function used for the hook.
Notes:
    Unhooks all played normal sounds.
Error:
    Invalid function hook.
">
                <Param name="NormalSHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemovePlayerItem" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
    item                    CBaseCombatWeapon entity index.
Notes:
    Removes a player&apos;s item.
Error:
    Invalid client or entity, lack of mod support, or client not in
    game.
Return:
    True on success, false otherwise.
">
                <Param name="int client"/>
                <Param name="int item"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveServerTag" func="yes">
            <Overload retVal="native void" descr="
Params:
    tag                     Tag string to remove.
Notes:
    Removes a tag previously added by the calling plugin.
">
                <Param name="const char[] tag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveTempEntHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    te_name                 TE name to unhook.
    hook                    Function used for the hook.
Notes:
    Removes a temp entity hook.
Error:
    Temp Entity name not available or invalid function hook.
">
                <Param name="const char[] te_name"/>
                <Param name="TEHook hook"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RemoveUserFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    ...                     Flags to remove from the client.
Notes:
    Removes flags from a client.  If the client is not an admin,
    this has no effect.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="AdminFlag ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="RenameFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    newpath                 New path to the file.
    oldpath                 Path to the existing file.
    use_valve_fs            If true, the Valve file system will be used instead.
                            This can be used to rename files in the game&apos;s
                            Valve search paths, rather than directly in the gamedir.
    valve_path_id           If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.
Notes:
    Renames a file.
Return:
    True on success or use_valve_fs specified, false otherwise.
">
                <Param name="const char[] newpath"/>
                <Param name="const char[] oldpath"/>
                <Param name="bool use_valve_fs=false"/>
                <Param name="const char[] valve_path_id=&apos;DEFAULT_WRITE_PATH&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReplaceString" func="yes">
            <Overload retVal="native int" descr="
Params:
    text                    String to perform search and replacements on.
    maxlength               Maximum length of the string buffer.
    search                  String to search for.
    replace                 String to replace the search string with.
    caseSensitive           If true (default), search is case sensitive.
Notes:
    Given a string, replaces all occurrences of a search string with a
    replacement string.
Return:
    Number of replacements that were performed.
">
                <Param name="char[] text"/>
                <Param name="int maxlength"/>
                <Param name="const char[] search"/>
                <Param name="const char[] replace"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReplaceStringEx" func="yes">
            <Overload retVal="native int" descr="
Params:
    text                    String to perform search and replacements on.
    maxlength               Maximum length of the string buffer.
    search                  String to search for.
    replace                 String to replace the search string with.
    searchLen               If higher than -1, its value will be used instead of
                            a strlen() call on the search parameter.
    replaceLen              If higher than -1, its value will be used instead of
                            a strlen() call on the replace parameter.
    caseSensitive           If true (default), search is case sensitive.
Notes:
    Given a string, replaces the first occurrence of a search string with a
    replacement string.
Return:
    Index into the buffer (relative to the start) from where
    the last replacement ended, or -1 if no replacements were
    made.
">
                <Param name="char[] text"/>
                <Param name="int maxlength"/>
                <Param name="const char[] search"/>
                <Param name="const char[] replace"/>
                <Param name="int searchLen=-1"/>
                <Param name="int replaceLen=-1"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReplyToCommand" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index, or 0 for server.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Replies to a message in a command.
    A client index of 0 will use PrintToServer().
    If the command was from the console, PrintToConsole() is used.
    If the command was from chat, PrintToChat() is used.
Error:
    If the client is not connected or invalid.
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ReplyToTargetError" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client index, or 0 for server.
    reason                  COMMAND_TARGET reason.
Notes:
    Replies to a client with a given message describing a targetting
    failure reason.
    Note: The translation phrases are found in common.phrases.txt.
">
                <Param name="int client"/>
                <Param name="int reason"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RequestFrame" func="yes">
            <Overload retVal="native void" descr="
Params:
    Function                Function to call on the next frame.
    data                    Value to be passed on the invocation of the Function.
Notes:
    Creates a single use Next Frame hook.
">
                <Param name="RequestFrameCallback Function"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RequireFeature" func="yes">
            <Overload retVal="native void" descr="
Params:
    type                    Feature type.
    name                    Feature name.
    fmt                     Message format string, or empty to use default.
    ...                     Message format parameters, if any.
Notes:
    Requires that a given feature is available. If it is not, SetFailState()
    is called with the given message.
">
                <Param name="FeatureType type"/>
                <Param name="const char[] name"/>
                <Param name="const char[] fmt=&apos;&apos;"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ResetConVar" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Resets the console variable to its default value.
    Note: The replicate and notify params are only relevant for the original, Dark Messiah, and
    Episode 1 engines. Newer engines automatically do these things when the convar value is changed.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ResetPack" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    clear                   If true, clears the contained data.
Notes:
    Resets the position in a data pack.
Error:
    Invalid handle.
">
                <Param name="Handle pack"/>
                <Param name="bool clear=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ResizeArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
    newsize                 New size.
Notes:
    Resizes an array.  If the size is smaller than the current size,
    the array is truncated.  If the size is larger than the current size,
    the data at the additional indexes will not be initialized.
Error:
    Invalid Handle or out of memory.
">
                <Param name="Handle array"/>
                <Param name="int newsize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RoundFloat" func="yes">
            <Overload retVal="stock int" descr="
Params:
    value                   Floating point value to round.
Notes:
    Rounds a floating point number using the &apos;round to nearest&apos; algorithm.
Return:
    The value rounded to the nearest integer.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RoundToCeil" func="yes">
            <Overload retVal="native int" descr="
Params:
    value                   Input value to be rounded.
Notes:
    Rounds a float to the next highest integer value.
Return:
    Rounded value.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RoundToFloor" func="yes">
            <Overload retVal="native int" descr="
Params:
    value                   Input value to be rounded.
Notes:
    Rounds a float to the next lowest integer value.
Return:
    Rounded value.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RoundToNearest" func="yes">
            <Overload retVal="native int" descr="
Params:
    value                   Input value to be rounded.
Notes:
    Standard IEEE rounding.
Return:
    Rounded value.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RoundToZero" func="yes">
            <Overload retVal="native int" descr="
Params:
    value                   Input value to be rounded.
Notes:
    Rounds a float to the closest integer to zero.
Return:
    Rounded value.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RunAdminCacheChecks" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index.
Notes:
    Runs through the Core-defined admin authorization checks on a player.
    Has no effect if the player is already an admin.
    Note: This function is based on the internal cache only.
Error:
    Invalid client index or client not in-game AND authorized.
Return:
    True if access was changed, false if it did not.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKCall" func="yes">
            <Overload retVal="native any" descr="
Params:
    call                    SDKCall Handle.
    ...                     Call Parameters.
Notes:
    Calls an SDK function with the given parameters.
    If the call type is Entity or Player, the index MUST ALWAYS be the FIRST parameter passed.
    If the call type is GameRules, then nothing special needs to be passed.
    If the return value is a Vector or QAngles, the SECOND parameter must be a Float[3].
    If the return value is a string, the THIRD parameter must be a String buffer, and the
    FOURTH parameter must be the maximum length.
    All parameters must be passed after the above is followed.  Failure to follow these
    rules will result in crashes or wildly unexpected behavior!
    If the return value is a float or integer, the return value will be this value.
    If the return value is a CBaseEntity, CBasePlayer, or edict, the return value will
    always be the entity index, or -1 for NULL.
Error:
    Invalid Handle or internal decoding error.
Return:
    Simple return value, if any.
">
                <Param name="Handle call"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKHook" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index
    type                    Type of function to hook
    callback                Function to call when hook is called
Notes:
    Hooks an entity
">
                <Param name="int entity"/>
                <Param name="SDKHookType type"/>
                <Param name="SDKHookCB callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKHookEx" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  Entity index
    type                    Type of function to hook
    callback                Function to call when hook is called
Notes:
    Hooks an entity
Return:
    Hook Successful
">
                <Param name="int entity"/>
                <Param name="SDKHookType type"/>
                <Param name="SDKHookCB callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKHooks_DropWeapon" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    weapon                  Weapon entity index.
    vecTarget               Location to toss weapon to, or NULL_VECTOR for default.
    vecVelocity             Velocity at which to toss weapon, or NULL_VECTOR for default.
Notes:
    Forces a client to drop the specified weapon
Error:
    Invalid client or weapon entity, weapon not owned by client.
">
                <Param name="int client"/>
                <Param name="int weapon"/>
                <Param name="const float vecTarget[3]=NULL_VECTOR"/>
                <Param name="const float vecVelocity[3]=NULL_VECTOR"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKHooks_TakeDamage" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index taking damage
    inflictor               Inflictor entity index
    attacker                Attacker entity index
    damage                  Amount of damage
    damageType              Bitfield of damage types
    weapon                  Weapon index (orangebox and later) or -1 for unspecified
    damageForce             Velocity of damage force
    damagePosition          Origin of damage
Notes:
    Applies damage to an entity
    Force application is dependent on game and damage type(s)
">
                <Param name="int entity"/>
                <Param name="int inflictor"/>
                <Param name="int attacker"/>
                <Param name="float damage"/>
                <Param name="int damageType=DMG_GENERIC"/>
                <Param name="int weapon=-1"/>
                <Param name="const float damageForce[3]=NULL_VECTOR"/>
                <Param name="const float damagePosition[3]=NULL_VECTOR"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SDKUnhook" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index
    type                    Type of function to unhook
    callback                Callback function to unhook
Notes:
    Unhooks an entity
">
                <Param name="int entity"/>
                <Param name="SDKHookType type"/>
                <Param name="SDKHookCB callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_CreateParser" func="yes">
            <Overload retVal="native SMCParser" descr="
Notes:
    Creates a new SMC file format parser.  This is used to set parse hooks.
Return:
    A new Handle to an SMC Parse structure.
">
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_GetErrorString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    error                   The SMCParseError code.
    buffer                  A string buffer for the error (contents undefined on failure).
    buf_max                 The maximum size of the buffer.
Notes:
    Gets an error string for an SMCError code.
    SMCError_Okay returns false.
    SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.
Return:
    True on success, false otherwise.
">
                <Param name="SMCError error"/>
                <Param name="char[] buffer"/>
                <Param name="int buf_max"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_ParseFile" func="yes">
            <Overload retVal="native SMCError" descr="
Params:
    smc                     A Handle to an SMC Parse structure.
    file                    A string containing the file path.
    line                    An optional by reference cell to store the last line number read.
    col                     An optional by reference cell to store the last column number read.
Notes:
    Parses an SMC file.
Error:
    Invalid or corrupt Handle.
Return:
    An SMCParseError result.
">
                <Param name="Handle smc"/>
                <Param name="const char[] file"/>
                <Param name="int &amp;line=0"/>
                <Param name="int &amp;col=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_SetParseEnd" func="yes">
            <Overload retVal="native void" descr="
Params:
    smc                     Handle to an SMC Parse.
    func                    SMC_ParseEnd function.
Notes:
    Sets the SMC_ParseEnd of a parse handle.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle smc"/>
                <Param name="SMC_ParseEnd func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_SetParseStart" func="yes">
            <Overload retVal="native void" descr="
Params:
    smc                     Handle to an SMC Parse.
    func                    SMC_ParseStart function.
Notes:
    Sets the SMC_ParseStart function of a parse Handle.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle smc"/>
                <Param name="SMC_ParseStart func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_SetRawLine" func="yes">
            <Overload retVal="native void" descr="
Params:
    smc                     Handle to an SMC Parse.
    func                    SMC_RawLine function.
Notes:
    Sets a raw line reader on an SMC parser Handle.
">
                <Param name="Handle smc"/>
                <Param name="SMC_RawLine func"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SMC_SetReaders" func="yes">
            <Overload retVal="native void" descr="
Params:
    smc                     An SMC parse Handle.
    ns                      An SMC_NewSection function pointer.
    kv                      An SMC_KeyValue function pointer.
    es                      An SMC_EndSection function pointer.
Notes:
    Sets the three main reader functions.
">
                <Param name="Handle smc"/>
                <Param name="SMC_NewSection ns"/>
                <Param name="SMC_KeyValue kv"/>
                <Param name="SMC_EndSection es"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_AddQuery" func="yes">
            <Overload retVal="native int" descr="
Params:
    txn                     A transaction handle.
    query                   Query string.
    data                    Extra data value to pass to the final callback.
Notes:
    Adds a query to a transaction object.
Error:
    Invalid transaction handle.
Return:
    The index of the query in the transaction&apos;s query list.
">
                <Param name="Transaction txn"/>
                <Param name="const char[] query"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_BindParamFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    statement               A statement (prepared query) Handle.
    param                   The parameter index (starting from 0).
    value                   The float number to bind.
Notes:
    Binds a parameter in a prepared statement to a given float value.
Error:
    Invalid statement Handle or parameter index, or
    SQL error.
">
                <Param name="Handle statement"/>
                <Param name="int param"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_BindParamInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    statement               A statement (prepared query) Handle.
    param                   The parameter index (starting from 0).
    number                  The number to bind.
    signed                  True to bind the number as signed, false to
                            bind it as unsigned.
Notes:
    Binds a parameter in a prepared statement to a given integer value.
Error:
    Invalid statement Handle or parameter index, or
    SQL error.
">
                <Param name="Handle statement"/>
                <Param name="int param"/>
                <Param name="int number"/>
                <Param name="bool signed=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_BindParamString" func="yes">
            <Overload retVal="native void" descr="
Params:
    statement               A statement (prepared query) Handle.
    param                   The parameter index (starting from 0).
    value                   The string to bind.
    copy                    Whether or not SourceMod should copy the value
                            locally if necessary.  If the string contents
                            won&apos;t change before calling SQL_Execute(), this
                            can be set to false for optimization.
Notes:
    Binds a parameter in a prepared statement to a given string value.
Error:
    Invalid statement Handle or parameter index, or
    SQL error.
">
                <Param name="Handle statement"/>
                <Param name="int param"/>
                <Param name="const char[] value"/>
                <Param name="bool copy"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_CheckConfig" func="yes">
            <Overload retVal="native bool" descr="
Params:
    name                    Configuration name.
Notes:
    Returns if a named configuration is present in databases.cfg.
Return:
    True if it exists, false otherwise.
">
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_Connect" func="yes">
            <Overload retVal="native Database" descr="
Params:
    confname                Named configuration.
    persistent              True to re-use a previous persistent connection if
                            possible, false otherwise.
    error                   Error buffer.
    maxlength               Maximum length of the error buffer.
Notes:
    Creates an SQL connection from a named configuration.
Return:
    A database connection Handle, or INVALID_HANDLE on failure.
">
                <Param name="const char[] confname"/>
                <Param name="bool persistent"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_ConnectCustom" func="yes">
            <Overload retVal="native Database" descr="
Params:
    keyvalues               Key/value pairs from a KeyValues handle, describing the connection.
    error                   Error buffer.
    maxlength               Maximum length of the error buffer.
    persistent              True to re-use a previous persistent connection if
                            possible, false otherwise.
Notes:
    Connects to a database using key value pairs containing the database info.
    The key/value pairs should match what would be in databases.cfg.
    I.e. &apos;driver&apos; should be &apos;default&apos; or a driver name (or omitted for
    the default).  For SQLite, only the &apos;database&apos; parameter is needed in addition.
    For drivers which require external connections, more of the parameters may be
    needed.
    In general it is discouraged to use this function.  Connections should go through
    databases.cfg for greatest flexibility on behalf of users.
Error:
    Invalid KeyValues handle.
Return:
    A database connection Handle, or INVALID_HANDLE on failure.
    On failure the error buffer will be filled with a message.
">
                <Param name="Handle keyvalues"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
                <Param name="bool persistent"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_CreateTransaction" func="yes">
            <Overload retVal="native Transaction" descr="
Notes:
    Creates a new transaction object. A transaction object is a list of queries
    that can be sent to the database thread and executed as a single transaction.
Return:
    A transaction handle.
">
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_DefConnect" func="yes">
            <Overload retVal="stock Database" descr="
Params:
    error                   Error buffer.
    maxlength               Maximum length of the error buffer.
    persistent              True to re-use a previous persistent connection
                            if possible, false otherwise.
Notes:
    Creates a default SQL connection.
Return:
    A database connection Handle, or INVALID_HANDLE on failure.
    On failure the error buffer will be filled with a message.
">
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
                <Param name="bool persistent=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_EscapeString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    database                A database Handle.
    string                  String to quote.
    buffer                  Buffer to store quoted string in.
    maxlength               Maximum length of the buffer.
    written                 Optionally returns the number of bytes written.
Notes:
    Escapes a database string for literal insertion.  This is not needed
    for binding strings in prepared statements.
    Generally, database strings are inserted into queries enclosed in
    single quotes (&apos;).  If user input has a single quote in it, the
    quote needs to be escaped.  This function ensures that any unsafe
    characters are safely escaped according to the database engine and
    the database&apos;s character set.
    NOTE: SourceMod only guarantees properly escaped strings when the query
    encloses the string in &apos;&apos;. While drivers tend to allow &apos; instead, the string
    may be not be escaped (for example, on SQLite)!
Error:
    Invalid database or statement Handle.
Return:
    True on success, false if buffer is not big enough.
    The buffer must be at least 2*strlen(string)+1.
">
                <Param name="Handle database"/>
                <Param name="const char[] string"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="int &amp;written=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_Execute" func="yes">
            <Overload retVal="native bool" descr="
Params:
    statement               A statement (prepared query) Handle.
Notes:
    Executes a prepared statement.  All parameters must be bound beforehand.
Error:
    Invalid statement Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle statement"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_ExecuteTransaction" func="yes">
            <Overload retVal="native void" descr="
Params:
    db                      A database handle.
    txn                     A transaction handle.
    onSuccess               An optional callback to receive a successful transaction.
    onError                 An optional callback to receive an error message.
    data                    An optional value to pass to callbacks.
    prio                    Priority queue to use.
Notes:
    Sends a transaction to the database thread. The transaction handle is
    automatically closed. When the transaction completes, the optional
    callback is invoked.
Error:
    An invalid handle.
">
                <Param name="Handle db"/>
                <Param name="Transaction txn"/>
                <Param name="SQLTxnSuccess onSuccess = INVALID_FUNCTION"/>
                <Param name="SQLTxnFailure onError = INVALID_FUNCTION"/>
                <Param name="any data=0"/>
                <Param name="DBPriority priority=DBPrio_Normal"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FastQuery" func="yes">
            <Overload retVal="native bool" descr="
Params:
    database                A database Handle.
    query                   Query string.
    len                     Optional parameter to specify the query length, in
                            bytes.  This can be used to send binary queries that
                            have a premature terminator.
Notes:
    Executes a query and ignores the result set.
Error:
    Invalid database Handle.
Return:
    True if query succeeded, false otherwise.  Use
    SQL_GetError to find the last error.
">
                <Param name="Handle database"/>
                <Param name="const char[] query"/>
                <Param name="int len=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    query                   A query (or statement) Handle.
    field                   The field index (starting from 0).
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches a float from a field in the current row of a result set.
    If the result is NULL, a value of 0.0 will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid query Handle or field index, invalid
    type conversion requested from the database,
    or no current result set.
Return:
    A float value.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    query                   A query (or statement) Handle.
    field                   The field index (starting from 0).
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches an integer from a field in the current row of a result set.
    If the result is NULL, a value of 0 will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid query Handle or field index, invalid
    type conversion requested from the database,
    or no current result set.
Return:
    An integer value.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchMoreResults" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query Handle.
Notes:
    Advances to the next set of results.
    In some SQL implementations, multiple result sets can exist on one query.
    This is possible in MySQL with simple queries when executing a CALL
    query.  If this is the case, all result sets must be processed before
    another query is made.
Error:
    Invalid query Handle.
Return:
    True if there was another result set, false otherwise.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchRow" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Fetches a row from the current result set.  This must be
    successfully called before any results are fetched.
    If this function fails, SQL_MoreResults() can be used to
    tell if there was an error or the result set is finished.
Error:
    Invalid query Handle.
Return:
    True if a row was fetched, false otherwise.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    query                   A query (or statement) Handle.
    field                   The field index (starting from 0).
Notes:
    Returns the length of a field&apos;s data in the current row of a result
    set.  This only needs to be called for strings to determine how many
    bytes to use.  Note that the return value does not include the null
    terminator.
Error:
    Invalid query Handle or field index or no
    current result set.
Return:
    Number of bytes for the field&apos;s data size.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FetchString" func="yes">
            <Overload retVal="native int" descr="
Params:
    query                   A query (or statement) Handle.
    field                   The field index (starting from 0).
    buffer                  String buffer.
    maxlength               Maximum size of the string buffer.
    result                  Optional variable to store the status of the return value.
Notes:
    Fetches a string from a field in the current row of a result set.
    If the result is NULL, an empty string will be returned.  A NULL
    check can be done with the result parameter, or SQL_IsFieldNull().
Error:
    Invalid query Handle or field index, invalid
    type conversion requested from the database,
    or no current result set.
Return:
    Number of bytes written.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="DBResult &amp;result=DBVal_Error"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FieldNameToNum" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
    name                    Name of the field (case sensitive).
    field                   Variable to store field index in.
Notes:
    Retrieves a field index by name.
Error:
    Invalid query Handle or no current result set.
Return:
    True if found, false if not found.
">
                <Param name="Handle query"/>
                <Param name="const char[] name"/>
                <Param name="int &amp;field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FieldNumToName" func="yes">
            <Overload retVal="native void" descr="
Params:
    query                   A query (or statement) Handle.
    field                   Field number (starting from 0).
    name                    Name buffer.
    maxlength               Maximum length of the name buffer.
Notes:
    Retrieves the name of a field by index.
Error:
    Invalid query Handle, invalid field index, or
    no current result set.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
                <Param name="char[] name"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_FormatQuery" func="yes">
            <Overload retVal="native int" descr="
Params:
    database                A database Handle.
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
    All format specifiers are escaped (see SQL_EscapeString) unless the &apos;!&apos; flag is used.
Return:
    Number of cells written.
">
                <Param name="Handle database"/>
                <Param name="const char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetAffectedRows" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A database OR statement Handle.
Notes:
    Returns the number of affected rows from the last query.
Error:
    Invalid database or statement Handle.
Return:
    Number of rows affected by the last query.
">
                <Param name="Handle hndl"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetDriver" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    name                    Driver identification string, or an empty
                            string to return the default driver.
Notes:
    Returns a driver Handle from a name string.
    If the driver is not found, SourceMod will attempt
    to load an extension named dbi.&lt;name&gt;.ext.[dll|so].
Return:
    Driver Handle, or INVALID_HANDLE on failure.
">
                <Param name="const char[] name=&apos;&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetDriverIdent" func="yes">
            <Overload retVal="native void" descr="
Params:
    driver                  Driver Handle, or INVALID_HANDLE for the default driver.
    ident                   Identification string buffer.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves a driver&apos;s identification string.
    Example: &apos;mysql&apos;, &apos;sqlite&apos;
Error:
    Invalid Handle other than INVALID_HANDLE.
">
                <Param name="Handle driver"/>
                <Param name="char[] ident"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetDriverProduct" func="yes">
            <Overload retVal="native void" descr="
Params:
    driver                  Driver Handle, or INVALID_HANDLE for the default driver.
    product                 Product string buffer.
    maxlength               Maximum length of the buffer.
Notes:
    Retrieves a driver&apos;s product string.
    Example: &apos;MySQL&apos;, &apos;SQLite&apos;
Error:
    Invalid Handle other than INVALID_HANDLE.
">
                <Param name="Handle driver"/>
                <Param name="char[] product"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetError" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    A database, query, OR statement Handle.
    error                   Error buffer.
    maxlength               Maximum length of the buffer.
Notes:
    Returns the error reported by the last query.
Error:
    Invalid database, query, or statement Handle.
Return:
    True if there was an error, false otherwise.
">
                <Param name="Handle hndl"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetFieldCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Retrieves the number of fields in the last result set.
Error:
    Invalid query Handle.
Return:
    Number of fields in the current result set.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetInsertId" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A database, query, OR statement Handle.
Notes:
    Returns the last query&apos;s insertion id.
Error:
    Invalid database, query, or statement Handle.
Return:
    Last query&apos;s insertion id.
">
                <Param name="Handle hndl"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_GetRowCount" func="yes">
            <Overload retVal="native int" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Retrieves the number of rows in the last result set.
Error:
    Invalid query Handle.
Return:
    Number of rows in the current result set.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_HasResultSet" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Returns whether or not a result set exists.  This will
    return true even if 0 results were returned, but false
    on queries like UPDATE, INSERT, or DELETE.
Error:
    Invalid query Handle.
Return:
    True if there is a result set, false otherwise.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_IsFieldNull" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
    field                   The field index (starting from 0).
Notes:
    Returns whether a field&apos;s data in the current row of a result set is
    NULL or not.  NULL is an SQL type which means &apos;no data.&apos;
Error:
    Invalid query Handle or field index, or no
    current result set.
Return:
    True if data is NULL, false otherwise.
">
                <Param name="Handle query"/>
                <Param name="int field"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_IsSameConnection" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl1                   First database Handle.
    hndl2                   Second database Handle.
Notes:
    Tells whether two database handles both point to the same database
    connection.
Error:
    Invalid Handle.
Return:
    True if the Handles point to the same
    connection, false otherwise.
">
                <Param name="Handle hndl1"/>
                <Param name="Handle hndl2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_LockDatabase" func="yes">
            <Overload retVal="native void" descr="
Params:
    database                A database Handle.
Notes:
    Locks a database so threading operations will not interrupt.
    If you are using a database Handle for both threading and non-threading,
    this MUST be called before doing any set of non-threading DB operations.
    Otherwise you risk corrupting the database driver&apos;s memory or network
    connection.
    Leaving a lock on a database and then executing a threaded query results
    in a dead lock! Make sure to call SQL_UnlockDatabase()!
    If the lock cannot be acquired, the main thread will pause until the
    threaded operation has concluded.
Error:
    Invalid database Handle.
">
                <Param name="Handle database"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_MoreRows" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Returns if there are more rows.
Error:
    Invalid query Handle.
Return:
    True if there are more rows, false otherwise.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_PrepareQuery" func="yes">
            <Overload retVal="native DBStatement" descr="
Params:
    database                A database Handle.
    query                   Query string.
    error                   Error buffer.
    maxlength               Maximum size of the error buffer.
Notes:
    Creates a new prepared statement query.  Prepared statements can
    be executed any number of times.  They can also have placeholder
    parameters, similar to variables, which can be bound safely and
    securely (for example, you do not need to quote bound strings).
    Statement handles will work in any function that accepts a Query handle.
Error:
    Invalid database Handle.
Return:
    A new statement Handle on success, INVALID_HANDLE
    otherwise.  The Handle must be freed with CloseHandle().
">
                <Param name="Handle database"/>
                <Param name="const char[] query"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_Query" func="yes">
            <Overload retVal="native DBResultSet" descr="
Params:
    database                A database Handle.
    query                   Query string.
    len                     Optional parameter to specify the query length, in
                            bytes.  This can be used to send binary queries that
                            have a premature terminator.
Notes:
    Executes a simple query and returns a new query Handle for
    receiving the results.
Error:
    Invalid database Handle.
Return:
    A new Query Handle on success, INVALID_HANDLE
    otherwise.  The Handle must be freed with CloseHandle().
">
                <Param name="Handle database"/>
                <Param name="const char[] query"/>
                <Param name="int len=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_ReadDriver" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    database                Database Handle.
    ident                   Option buffer to store the identification string.
    ident_length            Maximum length of the buffer.
Notes:
    Reads the driver of an opened database.
Return:
    Driver Handle.
">
                <Param name="Handle database"/>
                <Param name="char[] ident=&apos;&apos;"/>
                <Param name="int ident_length=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_Rewind" func="yes">
            <Overload retVal="native bool" descr="
Params:
    query                   A query (or statement) Handle.
Notes:
    Rewinds a result set back to the first result.
Error:
    Invalid query Handle or no current result set.
Return:
    True on success, false otherwise.
">
                <Param name="Handle query"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_SetCharset" func="yes">
            <Overload retVal="native bool" descr="
Params:
    database                Database Handle.
    characterset            The character set string to change to.
Notes:
    Sets the character set of the current connection.
    Like SET NAMES .. in mysql, but stays after connection problems.
    Example: &apos;utf8&apos;, &apos;latin1&apos;
Return:
    True, if character set was changed, false otherwise.
">
                <Param name="Handle database"/>
                <Param name="const char[] charset"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_TConnect" func="yes">
            <Overload retVal="native void" descr="
Params:
    callback                Callback; new Handle will be in hndl, owner is the driver.
                            If no driver was found, the owner is INVALID_HANDLE.
    name                    Database name.
    data                    Extra data value to pass to the callback.
Notes:
    Connects to a database via a thread.  This can be used instead of
    SQL_Connect() if you wish for non-blocking functionality.
    It is not necessary to use this to use threaded queries.  However, if you
    don&apos;t (or you mix threaded/non-threaded queries), you should see
    SQL_LockDatabase().
">
                <Param name="SQLTCallback callback"/>
                <Param name="const char[] name=&apos;default&apos;"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_TQuery" func="yes">
            <Overload retVal="native void" descr="
Params:
    database                A database Handle.
    callback                Callback; database is in &apos;owner&apos; and the query Handle
                            is passed in &apos;hndl&apos;.
    query                   Query string.
    data                    Extra data value to pass to the callback.
    prio                    Priority queue to use.
Notes:
    Executes a simple query via a thread.  The query Handle is passed through
    the callback.
    The database Handle returned through the callback is always a new Handle,
    and if necessary, SQL_IsSameConnection() should be used to test against
    other connections.
    The query Handle returned through the callback is temporary and destroyed
    at the end of the callback.  If you need to hold onto it, use CloneHandle().
Error:
    Invalid database Handle.
">
                <Param name="Handle database"/>
                <Param name="SQLTCallback callback"/>
                <Param name="const char[] query"/>
                <Param name="any data=0"/>
                <Param name="DBPriority prio=DBPrio_Normal"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQL_UnlockDatabase" func="yes">
            <Overload retVal="native void" descr="
Params:
    database                A database Handle.
Notes:
    Unlocks a database so threading operations may continue.
Error:
    Invalid database Handle.
">
                <Param name="Handle database"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SQLite_UseDatabase" func="yes">
            <Overload retVal="stock Database" descr="
Params:
    database                Database name.
    error                   Error buffer.
    maxlength               Maximum length of the error buffer.
Notes:
    Grabs a handle to an SQLite database, creating one if it does not exist.
    Unless there are extenuating circumstances, you should consider using &apos;sourcemod-local&apos; as the
    database name.  This provides some unification between plugins on behalf of users.
    As a precaution, you should always create some sort of unique prefix to your table names so
    there are no conflicts, and you should never drop or modify tables that you do not own.
Return:
    A database connection Handle, or INVALID_HANDLE on failure.
    On failure the error buffer will be filled with a message.
">
                <Param name="const char[] database"/>
                <Param name="char[] error"/>
                <Param name="int maxlength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ScaleVector" func="yes">
            <Overload retVal="stock void" descr="
Params:
    vec                     Vector.
    scale                   Scale value.
Notes:
    Scales a vector.
">
                <Param name="float vec[3]"/>
                <Param name="float scale"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendConVarValue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client index
    convar                  ConVar handle
    value                   String value to send
Notes:
    Replicates a convar value to a specific client. This does not change the actual convar value.
Error:
    Invalid client index, client not in game, or client is fake
Return:
    True on success, false on failure
">
                <Param name="int client"/>
                <Param name="Handle convar"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendPanelToClient" func="yes">
            <Overload retVal="native bool" descr="
Params:
    panel                   A MenuPanel Handle.
    client                  A client to draw to.
    handler                 The MenuHandler function to catch actions with.
    time                    Time to hold the menu for.
Notes:
    Sends a panel to a client.  Unlike full menus, the handler
    function will only receive the following actions, both of
    which will have INVALID_HANDLE for a menu, and the client
    as param1.
    MenuAction_Select (param2 will be the key pressed)
    MenuAction_Cancel (param2 will be the reason)
    Also, if the menu fails to display, no callbacks will be called.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle panel"/>
                <Param name="int client"/>
                <Param name="MenuHandler handler"/>
                <Param name="int time"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ServerCommand" func="yes">
            <Overload retVal="native void" descr="
Params:
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Executes a server command as if it were on the server console (or RCON)
">
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ServerCommandEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    buffer                  String to store command result into.
    maxlen                  Length of buffer.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Executes a server command as if it were on the server console (or RCON)
    and stores the printed text into buffer.
    Warning: This calls ServerExecute internally and may have issues if
    certain commands are in the buffer, only use when you really need
    the response.
    Also, on L4D2 this will not print the command output to the server console.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ServerExecute" func="yes">
            <Overload retVal="native void" descr="
Notes:
    Executes every command in the server&apos;s command buffer, rather than once per frame.
">
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdmGroupAddFlag" func="yes">
            <Overload retVal="native void" descr="
Params:
    id                      Group id.
    flag                    Admin flag to toggle.
    enabled                 True to set the flag, false to unset/disable.
Notes:
    Adds or removes a flag from a group&apos;s flag set.
    These are called &apos;add flags&apos; because they add to a user&apos;s flags.
">
                <Param name="GroupId id"/>
                <Param name="AdminFlag flag"/>
                <Param name="bool enabled"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdmGroupImmuneFrom" func="yes">
            <Overload retVal="native void" descr="
Params:
    id                      Group id.
    other_id                Group id to receive immunity to.
Notes:
    Adds immunity to a specific group.
">
                <Param name="GroupId id"/>
                <Param name="GroupId other_id"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdmGroupImmunityLevel" func="yes">
            <Overload retVal="native int" descr="
Params:
    gid                     Group Id.
    level                   Immunity level value.
Notes:
    Sets a group&apos;s immunity level.
Return:
    Old immunity level value.
">
                <Param name="GroupId gid"/>
                <Param name="int level"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdminFlag" func="yes">
            <Overload retVal="native void" descr="
Params:
    id                      AdminId index of the admin.
    flag                    Admin flag to use.
    enabled                 True to enable, false to disable.
Notes:
    Sets whether or not a flag is enabled on an admin.
">
                <Param name="AdminId id"/>
                <Param name="AdminFlag flag"/>
                <Param name="bool enabled"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdminImmunityLevel" func="yes">
            <Overload retVal="native int" descr="
Params:
    id                      Admin Id.
    level                   Immunity level value.
Notes:
    Sets an admin&apos;s immunity level.
Return:
    Old immunity level value.
">
                <Param name="AdminId id"/>
                <Param name="int level"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAdminPassword" func="yes">
            <Overload retVal="native void" descr="
Params:
    id                      AdminId index of the admin.
    password                String containing the password.
Notes:
    Sets a password on an admin.
">
                <Param name="AdminId id"/>
                <Param name="const char[] password"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetArrayArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    values                  Array to copy.
    size                    If not set, assumes the buffer size is equal to the
                            blocksize.  Otherwise, the size passed is used.
Notes:
    Sets an array of cells in an array.
Error:
    Invalid Handle or invalid index.
Return:
    Number of cells copied.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="const any[] values"/>
                <Param name="int size=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetArrayCell" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    value                   Cell value to set.
    block                   Optionally specify which block to write to
                            (useful if the blocksize &gt; 0).
    asChar                  Optionally set as a byte instead of a cell.
Notes:
    Sets a cell value in an array.
Error:
    Invalid Handle, invalid index, or invalid block.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="any value"/>
                <Param name="int block=0"/>
                <Param name="bool asChar=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetArrayString" func="yes">
            <Overload retVal="native int" descr="
Params:
    array                   Array Handle.
    index                   Index in the array.
    value                   String value to set.
Notes:
    Sets a string value in an array.
Error:
    Invalid Handle or invalid index.
Return:
    Number of characters copied.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetAuthIdCookie" func="yes">
            <Overload retVal="native void" descr="
Params:
    authID                  String Auth/STEAM ID of player to set.
    cookie                  Client preference cookie handle.
    value                   String value to set.
Notes:
    Sets the value of a Client preference cookie based on an authID string.
Error:
    Invalid cookie handle.
">
                <Param name="const char[] authID"/>
                <Param name="Handle cookie"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientCookie" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    cookie                  Client preference cookie handle.
    value                   String value to set.
Notes:
    Set the value of a Client preference cookie.
Error:
    Invalid cookie handle or invalid client index.
">
                <Param name="int client"/>
                <Param name="Handle cookie"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientInfo" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    key                     Key string.
    value                   Value string.
Notes:
    Sets values to client info buffer keys and notifies the engine of the change.
    The change does not get propagated to mods until the next frame.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientLanguage" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    language                Language number.
Notes:
    Sets the language number of a client.
Error:
    Invalid client index or client not connected.
">
                <Param name="int client"/>
                <Param name="int language"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientListeningFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  The client index
    flags                   The voice flags
Notes:
    Set the client listening flags.
">
                <Param name="int client"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientName" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    name                    New name.
Notes:
    Changes a client&apos;s name.
Error:
    Invalid client index, or client not connected.
">
                <Param name="int client"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetClientViewEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    entity                  Entity index.
Notes:
    Sets a client&apos;s &apos;viewing entity.&apos;
Error:
    Invalid client or entity, lack of mod support, or client not in
    game.
">
                <Param name="int client"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetCmdReplySource" func="yes">
            <Overload retVal="native ReplySource" descr="
Params:
    source                  New ReplySource value.
Notes:
    Sets the current reply source of a command.
    Only use this if you know what you are doing.  You should save the old value
    and restore it once you are done.
Return:
    Old ReplySource value.
">
                <Param name="ReplySource source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetCommandFlags" func="yes">
            <Overload retVal="native bool" descr="
Params:
    name                    Name of the command.
    flags                   A bitstring containing the FCVAR_* flags to enable.
Notes:
    Sets the bitstring of flags of a command.
Return:
    True on success, otherwise false.
">
                <Param name="const char[] name"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    value                   New boolean value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the boolean value of a console variable.
    Note: The replicate and notify params are only relevant for the original, Dark Messiah, and
    Episode 1 engines. Newer engines automatically do these things when the convar value is changed.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="bool value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarBounds" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    type                    Type of bound to set, ConVarBound_Lower or ConVarBound_Upper
    set                     If set to true, convar will use specified bound. If false, bound will be removed.
    value                   Floating point value to use as the specified bound.
Notes:
    Sets the specified bound of a console variable.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="ConVarBounds type"/>
                <Param name="bool set"/>
                <Param name="float value=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    flags                   A bitstring containing the FCVAR_* flags to enable.
Notes:
    Sets the bitstring of flags on a console variable.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    value                   New floating point value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the floating point value of a console variable.
    Note: The replicate and notify params are only relevant for the original, Dark Messiah, and
    Episode 1 engines. Newer engines automatically do these things when the convar value is changed.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="float value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    value                   New integer value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the integer value of a console variable.
    Note: The replicate and notify params are only relevant for the original, Dark Messiah, and
    Episode 1 engines. Newer engines automatically do these things when the convar value is changed.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="int value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetConVarString" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    value                   New string value.
    replicate               If set to true, the new convar value will be set on all clients.
                            This will only work if the convar has the FCVAR_REPLICATED flag
                            and actually exists on clients.
    notify                  If set to true, clients will be notified that the convar has changed.
                            This will only work if the convar has the FCVAR_NOTIFY flag.
Notes:
    Sets the string value of a console variable.
    Note: The replicate and notify params are only relevant for the original, Dark Messiah, and
    Episode 1 engines. Newer engines automatically do these things when the convar value is changed.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle convar"/>
                <Param name="const char[] value"/>
                <Param name="bool replicate=false"/>
                <Param name="bool notify=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetCookieMenuItem" func="yes">
            <Overload retVal="native void" descr="
Params:
    handler                 A MenuHandler callback function.
    info                    Data to pass to the callback.
    display                 Text to show on the menu.
Notes:
    Adds a new item to the client cookie settings menu.
    Note: This only adds the top level menu item. You need to handle any submenus from the callback.
Error:
    Invalid cookie handle.
">
                <Param name="CookieMenuHandler handler"/>
                <Param name="any info"/>
                <Param name="const char[] display"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetCookiePrefabMenu" func="yes">
            <Overload retVal="native void" descr="
Params:
    cookie                  Client preference cookie handle.
    type                    A CookieMenu prefab menu type.
    display                 Text to show on the menu.
    handler                 Optional handler callback for translations and output on selection
    info                    Info data to pass to the callback.
Notes:
    Add a new prefab item to the client cookie settings menu.
    Note: This handles everything automatically and does not require a callback
Error:
    Invalid cookie handle.
">
                <Param name="Handle cookie"/>
                <Param name="CookieMenu type"/>
                <Param name="const char[] display"/>
                <Param name="CookieMenuHandler handler=INVALID_FUNCTION"/>
                <Param name="any info=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEdictFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    edict                   Index of the entity.
    flags                   Flags to set.
Notes:
    Sets the flags on an edict.  These are not the same as entity flags.
Error:
    Invalid edict index.
">
                <Param name="int edict"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntData" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    value                   Value to set.
    size                    Number of bytes to write (valid values are 1, 2, or 4).
    changeState             If true, change will be sent over the network.
Notes:
    Peeks into an entity&apos;s object data and sets the integer value at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="any value"/>
                <Param name="int size=4"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntDataArray" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    offset                  Offset to use.
    array                   Array of values to copy.
    arraySize               Number of values to copy.
    dataSize                Size of each value in bytes (1, 2, or 4).
    changeState             True to set the network state as changed; false otherwise.
Notes:
    Copies an array of cells to an entity at a given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="const int[] array"/>
                <Param name="int arraySize"/>
                <Param name="int dataSize=4"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntDataEnt2" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    other                   Entity index to set, or -1 to clear.
    changeState             If true, change will be sent over the network.
Notes:
    Peeks into an entity&apos;s object data and sets the entity index at the
    given offset.
    Note: This will only work on offsets that are stored as &apos;entity
    handles&apos; (which usually looks like m_h* in properties).  These
    are not SourceMod Handles, but internal Source structures.
Error:
    Invalid input entity, or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="int other"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntDataFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    value                   Value to set.
    changeState             If true, change will be sent over the network.
Notes:
    Peeks into an entity&apos;s object data and sets the float value at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="float value"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntDataString" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    buffer                  String to set.
    maxlen                  Maximum length of bytes to write.
    changeState             If true, change will be sent over the network.
Notes:
    Peeks into an entity&apos;s object data and sets the string at
    the given offset.
Error:
    Invalid entity or offset out of reasonable bounds.
Return:
    Number of non-null bytes written.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="const char[] buffer"/>
                <Param name="int maxlen"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntDataVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Edict index.
    offset                  Offset to use.
    vec                     Vector to set.
    changeState             If true, change will be sent over the network.
Notes:
    Peeks into an entity&apos;s object data and sets the vector at the given
    offset.
    Both a Vector and a QAngle are three floats.  This is a
    convenience function and will work with both types.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="int offset"/>
                <Param name="const float vec[3]"/>
                <Param name="bool changeState=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntProp" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    value                   Value to set.
    size                    Number of bytes to write (valid values are 1, 2, or 4).
                            This value is auto-detected, and the size parameter is
                            only used as a fallback in case detection fails.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Sets an integer value in an entity&apos;s property.
    This function is considered safer and more robust over SetEntData,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="any value"/>
                <Param name="int size=4"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntPropEnt" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    other                   Entity index to set, or -1 to unset.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Sets an entity index in an entity&apos;s property.
    This function is considered safer and more robust over SetEntDataEnt*,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="int other"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntPropFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    value                   Value to set.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Sets a float value in an entity&apos;s property.
    This function is considered safer and more robust over SetEntDataFloat,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity or offset out of reasonable bounds.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="float value"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntPropString" func="yes">
            <Overload retVal="native int" descr="
Params:
    entity                  Edict index.
    type                    Property type.
    prop                    Property to use.
    buffer                  String to set.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Sets a network property as a string.
Error:
    Invalid entity, offset out of reasonable bounds, or property is not a valid string.
Return:
    Number of non-null bytes written.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="const char[] buffer"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntPropVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity/edict index.
    type                    Property type.
    prop                    Property name.
    vec                     Vector to set.
    element                 Element # (starting from 0) if property is an array.
Notes:
    Sets a vector of floats in an entity, given a named network property.
    This function is considered safer and more robust over SetEntDataVector,
    because it performs strict offset checking and typing rules.
Error:
    Invalid entity, property not found, or property not
    actually a vector data type.
">
                <Param name="int entity"/>
                <Param name="PropType type"/>
                <Param name="const char[] prop"/>
                <Param name="const float vec[3]"/>
                <Param name="int element=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
    flags                   Entity flags, see entity flag defines above.
Notes:
    Sets an entity&apos;s flags.
    The entity flags as defined above are internally translated by SM
    to match the current game&apos;s expected value for the flags as
    the actual values can differ per engine.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityGravity" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    amount                  Gravity to set (default = 1.0, half = 0.5, double = 2.0).
Notes:
    Sets an entity&apos;s gravity.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="float amount"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityHealth" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    amount                  Health amount.
Notes:
    Sets an entity&apos;s health
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="int amount"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityModel" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
    model                   Model name.
Notes:
    Sets the model to a given entity.
Error:
    Invalid entity index, or no mod support.
">
                <Param name="int entity"/>
                <Param name="const char[] model"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityMoveType" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    mt                      Movetype, see enum above.
Notes:
    Sets an entity&apos;s movetype.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="MoveType mt"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityRenderColor" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index
    r                       Amount of red (0-255)
    g                       Amount of green (0-255)
    b                       Amount of blue (0-255)
    a                       Amount of alpha (0-255)
Notes:
    Sets an entity&apos;s color.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="int r=255"/>
                <Param name="int g=255"/>
                <Param name="int b=255"/>
                <Param name="int a=255"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityRenderFx" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    fx                      RenderFx value.
Notes:
    Sets an entity&apos;s render Fx.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="RenderFx fx"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEntityRenderMode" func="yes">
            <Overload retVal="stock void" descr="
Params:
    entity                  Entity index.
    mode                    RenderMode value.
Notes:
    Sets an entity&apos;s render mode.
Error:
    Invalid entity index, or lack of mod compliance.
">
                <Param name="int entity"/>
                <Param name="RenderMode mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEventBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    value                   New boolean value.
Notes:
    Sets the boolean value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="bool value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEventBroadcast" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to an event from an event hook.
    dontBroadcast           True to disable broadcasting, false otherwise.
Notes:
    Sets whether an event&apos;s broadcasting will be disabled or not.
    This has no effect on events Handles that are not from HookEvent
    or HookEventEx callbacks.
Error:
    Invalid Handle.
">
                <Param name="Handle event"/>
                <Param name="bool dontBroadcast"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEventFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    value                   New floating point value.
Notes:
    Sets the floating point value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEventInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    value                   New integer value.
Notes:
    Sets the integer value of a game event&apos;s key.
    Integer value refers to anything that can be reduced to an integer.
    The various size specifiers, such as &apos;byte&apos; and &apos;short&apos; are still
    integers, and only refer to how much data will actually be sent
    over the network (if applicable).
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEventString" func="yes">
            <Overload retVal="native void" descr="
Params:
    event                   Handle to the event.
    key                     Name of event key.
    value                   New string value.
Notes:
    Sets the string value of a game event&apos;s key.
Error:
    Invalid or corrupt Handle.
">
                <Param name="Handle event"/>
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetFailState" func="yes">
            <Overload retVal="native void" descr="
Params:
    string                  Format specifier string.
    ...                     Formatting arguments.
Notes:
    Causes the plugin to enter a failed state.  An error will be thrown and
    the plugin will be paused until it is unloaded or reloaded.
    For backwards compatibility, if no extra arguments are passed, no
    formatting is applied.  If one or more additional arguments is passed,
    the string is formatted using Format().  If any errors are encountered
    during formatting, both the format specifier string and an additional
    error message are written.
    This function does not return, and no further code in the plugin is
    executed.
Error:
    Always throws SP_ERROR_ABORT.
">
                <Param name="const char[] string"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetFakeClientConVar" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    cvar                    ConVar name.
    value                   ConVar value.
Notes:
    Sets a convar value on a fake client.
Error:
    Invalid client index, client not connected,
    or client not a fake client.
">
                <Param name="int client"/>
                <Param name="const char[] cvar"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetFilePermissions" func="yes">
            <Overload retVal="native bool" descr="
Params:
    path                    Path to the file.
    mode                    Permissions to set.
Notes:
    Changes a file or directories permissions.
Return:
    True on success, false otherwise.
">
                <Param name="const char[] path"/>
                <Param name="int mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetGlobalTransTarget" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index or LANG_SERVER.
Notes:
    Sets the global language target.  This is useful for creating functions
    that will be compatible with the %t format specifier.  Note that invalid
    indexes can be specified but the error will occur during translation,
    not during this function call.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetHudTextParams" func="yes">
            <Overload retVal="native void" descr="
Params:
    x                       x coordinate, from 0 to 1.  -1.0 is the center.
    y                       y coordinate, from 0 to 1.  -1.0 is the center.
    holdTime                Number of seconds to hold the text.
    r                       Red color value.
    g                       Green color value.
    b                       Blue color value.
    a                       Alpha transparency value.
    effect                  0/1 causes the text to fade in and fade out.
                            2 causes the text to flash[?].
    fxTime                  Duration of chosen effect (may not apply to all effects).
    fadeIn                  Number of seconds to spend fading in.
    fadeOut                 Number of seconds to spend fading out.
Notes:
    Sets the HUD parameters for drawing text.  These parameters are stored
    globally, although nothing other than this function and SetHudTextParamsEx
    modify them.
    You must call this function before drawing text.  If you are drawing
    text to multiple clients, you can set the parameters once, since
    they won&apos;t be modified.  However, as soon as you pass control back
    to other plugins, you must reset the parameters next time you draw.
">
                <Param name="float x"/>
                <Param name="float y"/>
                <Param name="float holdTime"/>
                <Param name="int r"/>
                <Param name="int g"/>
                <Param name="int b"/>
                <Param name="int a"/>
                <Param name="int effect = 0"/>
                <Param name="float fxTime=6.0"/>
                <Param name="float fadeIn=0.1"/>
                <Param name="float fadeOut=0.2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetHudTextParamsEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    x                       x coordinate, from 0 to 1.  -1.0 is the center.
    y                       y coordinate, from 0 to 1.  -1.0 is the center.
    holdTime                Number of seconds to hold the text.
    color1                  First color set, array values being [red, green, blue, alpha]
    color2                  Second color set, array values being [red, green, blue, alpha]
    effect                  0/1 causes the text to fade in and fade out.
                            2 causes the text to flash[?].
    fxTime                  Duration of chosen effect (may not apply to all effects).
    fadeIn                  Number of seconds to spend fading in.
    fadeOut                 Number of seconds to spend fading out.
Notes:
    Sets the HUD parameters for drawing text.  These parameters are stored
    globally, although nothing other than this function and SetHudTextParams
    modify them.
    This is the same as SetHudTextParams(), except it lets you set the alternate
    color for when effects require it.
">
                <Param name="float x"/>
                <Param name="float y"/>
                <Param name="float holdTime"/>
                <Param name="int color1[4]"/>
                <Param name="int color2[4]={255,255,255,0}"/>
                <Param name="int effect = 0"/>
                <Param name="float fxTime=6.0"/>
                <Param name="float fadeIn=0.1"/>
                <Param name="float fadeOut=0.2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetLightStyle" func="yes">
            <Overload retVal="native void" descr="
Params:
    style                   Light style (from 0 to MAX_LIGHTSTYLES-1)
    value                   Light value string (see world.cpp/light.cpp in dlls)
Notes:
    Sets a light style.
Error:
    Light style index is out of range.
">
                <Param name="int style"/>
                <Param name="const char[] value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetListenOverride" func="yes">
            <Overload retVal="native bool" descr="
Params:
    iReceiver               The listener index.
    iSender                 The sender index.
    override                The override of the receiver&apos;s ability to listen to the sender.
Notes:
    Override the receiver&apos;s ability to listen to the sender.
Return:
    True if successful otherwise false.
">
                <Param name="int iReceiver"/>
                <Param name="int iSender"/>
                <Param name="ListenOverride override"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMapListCompatBind" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Configuration name that would be used with ReadMapList().
    file                    Default file to use.
Notes:
    Makes a compatibility binding for map lists.  For example, if a function previously used
    &apos;clam.cfg&apos; for map lists, this function will insert a &apos;fake&apos; binding to &apos;clam.cfg&apos; that
    will be overridden if it&apos;s in the maplists.cfg file.
">
                <Param name="const char[] name"/>
                <Param name="const char[] file"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuExitBackButton" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
    button                  True to enable the button, false to remove it.
Notes:
    Sets whether or not the menu has an &apos;exit back&apos; button. By default, menus
    do not have an exit back button.
    Exit Back buttons appear as &apos;Back&apos; on page 1 of paginated menus and have
    functionality defined by the user in MenuEnd_ExitBack.
Error:
    Invalid Handle.
">
                <Param name="Handle menu"/>
                <Param name="bool button"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuExitButton" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    button                  True to enable the button, false to remove it.
Notes:
    Sets whether or not the menu has an exit button.  By default, paginated menus
    have an exit button.
    If a menu&apos;s pagination is changed to MENU_NO_PAGINATION, and the pagination
    was previously a different value, then the Exit button status is changed to
    false.  It must be explicitly re-enabled afterwards.
    If a non-paginated menu has an exit button, then at most 9 items will be
    displayed.
Error:
    Invalid Handle.
Return:
    True if allowed; false on failure.
">
                <Param name="Handle menu"/>
                <Param name="bool button"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuNoVoteButton" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    button                  True to enable the button, false to remove it.
Notes:
    Sets whether or not the menu has a &apos;no vote&apos; button in slot 1.
    By default, menus do not have a no vote button.
Error:
    Invalid Handle.
Return:
    True if allowed; false on failure.
">
                <Param name="Handle menu"/>
                <Param name="bool button"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuOptionFlags" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
    flags                   A new bitstring of MENUFLAG bits.
Notes:
    Sets a menu&apos;s option flags.
    If a certain bit is not supported, it will be stripped before being set.
    See SetMenuExitButton() for information on Exit buttons.
    See SetMenuExitBackButton() for information on Exit Back buttons.
Error:
    Invalid Handle.
">
                <Param name="Handle menu"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuPagination" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Handle to the menu.
    itemsPerPage            Number of items per page, or MENU_NO_PAGINATION.
Notes:
    Sets whether the menu should be paginated or not.
    If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set,
    then the exit button flag is removed.  It can be re-applied if desired.
Error:
    Invalid Handle.
Return:
    True on success, false if pagination is too high or
    low.
">
                <Param name="Handle menu"/>
                <Param name="int itemsPerPage"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetMenuTitle" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
    fmt                     Message string format
    ...                     Message string arguments.
Notes:
    Sets the menu&apos;s default title/instruction message.
Error:
    Invalid Handle.
">
                <Param name="Handle menu"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetNativeArray" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   Parameter number, starting from 1.
    local                   Local array to copy from.
    size                    Size of the local array to copy.
Notes:
    Copies a local array into a native parameter array (always by reference).
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    SP_ERROR_NONE on success, anything else on failure.
">
                <Param name="int param"/>
                <Param name="const any[] local"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetNativeCellRef" func="yes">
            <Overload retVal="native void" descr="
Params:
    param                   Parameter number, starting from 1.
    value                   Cell value at the parameter number to set by reference.
Notes:
    Sets a cell from a native parameter, by reference.
Error:
    Invalid parameter number or calling from a non-native function.
">
                <Param name="int param"/>
                <Param name="any value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetNativeString" func="yes">
            <Overload retVal="native int" descr="
Params:
    param                   Parameter number, starting from 1.
    source                  Source string to use.
    maxlength               Maximum number of bytes to write.
    utf8                    If false, string will not be written
                            with UTF8 safety.
    bytes                   Optionally store the number of bytes written.
Notes:
    Sets a string in a native parameter.
    Output conditions are undefined on failure.
Error:
    Invalid parameter number or calling from a non-native function.
Return:
    SP_ERROR_NONE on success, any other integer on failure.
">
                <Param name="int param"/>
                <Param name="const char[] source"/>
                <Param name="int maxlength"/>
                <Param name="bool utf8=true"/>
                <Param name="int &amp;bytes=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetNextMap" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Next map to set.
Notes:
    Sets SourceMod&apos;s internal nextmap.
    Equivalent to changing sm_nextmap but with an added validity check.
Return:
    True if the nextmap was set, false if map was invalid.
">
                <Param name="const char[] map"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetPackPosition" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    position                New position to set. Must have been previously retrieved from a call to GetPackPosition.
Notes:
    Sets the read/write position in a data pack.
Error:
    Invalid handle, or position is beyond the pack bounds.
">
                <Param name="Handle pack"/>
                <Param name="DataPackPos position"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetPanelCurrentKey" func="yes">
            <Overload retVal="native bool" descr="
Params:
    panel                   A MenuPanel Handle.
    key                     Key that is greater or equal to
                            GetPanelCurrentKey().
Notes:
    Sets the next key position.  This cannot be used
    to traverse backwards.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle panel"/>
                <Param name="int key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetPanelKeys" func="yes">
            <Overload retVal="native bool" descr="
Params:
    panel                   A MenuPanel Handle.
    keys                    An integer where each bit N allows key
                            N+1 to be selected.  If no keys are selectable,
                            then key 0 (bit 9) is automatically set.
Notes:
    Sets the selectable key map of a panel.  This is not supported by
    all styles (only by Radio, as of this writing).
Return:
    True if supported, false otherwise.
">
                <Param name="Handle panel"/>
                <Param name="int keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetPanelTitle" func="yes">
            <Overload retVal="native void" descr="
Params:
    panel                   A MenuPanel Handle.
    text                    Text to set as the title.
    onlyIfEmpty             If true, the title will only be set if no title is set.
Notes:
    Sets the panel&apos;s title.
Error:
    Invalid Handle.
">
                <Param name="Handle panel"/>
                <Param name="const char[] text"/>
                <Param name="bool onlyIfEmpty=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetRandomSeed" func="yes">
            <Overload retVal="native void" descr="
Params:
    seed                    Seed value.
Notes:
    Sets the seed value for the global Half-Life 2 Random Stream.
">
                <Param name="int seed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetStringTableData" func="yes">
            <Overload retVal="native int" descr="
Params:
    tableidx                A string table index.
    stringidx               A string index.
    userdata                User data string that will be set.
    length                  Length of user data string. This should include the null terminator.
Notes:
    Sets the user data associated with a given string index.
Error:
    Invalid string table index or string index.
Return:
    Number of bytes written to the buffer (UTF-8 safe).
">
                <Param name="int tableidx"/>
                <Param name="int stringidx"/>
                <Param name="const char[] userdata"/>
                <Param name="int length"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTeamScore" func="yes">
            <Overload retVal="native void" descr="
Params:
    index                   Team index.
    value                   New score value.
Notes:
    Sets the score of a team based on a team index.
    Note: This native should not be called before OnMapStart.
Error:
    Invalid team index.
">
                <Param name="int index"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTestContext" func="yes">
            <Overload retVal="stock void" descr="
Notes:
    vim: set ts=4 sw=4 tw=99 noet :
    =============================================================================
    SourceMod (C)2004-2014 AlliedModders LLC.  All rights reserved.
    =============================================================================
    This file is part of the SourceMod/SourcePawn SDK.
    This program is free software; you can redistribute it and/or modify it under
    the terms of the GNU General Public License, version 3.0, as published by the
    Free Software Foundation.
    This program is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.
    You should have received a copy of the GNU General Public License along with
    this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
    As a special exception, AlliedModders LLC gives you permission to link the
    code of this program (as well as its derivative works) to &apos;Half-Life 2,&apos; the
    &apos;Source Engine,&apos; the &apos;SourcePawn JIT,&apos; and any Game MODs that run on software
    by the Valve Corporation.  You must obey the GNU General Public License in
    all respects for all other code used.  Additionally, AlliedModders LLC grants
    this exception to all derivative works.  AlliedModders LLC defines further
    exceptions, found in LICENSE.txt (as of this writing, version JULY-31-2007),
    or &lt;http://www.sourcemod.net/license.php&gt;.
    Version: $Id$
">
                <Param name="const char[] context"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTopMenuTitleCaching" func="yes">
            <Overload retVal="native void" descr="
Params:
    topmenu                 TopMenu Handle.
    cache_titles            Cache the menu titles and don&apos;t call the handler with
                            TopMenuAction_DisplayTitle everytime the menu is drawn?
Notes:
    Change the menu title caching behavior of the TopMenu. By default the
    titles are cached to reduce overhead. If you need dynamic menu titles, which
    can change everytime the menu is displayed to a user, set this to false.
Error:
    Invalid TopMenu Handle
">
                <Param name="Handle topmenu"/>
                <Param name="bool cache_titles"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTrieArray" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    array                   Array to store.
    num_items               Number of items in the array.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets an array value in a Map, either inserting a new entry or replacing an old one.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="const any[] array"/>
                <Param name="int num_items"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTrieString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    value                   String to store.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets a string value in a Map, either inserting a new entry or replacing an old one.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="const char[] value"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTrieValue" func="yes">
            <Overload retVal="native bool" descr="
Params:
    map                     Map Handle.
    key                     Key string.
    value                   Value to store at this key.
    replace                 If false, operation will fail if the key is already set.
Notes:
    Sets a value in a hash map, either inserting a new entry or replacing an old one.
Error:
    Invalid Handle.
Return:
    True on success, false on failure.
">
                <Param name="Handle map"/>
                <Param name="const char[] key"/>
                <Param name="any value"/>
                <Param name="bool replace=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetURandomSeed" func="yes">
            <Overload retVal="native void" descr="
Params:
    seeds                   Array of numbers to use as seeding data.
    numSeeds                Number of seeds in the seeds array.
Notes:
    Seeds a plugin&apos;s uniform random number stream. This is done automatically,
    so normally it is totally unnecessary to call this.
">
                <Param name="const int[] seeds"/>
                <Param name="int numSeeds"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetURandomSeedSimple" func="yes">
            <Overload retVal="stock void" descr="
Params:
    seed                    Single seed value.
Notes:
    Seeds a plugin&apos;s uniform random number stream. This is done automatically,
    so normally it is totally unnecessary to call this.
">
                <Param name="int seed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetUserAdmin" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    id                      AdminId to set.  INVALID_ADMIN_ID removes admin permissions.
    temp                    True if the id should be freed on disconnect.
Notes:
    Sets a client&apos;s AdminId.
Error:
    Invalid client index, client not connected, or bogus AdminId.
">
                <Param name="int client"/>
                <Param name="AdminId id"/>
                <Param name="bool temp=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetUserFlagBits" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    flags                   Bitstring of flags to set on client.
Notes:
    Sets access flags on a client using bits instead of flags.  If the
    client is not an admin, and flags not 0, a temporary, anonymous AdminId is given.
">
                <Param name="int client"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantBool" func="yes">
            <Overload retVal="native void" descr="
Params:
    val                     Input value.
Notes:
    Sets a bool value in the global variant object.
">
                <Param name="bool val"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantColor" func="yes">
            <Overload retVal="native void" descr="
Params:
    color                   Input color.
Notes:
    Sets a color in the global variant object.
">
                <Param name="const int color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
Notes:
    Sets an entity in the global variant object.
Error:
    Invalid entity index.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    val                     Input value.
Notes:
    Sets a floating point value in the global variant object.
">
                <Param name="float val"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantInt" func="yes">
            <Overload retVal="native void" descr="
Params:
    val                     Input value.
Notes:
    Sets an integer value in the global variant object.
">
                <Param name="int val"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantPosVector3D" func="yes">
            <Overload retVal="native void" descr="
Params:
    vec                     Input position vector.
Notes:
    Sets a 3D position vector in the global variant object.
">
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantString" func="yes">
            <Overload retVal="native void" descr="
Params:
    str                     Input string.
Notes:
    Sets a string in the global variant object.
">
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVariantVector3D" func="yes">
            <Overload retVal="native void" descr="
Params:
    vec                     Input vector.
Notes:
    Sets a 3D vector in the global variant object.
">
                <Param name="const float vec[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetVoteResultCallback" func="yes">
            <Overload retVal="native void" descr="
Params:
    menu                    Menu Handle.
    callback                Callback function.
Notes:
    Sets an advanced vote handling callback.  If this callback is set,
    MenuAction_VoteEnd will not be called.
Error:
    Invalid Handle or callback.
">
                <Param name="Handle menu"/>
                <Param name="VoteHandler callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShiftArrayUp" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
    index                   Index in the array to shift up from.
Notes:
    Shifts an array up.  All array contents after and including the given
    index are shifted up by one, and the given index is then &apos;free.&apos;
    After shifting, the contents of the given index is undefined.
Error:
    Invalid Handle or invalid index.
">
                <Param name="Handle array"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowActivity" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index doing the action, or 0 for server.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Displays usage of an admin command to users depending on the
    setting of the sm_show_activity cvar.
    This version does not display a message to the originating client
    if used from chat triggers or menus.  If manual replies are used
    for these cases, then this function will suffice.  Otherwise,
    ShowActivity2() is slightly more useful.
Error:
    
">
                <Param name="int client"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowActivity2" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index doing the action, or 0 for server.
    tag                     Tag to prepend to the message.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Displays usage of an admin command to users depending on the
    setting of the sm_show_activity cvar.  All users receive a message
    in their chat text, except for the originating client, who receives
    the message based on the current ReplySource.
Error:
    
">
                <Param name="int client"/>
                <Param name="const char[] tag"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowActivityEx" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index doing the action, or 0 for server.
    tag                     Tag to display with.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Same as ShowActivity(), except the tag parameter is used instead of
    &apos;[SM] &apos; (note that you must supply any spacing).
Error:
    
">
                <Param name="int client"/>
                <Param name="const char[] tag"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowCookieMenu" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
Notes:
    Displays the settings menu to a client.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowHudText" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to send the message to.
    channel                 A channel number.
                            If -1, then a channel will automatically be selected
                            based on the least-recently-used channel.  If the
                            channel is any other number, it will be modulo&apos;d with
                            the channel count to get a final channel number.
    message                 Message text or formatting rules.
    ...                     Message formatting parameters.
Notes:
    Shows a HUD message to a client on the given channel.
    As of this writing, only TF, HL2MP, and SourceForts support HUD Text.
Return:
    -1 on failure (lack of mod support).
    Any other return value is the channel number that was
    used to render the text.
">
                <Param name="int client"/>
                <Param name="int channel"/>
                <Param name="const char[] message"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowMOTDPanel" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client index.
    title                   Title of the panel (printed on the top border of the window).
    msg                     Contents of the panel, it can be treated as an url, filename or plain text
                            depending on the type parameter (WARNING: msg has to be 192 bytes maximum!)
    type                    Determines the way to treat the message body of the panel.
Notes:
    Shows a MOTD panel to a specific client.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] title"/>
                <Param name="const char[] msg"/>
                <Param name="int type=MOTDPANEL_TYPE_INDEX"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowSyncHudText" func="yes">
            <Overload retVal="native int" descr="
Params:
    client                  Client index to send the message to.
    sync                    Synchronization object.
    message                 Message text or formatting rules.
    ...                     Message formatting parameters.
Notes:
    Shows a synchronized HUD message to a client.
    As of this writing, only TF, HL2MP, and SourceForts support HUD Text.
Error:
    Client not in-game, or sync object not valid.
Return:
    -1 on failure, anything else on success.
    This function fails if the mod does not support it.
">
                <Param name="int client"/>
                <Param name="Handle sync"/>
                <Param name="const char[] message"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ShowVGUIPanel" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    name                    Panel type name (Check viewport_panel_names.h to see a list of
                            some panel names).
    Kv                      KeyValues handle with all the data for the panel setup (Depends
                            on the panel type and may be unused).
    show                    True to show the panel, or false to remove it from the client screen.
Notes:
    Shows a VGUI panel to a specific client.
Error:
    If the client is not connected an error will be thrown.
">
                <Param name="int client"/>
                <Param name="const char[] name"/>
                <Param name="Handle Kv=INVALID_HANDLE"/>
                <Param name="bool show=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SimpleRegexMatch" func="yes">
            <Overload retVal="stock int" descr="
Params:
    str                     The string to check.
    pattern                 The regular expression pattern.
    flags                   General flags for the regular expression.
    error                   Error message, if applicable.
    maxLen                  Maximum length of the error buffer.
Notes:
    Matches a string against a regular expression pattern.
    If you intend on using the same regular expression pattern
    multiple times, consider using CompileRegex and MatchRegex
    instead of making this function reparse the expression each time.
Return:
    Number of substrings found or -1 on failure.
">
                <Param name="const char[] str"/>
                <Param name="const char[] pattern"/>
                <Param name="int flags = 0"/>
                <Param name="char[] error=&apos;&apos;"/>
                <Param name="int maxLen = 0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Sine" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value in radians.
Notes:
    Returns the sine of the argument.
Return:
    sin(value).
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SlapPlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    health                  Health to subtract.
    sound                   False to disable the sound effects.
Notes:
    Slaps a player in a random direction.
Error:
    Invalid client or client not in game, or lack of mod support.
">
                <Param name="int client"/>
                <Param name="int health=5"/>
                <Param name="bool sound=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortADTArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle to sort
    order                   Sort order to use, same as other sorts.
    type                    Data type stored in the ADT Array
Notes:
    Sort an ADT Array. Specify the type as Integer, Float, or String.
">
                <Param name="Handle array"/>
                <Param name="SortOrder order"/>
                <Param name="SortType type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortADTArrayCustom" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle to sort
    sortfunc                Sort comparison function to use
    hndl                    Optional Handle to pass through the comparison calls.
Notes:
    Custom sorts an ADT Array. You must pass in a comparison function.
">
                <Param name="Handle array"/>
                <Param name="SortFuncADTArray sortfunc"/>
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortCustom1D" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array to sort.
    array_size              Size of the array to sort.
    sortfunc                Sort function.
    hndl                    Optional Handle to pass through the comparison calls.
Notes:
    Sorts a custom 1D array.  You must pass in a comparison function.
">
                <Param name="int[] array"/>
                <Param name="int array_size"/>
                <Param name="SortFunc1D sortfunc"/>
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortCustom2D" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array to sort.
    array_size              Size of the major array to sort (first index, outermost).
    sortfunc                Sort comparison function to use.
    hndl                    Optional Handle to pass through the comparison calls.
Notes:
    Sorts a custom 2D array.  You must pass in a comparison function.
">
                <Param name="any[][] array"/>
                <Param name="int array_size"/>
                <Param name="SortFunc2D sortfunc"/>
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortFloats" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array of floating point numbers to sort in-place.
    array_size              Size of the array.
    order                   Sorting order to use.
Notes:
    Sorts an array of float point numbers.
">
                <Param name="float[] array"/>
                <Param name="int array_size"/>
                <Param name="SortOrder order = Sort_Ascending"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortIntegers" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array of integers to sort in-place.
    array_size              Size of the array.
    order                   Sorting order to use.
Notes:
    Sorts an array of integers.
">
                <Param name="int[] array"/>
                <Param name="int array_size"/>
                <Param name="SortOrder order = Sort_Ascending"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortStrings" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array of strings to sort in-place.
    array_size              Size of the array.
    order                   Sorting order to use.
Notes:
    Sorts an array of strings.
">
                <Param name="char[][] array"/>
                <Param name="int array_size"/>
                <Param name="SortOrder order = Sort_Ascending"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SplitString" func="yes">
            <Overload retVal="native int" descr="
Params:
    source                  Source input string.
    split                   A string which specifies a search point to break at.
    part                    Buffer to store string part.
    partLen                 Maximum length of the string part buffer.
Notes:
    Returns text in a string up until a certain character sequence is reached.
Return:
    -1 if no match was found; otherwise, an index into source
    marking the first index after the searched text.  The
    index is always relative to the start of the input string.
">
                <Param name="const char[] source"/>
                <Param name="const char[] split"/>
                <Param name="char[] part"/>
                <Param name="int partLen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SquareRoot" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value.
Notes:
    Returns the square root of the input value, equivalent to floatpower(value, 0.5).
Return:
    Square root of the value.
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartMessage" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    msgname                 Message name to start.
    clients                 Array containing player indexes to broadcast to.
    numClients              Number of players in the array.
    flags                   Optional flags to set.
Notes:
    Starts a usermessage (network message).
    Only one message can be active at a time.
    It is illegal to send any message while a non-intercept hook is in progress.
Error:
    Invalid message name, unable to start a message, invalid client,
    or client not connected.
Return:
    A handle to a bf_write bit packing structure, or
    INVALID_HANDLE on failure.
">
                <Param name="const char[] msgname"/>
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartMessageAll" func="yes">
            <Overload retVal="stock Handle" descr="
Params:
    msgname                 Message name to start.
    flags                   Optional flags to set.
Notes:
    Starts a usermessage (network message) that broadcasts to all clients.
    See StartMessage or StartMessageEx().
Return:
    A handle to a bf_write bit packing structure, or
    INVALID_HANDLE on failure.
">
                <Param name="const char[] msgname"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartMessageEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    msg                     Message index to start.
    clients                 Array containing player indexes to broadcast to.
    numClients              Number of players in the array.
    flags                   Optional flags to set.
Notes:
    Starts a usermessage (network message).
    Only one message can be active at a time.
    It is illegal to send any message while a non-intercept hook is in progress.
Error:
    Invalid message name, unable to start a message, invalid client,
    or client not connected.
Return:
    A handle to a bf_write bit packing structure, or
    INVALID_HANDLE on failure.
">
                <Param name="UserMsg msg"/>
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartMessageOne" func="yes">
            <Overload retVal="stock Handle" descr="
Params:
    msgname                 Message name to start.
    client                  Client to send to.
    flags                   Optional flags to set.
Notes:
    Starts a simpler usermessage (network message) for one client.
    See StartMessage or StartMessageEx().
Return:
    A handle to a bf_write bit packing structure, or
    INVALID_HANDLE on failure.
">
                <Param name="const char[] msgname"/>
                <Param name="int client"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartPrepSDKCall" func="yes">
            <Overload retVal="native void" descr="
Params:
    type                    Type of function call this will be.
Notes:
    Starts the preparation of an SDK call.
">
                <Param name="SDKCallType type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StartProfiling" func="yes">
            <Overload retVal="native void" descr="
Params:
    prof                    Profiling object.
Notes:
    Starts profiling.
Error:
    Invalid Handle.
">
                <Param name="Handle prof"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StopProfiling" func="yes">
            <Overload retVal="native void" descr="
Params:
    prof                    Profiling object.
Notes:
    Stops profiling.
Error:
    Invalid Handle or profiling was never started.
">
                <Param name="Handle prof"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StopSound" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Entity index.
    channel                 Channel number.
    name                    Sound file name relative to the &apos;sound&apos; folder.
Notes:
    Stops a sound.
">
                <Param name="int entity"/>
                <Param name="int channel"/>
                <Param name="const char[] name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StoreToAddress" func="yes">
            <Overload retVal="native void" descr="
Params:
    addr                    Address to a memory location.
    data                    Value to store at the address.
    size                    How many bytes should be written.
Notes:
    Store up to 4 bytes to a memory address.
">
                <Param name="Address addr"/>
                <Param name="int data"/>
                <Param name="NumberType size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StrCat" func="yes">
            <Overload retVal="stock int" descr="
Params:
    buffer                  String to append to.
    maxlength               Maximum length of entire buffer.
    source                  Source string to concatenate.
Notes:
    Concatenates one string onto another.
Return:
    Number of bytes written.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StrContains" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     String to search in.
    substr                  Substring to find inside the original string.
    caseSensitive           If true (default), search is case sensitive.
                            If false, search is case insensitive.
Notes:
    Tests whether a string is found inside another string.
Return:
    -1 on failure (no match found). Any other value
    indicates a position in the string where the match starts.
">
                <Param name="const char[] str"/>
                <Param name="const char[] substr"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StrEqual" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    str1                    First string (left).
    str2                    Second string (right).
    caseSensitive           If true (default), comparison is case sensitive.
                            If false, comparison is case insensitive.
Notes:
    Returns whether two strings are equal.
Return:
    True if equal, false otherwise.
">
                <Param name="const char[] str1"/>
                <Param name="const char[] str2"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringToFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    str                     String to convert to a float.
Notes:
    Converts a string to a floating point number.
Return:
    Floating point result, or 0.0 on error.
">
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringToFloatEx" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     String to convert to a float.
    result                  Variable to store result in.
Notes:
    Converts a string to a floating point number with some more options.
Return:
    Number of characters consumed.
">
                <Param name="const char[] str"/>
                <Param name="float &amp;result"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringToInt" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     String to convert.
    nBase                   Numerical base to use.  10 is default.
Notes:
    Converts a string to an integer.
Return:
    Integer conversion of string, or 0 on failure.
">
                <Param name="const char[] str"/>
                <Param name="int nBase=10"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringToIntEx" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     String to convert.
    result                  Variable to store the result in.
    nBase                   Numerical base to use.  10 is default.
Notes:
    Converts a string to an integer with some more options.
Return:
    Number of characters consumed.
">
                <Param name="const char[] str"/>
                <Param name="int &amp;result"/>
                <Param name="int nBase=10"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringToKeyValues" func="yes">
            <Overload retVal="native bool" descr="
Params:
    kv                      KeyValues Handle.
    buffer                  String buffer to load into the KeyValues.
    resourceName            The resource name of the KeyValues, used for error tracking purposes.
Notes:
    Converts a given string to a KeyValues tree.  The string is read into
    the current postion of the tree.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle kv"/>
                <Param name="const char[] buffer"/>
                <Param name="const char[] resourceName=&apos;StringToKeyValues&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StripQuotes" func="yes">
            <Overload retVal="native bool" descr="
Params:
    text                    String to modify (in place).
Notes:
    Strips a quote pair off a string if it exists.  That is, the following
    replace rule is applied once:  ^&apos;(.*)&apos;$ -&gt; ^\1$
    Note that the leading and trailing quotes will only be removed if both
    exist.  Otherwise, the string is left unmodified.  This function should
    be considered O(k) (all characters get shifted down).
Return:
    True if string was modified, false if there was no
    set of quotes.
">
                <Param name="char[] text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SubtractVectors" func="yes">
            <Overload retVal="stock void" descr="
Params:
    vec1                    First vector.
    vec2                    Second vector to subtract from first.
    result                  Result buffer.
Notes:
    Subtracts a vector from another vector.  It is safe to use either input
    buffer as an output buffer.
">
                <Param name="const float vec1[3]"/>
                <Param name="const float vec2[3]"/>
                <Param name="float result[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SwapArrayItems" func="yes">
            <Overload retVal="native void" descr="
Params:
    array                   Array Handle.
    index1                  First index.
    index2                  Second index.
Notes:
    Swaps two items in the array.
Error:
    Invalid Handle or invalid index.
">
                <Param name="Handle array"/>
                <Param name="int index1"/>
                <Param name="int index2"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_IsValidProp" func="yes">
            <Overload retVal="native bool" descr="
Params:
    prop                    Property to use.
Notes:
    Checks if a certain TE property exists.
Return:
    True if the property exists, otherwise false.
">
                <Param name="const char[] prop"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_ReadFloat" func="yes">
            <Overload retVal="native float" descr="
Params:
    prop                    Property to use.
Notes:
    Reads a floating point number in the current temp entity.
Error:
    Property not found.
Return:
    Property value.
">
                <Param name="const char[] prop"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_ReadNum" func="yes">
            <Overload retVal="native int" descr="
Params:
    prop                    Property to use.
Notes:
    Reads an integer value in the current temp entity.
Error:
    Property not found.
Return:
    Property value.
">
                <Param name="const char[] prop"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_ReadVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    vector                  Vector to read.
Notes:
    Reads a vector in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="float vector[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_Send" func="yes">
            <Overload retVal="native void" descr="
Params:
    clients                 Array containing player indexes to broadcast to.
    numClients              Number of players in the array.
    delay                   Delay in seconds to send the TE.
Notes:
    Sends the current temp entity to one or more clients.
Error:
    Invalid client index or client not in game.
">
                <Param name="const int[] clients"/>
                <Param name="int numClients"/>
                <Param name="float delay=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SendToAll" func="yes">
            <Overload retVal="stock void" descr="
Params:
    delay                   Delay in seconds to send the TE.
Notes:
    Broadcasts the current temp entity to all clients.
    See TE_Start().
">
                <Param name="float delay=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SendToAllInRange" func="yes">
            <Overload retVal="stock void" descr="
Params:
    origin                  Coordinates from which to test range.
    rangeType               Range type to use for filtering clients.
    delay                   Delay in seconds to send the TE.
Notes:
    Sends the current TE to all clients that are in
    visible or audible range of the origin.
    See TE_Start().
    See GetClientsInRange()
">
                <Param name="float origin[3]"/>
                <Param name="ClientRangeType rangeType"/>
                <Param name="float delay=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SendToClient" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client to send to.
    delay                   Delay in seconds to send the TE.
Notes:
    Sends the current TE to only a client.
    See TE_Start().
Error:
    Invalid client index or client not in game.
">
                <Param name="int client"/>
                <Param name="float delay=0.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupArmorRicochet" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the armor ricochet.
    dir                     Direction of the armor ricochet.
Notes:
    Sets up an armor ricochet effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBeamFollow" func="yes">
            <Overload retVal="stock void" descr="
Params:
    EntIndex                Entity index from where the beam starts.
    ModelIndex              Precached model index.
    HaloIndex               Precached model index.
    Life                    Time duration of the beam.
    Width                   Initial beam width.
    EndWidth                Final beam width.
    FadeLength              Beam fade time duration.
    Color                   Color array (r, g, b, a).
Notes:
    Sets up a follow beam effect.
">
                <Param name="int EntIndex"/>
                <Param name="int ModelIndex"/>
                <Param name="int HaloIndex"/>
                <Param name="float Life"/>
                <Param name="float Width"/>
                <Param name="float EndWidth"/>
                <Param name="int FadeLength"/>
                <Param name="const int Color[4]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBeamLaser" func="yes">
            <Overload retVal="stock void" descr="
Params:
    StartEntity             Entity index from where the beam starts.
    EndEntity               Entity index from where the beam ends.
    ModelIndex              Precached model index.
    HaloIndex               Precached model index.
    StartFrame              Initial frame to render.
    FrameRate               Beam frame rate.
    Life                    Time duration of the beam.
    Width                   Initial beam width.
    EndWidth                Final beam width.
    FadeLength              Beam fade time duration.
    Amplitude               Beam amplitude.
    Color                   Color array (r, g, b, a).
    Speed                   Speed of the beam.
Notes:
    Sets up an entity to entity laser effect.
">
                <Param name="int StartEntity"/>
                <Param name="int EndEntity"/>
                <Param name="int ModelIndex"/>
                <Param name="int HaloIndex"/>
                <Param name="int StartFrame"/>
                <Param name="int FrameRate"/>
                <Param name="float Life"/>
                <Param name="float Width"/>
                <Param name="float EndWidth"/>
                <Param name="int FadeLength"/>
                <Param name="float Amplitude"/>
                <Param name="const int Color[4]"/>
                <Param name="int Speed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBeamPoints" func="yes">
            <Overload retVal="stock void" descr="
Params:
    start                   Start position of the beam.
    end                     End position of the beam.
    ModelIndex              Precached model index.
    HaloIndex               Precached model index.
    StartFrame              Initial frame to render.
    FrameRate               Beam frame rate.
    Life                    Time duration of the beam.
    Width                   Initial beam width.
    EndWidth                Final beam width.
    FadeLength              Beam fade time duration.
    Amplitude               Beam amplitude.
    Color                   Color array (r, g, b, a).
    Speed                   Speed of the beam.
Notes:
    Sets up a point to point beam effect.
">
                <Param name="const float start[3]"/>
                <Param name="const float end[3]"/>
                <Param name="int ModelIndex"/>
                <Param name="int HaloIndex"/>
                <Param name="int StartFrame"/>
                <Param name="int FrameRate"/>
                <Param name="float Life"/>
                <Param name="float Width"/>
                <Param name="float EndWidth"/>
                <Param name="int FadeLength"/>
                <Param name="float Amplitude"/>
                <Param name="const int Color[4]"/>
                <Param name="int Speed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBeamRing" func="yes">
            <Overload retVal="stock void" descr="
Params:
    StartEntity             Entity index from where the ring starts.
    EndEntity               Entity index from where the ring ends.
    ModelIndex              Precached model index.
    HaloIndex               Precached model index.
    StartFrame              Initial frame to render.
    FrameRate               Ring frame rate.
    Life                    Time duration of the ring.
    Width                   Beam width.
    Amplitude               Beam amplitude.
    Color                   Color array (r, g, b, a).
    Speed                   Speed of the beam.
    Flags                   Beam flags.
Notes:
    Sets up a beam ring effect.
">
                <Param name="int StartEntity"/>
                <Param name="int EndEntity"/>
                <Param name="int ModelIndex"/>
                <Param name="int HaloIndex"/>
                <Param name="int StartFrame"/>
                <Param name="int FrameRate"/>
                <Param name="float Life"/>
                <Param name="float Width"/>
                <Param name="float Amplitude"/>
                <Param name="const int Color[4]"/>
                <Param name="int Speed"/>
                <Param name="int Flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBeamRingPoint" func="yes">
            <Overload retVal="stock void" descr="
Params:
    center                  Center position of the ring.
    Start_Radius            Initial ring radius.
    End_Radius              Final ring radius.
    ModelIndex              Precached model index.
    HaloIndex               Precached model index.
    StartFrame              Initial frame to render.
    FrameRate               Ring frame rate.
    Life                    Time duration of the ring.
    Width                   Beam width.
    Amplitude               Beam amplitude.
    Color                   Color array (r, g, b, a).
    Speed                   Speed of the beam.
    Flags                   Beam flags.
Notes:
    Sets up a beam ring point effect.
">
                <Param name="const float center[3]"/>
                <Param name="float Start_Radius"/>
                <Param name="float End_Radius"/>
                <Param name="int ModelIndex"/>
                <Param name="int HaloIndex"/>
                <Param name="int StartFrame"/>
                <Param name="int FrameRate"/>
                <Param name="float Life"/>
                <Param name="float Width"/>
                <Param name="float Amplitude"/>
                <Param name="const int Color[4]"/>
                <Param name="int Speed"/>
                <Param name="int Flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupBloodSprite" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the sprite.
    dir                     Sprite direction.
    color                   Color array (r, g, b, a).
    Size                    Sprite size.
    SprayModel              Precached model index.
    BloodDropModel          Precached model index.
Notes:
    Sets up a blood sprite effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
                <Param name="const int color[4]"/>
                <Param name="int Size"/>
                <Param name="int SprayModel"/>
                <Param name="int BloodDropModel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupDust" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the dust.
    dir                     Direction of the dust.
    Size                    Dust cloud size.
    Speed                   Dust cloud speed.
Notes:
    Sets up a dust cloud effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
                <Param name="float Size"/>
                <Param name="float Speed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupEnergySplash" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the energy splash.
    dir                     Direction of the energy splash.
    Explosive               Makes the effect explosive.
Notes:
    Sets up an energy splash effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
                <Param name="bool Explosive"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupExplosion" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Explosion position.
    Model                   Precached model index.
    Scale                   Explosion scale.
    Framerate               Explosion frame rate.
    Flags                   Explosion flags.
    Radius                  Explosion radius.
    Magnitude               Explosion size.
    normal                  Normal vector to the explosion.
    MaterialType            Exploded material type.
Notes:
    Sets up a explosion effect.
">
                <Param name="const float pos[3]"/>
                <Param name="int Model"/>
                <Param name="float Scale"/>
                <Param name="int Framerate"/>
                <Param name="int Flags"/>
                <Param name="int Radius"/>
                <Param name="int Magnitude"/>
                <Param name="const float normal[3]={0.0, 0.0, 1.0}"/>
                <Param name="int MaterialType=&apos;C&apos;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupGlowSprite" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the sprite.
    Model                   Precached model index.
    Life                    Time duration of the sprite.
    Size                    Sprite size.
    Brightness              Sprite brightness.
Notes:
    Sets up a glowing sprite effect.
">
                <Param name="const float pos[3]"/>
                <Param name="int Model"/>
                <Param name="float Life"/>
                <Param name="float Size"/>
                <Param name="int Brightness"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupMetalSparks" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the metal sparks.
    dir                     Direction of the metal sparks.
Notes:
    Sets up a metal sparks effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupMuzzleFlash" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the muzzle flash.
    angles                  Rotation angles of the muzzle flash.
    Scale                   Scale of the muzzle flash.
    Type                    Muzzle flash type to render (Mod specific).
Notes:
    Sets up a muzzle flash effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float angles[3]"/>
                <Param name="float Scale"/>
                <Param name="int Type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupSmoke" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the smoke.
    Model                   Precached model index.
    Scale                   Scale of the smoke.
    FrameRate               Frame rate of the smoke.
Notes:
    Sets up a smoke effect.
">
                <Param name="const float pos[3]"/>
                <Param name="int Model"/>
                <Param name="float Scale"/>
                <Param name="int FrameRate"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_SetupSparks" func="yes">
            <Overload retVal="stock void" descr="
Params:
    pos                     Position of the sparks.
    dir                     Direction of the sparks.
    Magnitude               Sparks size.
    TrailLength             Trail lenght of the sparks.
Notes:
    Sets up a sparks effect.
">
                <Param name="const float pos[3]"/>
                <Param name="const float dir[3]"/>
                <Param name="int Magnitude"/>
                <Param name="int TrailLength"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_Start" func="yes">
            <Overload retVal="native void" descr="
Params:
    te_name                 TE name.
Notes:
    Starts a temp entity transmission.
Error:
    Temp Entity name not available.
">
                <Param name="const char[] te_name"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteAngles" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    angles                  Angles to set.
Notes:
    Sets a QAngle in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="const float angles[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteEncodedEnt" func="yes">
            <Overload retVal="stock void" descr="
Params:
    prop                    Property to use.
    value                   Value to set.
Notes:
    Sets an encoded entity index in the current temp entity.
    (This is usually used for m_nStartEntity and m_nEndEntity).
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    value                   Floating point number to set.
Notes:
    Sets a floating point number in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteFloatArray" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    array                   Array of values to copy.
    arraySize               Number of values to copy.
Notes:
    Sets an array of floats in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="const float[] array"/>
                <Param name="int arraySize"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteNum" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    value                   Integer value to set.
Notes:
    Sets an integer value in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TE_WriteVector" func="yes">
            <Overload retVal="native void" descr="
Params:
    prop                    Property to use.
    vector                  Vector to set.
Notes:
    Sets a vector in the current temp entity.
Error:
    Property not found.
">
                <Param name="const char[] prop"/>
                <Param name="const float vector[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_AddCondition" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    condition               Integer identifier of condition to apply.
    duration                Duration of condition (does not apply to all conditions).
                            Pass TFCondDuration_Infinite to apply until manually removed.
    inflictor               Condition inflictor&apos;s index (0 for no inflictor).
Notes:
    Adds a condition to a player
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="TFCond condition"/>
                <Param name="float duration=TFCondDuration_Infinite"/>
                <Param name="int inflictor=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_CalcIsAttackCritical" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client Index.
    weapon                  Weapon entity Index.
    weaponname              Classname of the weapon.
    result                  Buffer param for the result of the decision.
Notes:
    Called on weapon fire to decide if the current shot should be critical.
    Return Plugin_Continue to let the original calculation or return a higher
    action to override the decision with the value of &apos;result&apos;
    Since critical shots are also calculated client side any changes made with
    this will not show for the shooter. Projectile weapons such as the rocketlauncher
    and demoman weapons will show a critical bullet but no critical sound effect.
    Bullet hits should appear as expected.
">
                <Param name="int client"/>
                <Param name="int weapon"/>
                <Param name="char[] weaponname"/>
                <Param name="bool &amp;result"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_ChangeClientTeam" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Client index.
    team                    TFTeam team symbol.
Notes:
    Changes a client&apos;s current team.
Error:
    Invalid client index.
">
                <Param name="int client"/>
                <Param name="TFTeam team"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_DisguisePlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    team                    Team to disguise the player as (only TFTeam_Red and TFTeam_Blue have an effect)
    classType               TFClassType class to disguise the player as
    target                  Specific target player to disguise as (0 for any)
Notes:
    Disguises a client to the given model and team. Only has an effect on spies.
    Note: This only starts the disguise process and a delay occurs before the spy is fully disguised
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="TFTeam team"/>
                <Param name="TFClassType classType"/>
                <Param name="int target=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_GetClass" func="yes">
            <Overload retVal="native TFClassType" descr="
Params:
    classname               A classname string such as &apos;sniper&apos; or &apos;demoman&apos;
Notes:
    Finds the TFClassType for a given class name.
Return:
    A TFClassType constant.
">
                <Param name="const char[] classname"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_GetClientTeam" func="yes">
            <Overload retVal="stock TFTeam" descr="
Params:
    client                  Client index.
Notes:
    Gets a client&apos;s current team.
Error:
    Invalid client index.
Return:
    Current TFTeam of client.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_GetObjectMode" func="yes">
            <Overload retVal="stock TFObjectMode" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s object mode.
Error:
    Invalid entity index.
Return:
    Current TFObjectMode of entity.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_GetObjectType" func="yes">
            <Overload retVal="stock TFObjectType" descr="
Params:
    entity                  Entity index.
Notes:
    Gets an entity&apos;s object type.
Error:
    Invalid entity index.
Return:
    Current TFObjectType of entity.
">
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_GetPlayerClass" func="yes">
            <Overload retVal="stock TFClassType" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Gets a client&apos;s current class.
Error:
    Invalid client index.
Return:
    Current TFClassType of player.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_IgnitePlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    attacker                Attacker&apos;s index.
    duration                Duration of fire (in seconds).
Notes:
    Sets a client on fire.
    Fire duration is capped to 10 seconds.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="int attacker"/>
                <Param name="float duration=10.0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_IsHolidayActive" func="yes">
            <Overload retVal="native bool" descr="
Params:
    holiday                 Holiday being checked.
Notes:
    Returns whether or not a holiday is active
Return:
    Boolean of whether or not the holiday is active.
">
                <Param name="TFHoliday holiday"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_IsPlayerInCondition" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    client                  Player&apos;s index.
    cond                    TFCond constant
Notes:
    Check whether or not a condition is set on a player
Return:
    True if set, false otherwise
">
                <Param name="int client"/>
                <Param name="TFCond cond"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_IsPlayerInDuel" func="yes">
            <Overload retVal="native bool" descr="
Params:
    client                  Client Index.
Notes:
    Returns whether or not a client (Player) is in a duel.
Return:
    Boolean of whether or not the client/player is dueling.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_MakeBleed" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    attacker                Attacker&apos;s index.
    duration                Duration of bleeding (in seconds).
Notes:
    Induces the bleed effect on a client
">
                <Param name="int client"/>
                <Param name="int attacker"/>
                <Param name="float duration"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnConditionAdded" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Index of the client to which the condition is being added.
    condition               Condition that is being added.
Notes:
    Called after a condition is added to a player
">
                <Param name="int client"/>
                <Param name="TFCond condition"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnConditionRemoved" func="yes">
            <Overload retVal="forward void" descr="
Params:
    client                  Index of the client to which the condition is being removed.
    condition               Condition that is being removed.
Notes:
    Called after a condition is removed from a player
">
                <Param name="int client"/>
                <Param name="TFCond condition"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnIsHolidayActive" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    holiday                 Holiday being checked.
    result                  Buffer param for the result of the decision.
Notes:
    Called at various times when the game checks to see if the given holiday is active.
    Return Plugin_Continue to let the original calculation or return a higher
    action to override the decision with the value of &apos;result&apos;
Return:
    Plugin_Continue for original calculation, higher value to use &apos;result&apos;.
">
                <Param name="TFHoliday holiday"/>
                <Param name="bool &amp;result"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnPlayerTeleport" func="yes">
            <Overload retVal="forward Action" descr="
Params:
    client                  Client index.
    teleporter              Teleporter entity index.
    result                  Buffer param for the result of the decision.
                            This is prepopulated with the game&apos;s original decision to let a player teleport.
Notes:
    Called when a player attempts to use a teleporter to decide if the player should be allowed to teleport.
    Return Plugin_Continue to let the original calculation or return a higher
    action to override the decision with the value of &apos;result&apos;
Return:
    Plugin_Continue for original calculation, higher value to use &apos;result&apos;.
">
                <Param name="int client"/>
                <Param name="int teleporter"/>
                <Param name="bool &amp;result"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnWaitingForPlayersEnd" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the server exits the Waiting for Players round state
">
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_OnWaitingForPlayersStart" func="yes">
            <Overload retVal="forward void" descr="
Notes:
    Called when the server enters the Waiting for Players round state
">
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RegeneratePlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Regenerates a client&apos;s health and ammunition
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RemoveAllWeapons" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Removes all weapons from a client
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RemoveCondition" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    condition               Integer identifier of condition to remove.
Notes:
    Removes a condition from a player
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="TFCond condition"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RemovePlayerDisguise" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Removes the current disguise from a client. Only has an effect on spies.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RemoveWeaponSlot" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Player&apos;s index.
    slot                    Slot index (0-5)
Notes:
    Removes all weapons from a client&apos;s weapon slot
Error:
    Invalid client, invalid slot or lack of mod support
">
                <Param name="int client"/>
                <Param name="int slot"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RemoveWearable" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Client index.
    wearable                Index of the wearable entity.
Notes:
    Removes an econ wearable (hat, misc, etc) from a player.
    This also deletes the wearable entity.
Error:
    Invalid client index, client not in game, invalid wearable entity, or no mod support.
">
                <Param name="int client"/>
                <Param name="int wearable"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_RespawnPlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
Notes:
    Respawns a client
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_SetPlayerClass" func="yes">
            <Overload retVal="stock void" descr="
Params:
    client                  Player&apos;s index.
    classType               TFClassType class symbol.
    weapons                 This parameter is ignored.
    persistent              If true, changes the player&apos;s desired class so the change stays after death.
Notes:
    Sets a client&apos;s class.
    Note: If setting player class in a player spawn hook weapons should be set to false.
Error:
    Invalid client index.
">
                <Param name="int client"/>
                <Param name="TFClassType classType"/>
                <Param name="bool weapons=true"/>
                <Param name="bool persistent=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_SetPlayerPowerPlay" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    enabled                 Whether to enable or disable PowerPlay on player.
Notes:
    Enables/disables PowerPlay mode on a player.
Error:
    Invalid client index, client not in game, or no mod support.
">
                <Param name="int client"/>
                <Param name="bool enabled"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TF2_StunPlayer" func="yes">
            <Overload retVal="native void" descr="
Params:
    client                  Player&apos;s index.
    duration                Duration of stun.
    slowdown                Slowdown percent (as decimal, 0.00-1.00)
                            Ignored if TF_STUNFLAG_SLOWDOWN is not set.
    stunflags               Stun flags.
    attacker                Attacker&apos;s index (0 is allowed for world).
Notes:
    Stuns a client
">
                <Param name="int client"/>
                <Param name="float duration"/>
                <Param name="float slowdown=0.0"/>
                <Param name="int stunflags"/>
                <Param name="int attacker=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_AllSolid" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns whether the entire trace was in a solid area.
Error:
    Invalid Handle.
Return:
    True if entire trace was in a solid area, otherwise false.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipCurrentRayToEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    flags                   Trace flags.
    entity                  Entity to clip to.
Notes:
    Clips the current global ray (or hull) to a particular entity.
">
                <Param name="int flags"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipCurrentRayToEntityEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    flags                   Trace flags.
    entity                  Entity to clip to.
Notes:
    Clips the current global ray (or hull) to a particular entity.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="int flags"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipRayHullToEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
    entity                  Entity to clip to.
Notes:
    Clips a ray hull to a particular entity.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipRayHullToEntityEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
    entity                  Entity to clip to.
Notes:
    Clips a ray hull to a particular entity.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipRayToEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
    entity                  Entity to clip to.
Notes:
    Clips a ray to a particular entity.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_ClipRayToEntityEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
    entity                  Entity to clip to.
Notes:
    Clips a ray to a particular entity.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
                <Param name="int entity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_DidHit" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns if there was any kind of collision along the trace ray.
Error:
    Invalid Handle.
Return:
    True if any collision found, otherwise false.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_EnumerateEntities" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    mask                    Mask to use for the trace. See PARTITION_* flags.
    rtype                   Method to calculate the ray direction.
    enumerator              Function to use as enumerator. For each entity found
                            along the ray, this function is called.
    data                    Arbitrary data value to pass through to the enumerator.
Notes:
    Enumerates over entities along a ray. This may find entities that are
    close to the ray but do not actually intersect it. Use TR_Clip*RayToEntity
    with TR_DidHit to check if the ray actually intersects the entity.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int mask"/>
                <Param name="RayType rtype"/>
                <Param name="TraceEntityEnumerator enumerator"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_EnumerateEntitiesHull" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    mask                    Mask to use for the trace. See PARTITION_* flags.
    enumerator              Function to use as enumerator. For each entity found
                            along the ray, this function is called.
    data                    Arbitrary data value to pass through to the enumerator.
Notes:
    Enumerates over entities along a ray hull. This may find entities that are
    close to the ray but do not actually intersect it. Use TR_Clip*RayToEntity
    with TR_DidHit to check if the ray actually intersects the entity.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int mask"/>
                <Param name="TraceEntityEnumerator enumerator"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetDisplacementFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the displacement flags for the surface that was hit. See DISPSURF_FLAG_*.
Error:
    Invalid Handle.
Return:
    Displacement flags.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetEndPosition" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Vector buffer to store data in.
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the collision position of a trace result.
Error:
    Invalid Handle.
">
                <Param name="float pos[3]"/>
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetEntityIndex" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the entity index that collided with the trace.
Error:
    Invalid Handle.
Return:
    Entity index or -1 for no collision.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetFraction" func="yes">
            <Overload retVal="native float" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the time fraction from a trace result (1.0 means no collision).
Error:
    Invalid Handle.
Return:
    Time fraction value of the trace.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetFractionLeftSolid" func="yes">
            <Overload retVal="native float" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the time fraction from a trace result when it left a solid.
    Only valid if trace started in solid
Error:
    Invalid Handle.
Return:
    Time fraction left solid value of the trace.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetHitBoxIndex" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns in which hitbox the trace collided if any.
    Note: if the entity that collided with the trace is the world entity,
    then this function doesn&apos;t return an hitbox index but a static prop index.
Error:
    Invalid Handle.
Return:
    Hitbox index (Or static prop index).
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetHitGroup" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns in which body hit group the trace collided if any.
Error:
    Invalid Handle.
Return:
    Body hit group.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetPhysicsBone" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the index of the physics bone that was hit.
Error:
    Invalid Handle.
Return:
    Physics bone index.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetPlaneNormal" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
    normal                  Vector buffer to store the vector normal to the collision plane
Notes:
    Find the normal vector to the collision plane of a trace.
Error:
    Invalid Handle
">
                <Param name="Handle hndl"/>
                <Param name="float normal[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetPointContents" func="yes">
            <Overload retVal="native int" descr="
Params:
    pos                     World position to test.
    entindex                Entity index found at the given position (by reference).
Notes:
    Get the contents mask and the entity index at the given position.
Return:
    Contents mask.
">
                <Param name="const float pos[3]"/>
                <Param name="int &amp;entindex=-1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetPointContentsEnt" func="yes">
            <Overload retVal="native int" descr="
Params:
    entindex                Entity index to test.
    pos                     World position.
Notes:
    Get the point contents testing only the given entity index.
Return:
    Contents mask.
">
                <Param name="int entindex"/>
                <Param name="const float pos[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetStartPosition" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
    pos                     Vector buffer to store data in.
Notes:
    Returns the starting position of a trace.
Error:
    Invalid Handle.
">
                <Param name="Handle hndl"/>
                <Param name="float pos[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetSurfaceFlags" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the surface flags. See SURF_*.
Error:
    Invalid Handle.
Return:
    Surface flags.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetSurfaceName" func="yes">
            <Overload retVal="native void" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
    buffer                  Buffer to store surface name in
    maxlen                  Maximum length of output buffer
Notes:
    Returns the name of the surface that was hit.
Error:
    Invalid Handle.
">
                <Param name="Handle hndl"/>
                <Param name="char[] buffer"/>
                <Param name="int maxlen"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_GetSurfaceProps" func="yes">
            <Overload retVal="native int" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns the surface properties index of the surface that was hit.
Error:
    Invalid Handle.
Return:
    Surface props.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_PointOutsideWorld" func="yes">
            <Overload retVal="native bool" descr="
Params:
    pos                     Vector buffer to store data in.
Notes:
    Tests a point to see if it&apos;s outside any playable area
Return:
    True if outside world, otherwise false.
">
                <Param name="float pos[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_StartSolid" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    A trace Handle, or INVALID_HANDLE to use a global trace result.
Notes:
    Returns whether the initial point was in a solid area.
Error:
    Invalid Handle.
Return:
    True if initial point was in a solid area, otherwise false.
">
                <Param name="Handle hndl=INVALID_HANDLE"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceHull" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
Notes:
    Starts up a new trace hull using a global trace result.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceHullEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
Notes:
    Starts up a new trace hull using a new trace result.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceHullFilter" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
    filter                  Function to use as a filter.
    data                    Arbitrary data value to pass through to the filter
                            function.
Notes:
    Starts up a new trace hull using a global trace result and a customized
    trace ray filter.
    Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter
    function is currently not allowed and may not work.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
                <Param name="TraceEntityFilter filter"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceHullFilterEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Ending position of the ray.
    mins                    Hull minimum size.
    maxs                    Hull maximum size.
    flags                   Trace flags.
    filter                  Function to use as a filter.
    data                    Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace hull using a new trace result and a customized
    trace ray filter.
    Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter
    function is currently not allowed and may not work.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="const float mins[3]"/>
                <Param name="const float maxs[3]"/>
                <Param name="int flags"/>
                <Param name="TraceEntityFilter filter"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceRay" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the
                            ending point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
Notes:
    Starts up a new trace ray using a global trace result.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceRayEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
Notes:
    Starts up a new trace ray using a new trace result.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceRayFilter" func="yes">
            <Overload retVal="native void" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
    filter                  Function to use as a filter.
    data                    Arbitrary data value to pass through to the filter
                            function.
Notes:
    Starts up a new trace ray using a global trace result and a customized
    trace ray filter.
    Calling TR_Trace*Filter or TR_Trace*FilterEx from inside a filter
    function is currently not allowed and may not work.
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
                <Param name="TraceEntityFilter filter"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TR_TraceRayFilterEx" func="yes">
            <Overload retVal="native Handle" descr="
Params:
    pos                     Starting position of the ray.
    vec                     Depending on RayType, it will be used as the ending
                            point, or the direction angle.
    flags                   Trace flags.
    rtype                   Method to calculate the ray direction.
    filter                  Function to use as a filter.
    data                    Arbitrary data value to pass through to the filter function.
Notes:
    Starts up a new trace ray using a new trace result and a customized
    trace ray filter.
    Calling TR_Trace*Filter or TR_TraceRay*Ex from inside a filter
    function is currently not allowed and may not work.
Return:
    Ray trace handle, which must be closed via CloseHandle().
">
                <Param name="const float pos[3]"/>
                <Param name="const float vec[3]"/>
                <Param name="int flags"/>
                <Param name="RayType rtype"/>
                <Param name="TraceEntityFilter filter"/>
                <Param name="any data=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Tangent" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Input value in radians.
Notes:
    Returns the tangent of the argument.
Return:
    tan(value).
">
                <Param name="float value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TeleportEntity" func="yes">
            <Overload retVal="native void" descr="
Params:
    entity                  Client index.
    origin                  New origin, or NULL_VECTOR for no change.
    angles                  New angles, or NULL_VECTOR for no change.
    velocity                New velocity, or NULL_VECTOR for no change.
Notes:
    Teleports an entity.
Error:
    Invalid entity or client not in game, or lack of mod support.
">
                <Param name="int entity"/>
                <Param name="const float origin[3]"/>
                <Param name="const float angles[3]"/>
                <Param name="const float velocity[3]"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ThrowError" func="yes">
            <Overload retVal="native void" descr="
Params:
    fmt                     String format.
    ...                     Format arguments.
Notes:
    Aborts the current callback and throws an error.  This function
    does not return in that no code is executed following it.
Error:
    Always!
">
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="ThrowNativeError" func="yes">
            <Overload retVal="native int" descr="
Params:
    error                   Error code to use.
    fmt                     Error message format.
    ...                     Format arguments.
Notes:
    Throws an error in the calling plugin of a native, instead of your own plugin.
">
                <Param name="int error"/>
                <Param name="const char[] fmt"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="TranslationPhraseExists" func="yes">
            <Overload retVal="native bool" descr="
Params:
    phrase                  Phrase to look for.
Notes:
    Determines if the specified phrase exists within the plugin&apos;s
    translation cache.
Return:
    True if phrase exists.
">
                <Param name="const char[] phrase"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TrieSnapshotKeyBufferSize" func="yes">
            <Overload retVal="native int" descr="
Params:
    snapshot                Map snapshot.
    index                   Key index (starting from 0).
Notes:
    Returns the buffer size required to store a given key. That is, it returns
    the length of the key plus one.
Error:
    Invalid Handle or index out of range.
Return:
    Buffer size required to store the key string.
">
                <Param name="Handle snapshot"/>
                <Param name="int index"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TrieSnapshotLength" func="yes">
            <Overload retVal="native int" descr="
Params:
    snapshot                Map snapshot.
Notes:
    Returns the number of keys in a map snapshot. Note that this may be
    different from the size of the map, since the map can change after the
    snapshot of its keys was taken.
Error:
    Invalid Handle.
Return:
    Number of keys.
">
                <Param name="Handle snapshot"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TriggerTimer" func="yes">
            <Overload retVal="native void" descr="
Params:
    timer                   Timer Handle to trigger.
    reset                   If reset is true, the elapsed time counter is reset
                            so the full interval must pass again.
Notes:
    Manually triggers a timer so its function will be called.
">
                <Param name="Handle timer"/>
                <Param name="bool reset=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="TrimString" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     The string to trim.
Notes:
    Removes whitespace characters from the beginning and end of a string.
Return:
    Number of bytes written (UTF-8 safe).
">
                <Param name="char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnhookConVarChange" func="yes">
            <Overload retVal="native void" descr="
Params:
    convar                  Handle to the convar.
    callback                An OnConVarChanged function pointer.
Notes:
    Removes a hook for when a console variable&apos;s value is changed.
Error:
    Invalid or corrupt Handle, invalid callback function, or no active hook on convar.
">
                <Param name="Handle convar"/>
                <Param name="ConVarChanged callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnhookEntityOutput" func="yes">
            <Overload retVal="native bool" descr="
Params:
    classname               The classname to hook.
    output                  The output name to hook.
    callback                An EntityOutput function pointer.
Notes:
    Remove an entity output hook.
Error:
    Entity Outputs disabled.
Return:
    True on success, false if no valid hook was found.
">
                <Param name="const char[] classname"/>
                <Param name="const char[] output"/>
                <Param name="EntityOutput callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnhookEvent" func="yes">
            <Overload retVal="native void" descr="
Params:
    name                    Name of event.
    callback                An EventHook function pointer.
    mode                    Optional EventHookMode determining the type of hook.
Notes:
    Removes a hook for when a game event is fired.
Error:
    Invalid callback function or no active hook for specified event.
">
                <Param name="const char[] name"/>
                <Param name="EventHook callback"/>
                <Param name="EventHookMode mode=EventHookMode_Post"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnhookSingleEntityOutput" func="yes">
            <Overload retVal="native bool" descr="
Params:
    entity                  The entity on which to remove the hook.
    output                  The output name to hook.
    callback                An EntityOutput function pointer.
Notes:
    Remove a single entity output hook.
Error:
    Entity Outputs disabled or Invalid Entity index.
Return:
    True on success, false if no valid hook was found.
">
                <Param name="int entity"/>
                <Param name="const char[] output"/>
                <Param name="EntityOutput callback"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnhookUserMessage" func="yes">
            <Overload retVal="native void" descr="
Params:
    msg_id                  Message index.
    hook                    Function used for the hook.
    intercept               Specifies whether the hook was an intercept hook or not.
Notes:
    Removes one usermessage hook.
Error:
    Invalid message index.
">
                <Param name="UserMsg msg_id"/>
                <Param name="MsgHook hook"/>
                <Param name="bool intercept=false"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UnsetCommandOverride" func="yes">
            <Overload retVal="native void" descr="
Params:
    cmd                     String containing command name (case sensitive).
    type                    Override type (specific command or group).
Notes:
    Unsets a command override.
">
                <Param name="const char[] cmd"/>
                <Param name="OverrideType type"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UserMessageToBfRead" func="yes">
            <Overload retVal="stock BfRead" descr="
Notes:
    Make sure to only call this on readable buffers (eg from a message hook).
">
                <Param name="Handle msg"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UserMessageToBfWrite" func="yes">
            <Overload retVal="stock BfWrite" descr="
Notes:
    Make sure to only call this on writable buffers (eg from StartMessage).
">
                <Param name="Handle msg"/>
            </Overload>
        </KeyWord>
        <KeyWord name="UserMessageToProtobuf" func="yes">
            <Overload retVal="stock Protobuf" descr="
">
                <Param name="Handle msg"/>
            </Overload>
        </KeyWord>
        <KeyWord name="VFormat" func="yes">
            <Overload retVal="native int" descr="
Params:
    buffer                  Destination string buffer.
    maxlength               Maximum length of output string buffer.
    format                  Formatting rules.
    varpos                  Argument number which contains the &apos;...&apos; symbol.
                            Note: Arguments start at 1.
Notes:
    Formats a string according to the SourceMod format rules (see documentation).
    This is the same as Format(), except it grabs parameters from a
    parent parameter stack, rather than a local.  This is useful for
    implementing your own variable argument functions.
Return:
    Number of bytes written.
">
                <Param name="char[] buffer"/>
                <Param name="int maxlength"/>
                <Param name="const char[] format"/>
                <Param name="int varpos"/>
            </Overload>
        </KeyWord>
        <KeyWord name="VerifyCoreVersion" func="yes">
            <Overload retVal="native int" descr="
">
            </Overload>
        </KeyWord>
        <KeyWord name="VoteMenu" func="yes">
            <Overload retVal="native bool" descr="
Params:
    menu                    Menu Handle.
    clients                 Array of clients to broadcast to.
    numClients              Number of clients in the array.
    time                    Maximum time to leave menu on the screen.
    flags                   Optional voting flags.
Notes:
    Broadcasts a menu to a list of clients.  The most selected item will be
    returned through MenuAction_End.  On a tie, a random item will be returned
    from a list of the tied items.
    Note that MenuAction_VoteEnd and MenuAction_VoteStart are both
    default callbacks and do not need to be enabled.
Error:
    Invalid Handle, or a vote is already in progress.
Return:
    True on success, false if this menu already has a vote session
    in progress.
">
                <Param name="Handle menu"/>
                <Param name="int[] clients"/>
                <Param name="int numClients"/>
                <Param name="int time"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="VoteMenuToAll" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    menu                    Menu Handle.
    time                    Maximum time to leave menu on the screen.
    flags                   Optional voting flags.
Notes:
    Sends a vote menu to all clients.  See VoteMenu() for more information.
Error:
    Invalid Handle.
Return:
    True on success, false if this menu already has a vote session
    in progress.
">
                <Param name="Handle menu"/>
                <Param name="int time"/>
                <Param name="int flags=0"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WriteFile" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    Handle to the file.
    items                   Array of items to write.  The data is read directly.
                            That is, in 1 or 2-byte mode, the lower byte(s) in
                            each cell are used directly, rather than performing
                            any casts from a 4-byte number to a smaller number.
    num_items               Number of items in the array.
    size                    Size of each item in the array in bytes.
                            Valid sizes are 1, 2, or 4.
Notes:
    Writes binary data to a file.
Error:
    Invalid Handle.
Return:
    True on success, false on error.
">
                <Param name="Handle hndl"/>
                <Param name="const int[] items"/>
                <Param name="int num_items"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WriteFileCell" func="yes">
            <Overload retVal="stock bool" descr="
Params:
    hndl                    Handle to the file.
    data                    Cell to write to the file.
    size                    Size of the data to read in bytes.  Valid
                            sizes are 1, 2, or 4 bytes.  If the size
                            is less than 4 bytes, the data is truncated
                            rather than casted.  That is, only the lower
                            bits will be read.
Notes:
    Writes a single binary cell to a file.
Error:
    Invalid Handle.
Return:
    True on success, false on error.
">
                <Param name="Handle hndl"/>
                <Param name="int data"/>
                <Param name="int size"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WriteFileLine" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    Handle to the file.
    format                  Formatting rules.
    ...                     Variable number of format parameters.
Notes:
    Writes a line of text to a text file.  A newline is automatically appended.
Error:
    Invalid Handle.
Return:
    True on success, false otherwise.
">
                <Param name="Handle hndl"/>
                <Param name="const char[] format"/>
                <Param name="any ..."/>
            </Overload>
        </KeyWord>
        <KeyWord name="WriteFileString" func="yes">
            <Overload retVal="native bool" descr="
Params:
    hndl                    Handle to the file.
    buffer                  String to write.
    term                    True to append NUL terminator, false otherwise.
Notes:
    Writes a binary string to a file.
Error:
    Invalid Handle.
Return:
    True on success, false on error.
">
                <Param name="Handle hndl"/>
                <Param name="const char[] buffer"/>
                <Param name="bool term"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WritePackCell" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    cell                    Cell to add.
Notes:
    Packs a normal cell into a data pack.
Error:
    Invalid handle.
">
                <Param name="Handle pack"/>
                <Param name="any cell"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WritePackFloat" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    val                     Float to add.
Notes:
    Packs a float into a data pack.
Error:
    Invalid handle.
">
                <Param name="Handle pack"/>
                <Param name="float val"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WritePackFunction" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    fktptr                  Function pointer to add.
Notes:
    Packs a function pointer into a data pack.
Error:
    Invalid handle.
">
                <Param name="Handle pack"/>
                <Param name="Function fktptr"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WritePackString" func="yes">
            <Overload retVal="native void" descr="
Params:
    pack                    Handle to the data pack.
    str                     String to add.
Notes:
    Packs a string into a data pack.
Error:
    Invalid handle.
">
                <Param name="Handle pack"/>
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="float" func="yes">
            <Overload retVal="native float" descr="
Params:
    value                   Integer to convert.
Notes:
    Converts an integer into a floating point value.
Return:
    Floating point value.
">
                <Param name="int value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="strcmp" func="yes">
            <Overload retVal="native int" descr="
Params:
    str1                    First string (left).
    str2                    Second string (right).
    caseSensitive           If true (default), comparison is case sensitive.
                            If false, comparison is case insensitive.
Notes:
    Compares two strings lexographically.
Return:
    -1 if str1 &lt; str2
    0 if str1 == str2
    1 if str1 &gt; str2
">
                <Param name="const char[] str1"/>
                <Param name="const char[] str2"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="strcopy" func="yes">
            <Overload retVal="native int" descr="
Params:
    dest                    Destination string buffer to copy to.
    destLen                 Destination buffer length (includes null terminator).
    source                  Source string buffer to copy from.
Notes:
    Copies one string to another string.
    If the destination buffer is too small to hold the source string, the
    destination will be truncated.
Return:
    Number of cells written.
">
                <Param name="char[] dest"/>
                <Param name="int destLen"/>
                <Param name="const char[] source"/>
            </Overload>
        </KeyWord>
        <KeyWord name="strlen" func="yes">
            <Overload retVal="native int" descr="
Params:
    str                     String to check.
Notes:
    Calculates the length of a string.
Return:
    Number of valid character bytes in the string.
">
                <Param name="const char[] str"/>
            </Overload>
        </KeyWord>
        <KeyWord name="strncmp" func="yes">
            <Overload retVal="native int" descr="
Params:
    str1                    First string (left).
    str2                    Second string (right).
    num                     Number of characters to compare.
    caseSensitive           If true (default), comparison is case sensitive.
                            If false, comparison is case insensitive.
Notes:
    Compares two strings parts lexographically.
Return:
    -1 if str1 &lt; str2
    0 if str1 == str2
    1 if str1 &gt; str2
">
                <Param name="const char[] str1"/>
                <Param name="const char[] str2"/>
                <Param name="int num"/>
                <Param name="bool caseSensitive=true"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ADMFLAG_BAN"/>
        <KeyWord name="ADMFLAG_CHANGEMAP"/>
        <KeyWord name="ADMFLAG_CHAT"/>
        <KeyWord name="ADMFLAG_CHEATS"/>
        <KeyWord name="ADMFLAG_CONFIG"/>
        <KeyWord name="ADMFLAG_CONVARS"/>
        <KeyWord name="ADMFLAG_CUSTOM1"/>
        <KeyWord name="ADMFLAG_CUSTOM2"/>
        <KeyWord name="ADMFLAG_CUSTOM3"/>
        <KeyWord name="ADMFLAG_CUSTOM4"/>
        <KeyWord name="ADMFLAG_CUSTOM5"/>
        <KeyWord name="ADMFLAG_CUSTOM6"/>
        <KeyWord name="ADMFLAG_GENERIC"/>
        <KeyWord name="ADMFLAG_KICK"/>
        <KeyWord name="ADMFLAG_PASSWORD"/>
        <KeyWord name="ADMFLAG_RCON"/>
        <KeyWord name="ADMFLAG_RESERVATION"/>
        <KeyWord name="ADMFLAG_ROOT"/>
        <KeyWord name="ADMFLAG_SLAY"/>
        <KeyWord name="ADMFLAG_UNBAN"/>
        <KeyWord name="ADMFLAG_VOTE"/>
        <KeyWord name="ADMINMENU_PLAYERCOMMANDS"/>
        <KeyWord name="ADMINMENU_SERVERCOMMANDS"/>
        <KeyWord name="ADMINMENU_VOTINGCOMMANDS"/>
        <KeyWord name="ALL_VISIBLE_CONTENTS"/>
        <KeyWord name="APLRes"/>
        <KeyWord name="APLRes_Failure"/>
        <KeyWord name="APLRes_SilentFailure"/>
        <KeyWord name="APLRes_Success"/>
        <KeyWord name="AUTHMETHOD_IP"/>
        <KeyWord name="AUTHMETHOD_NAME"/>
        <KeyWord name="AUTHMETHOD_STEAM"/>
        <KeyWord name="AUTOLOAD_EXTENSIONS"/>
        <KeyWord name="Access_Effective"/>
        <KeyWord name="Access_Real"/>
        <KeyWord name="Action"/>
        <KeyWord name="Address"/>
        <KeyWord name="Address_Null"/>
        <KeyWord name="AdmAccessMode"/>
        <KeyWord name="AdminCachePart"/>
        <KeyWord name="AdminCache_Admins"/>
        <KeyWord name="AdminCache_Groups"/>
        <KeyWord name="AdminCache_Overrides"/>
        <KeyWord name="AdminFlag"/>
        <KeyWord name="AdminFlags_TOTAL"/>
        <KeyWord name="AdminId"/>
        <KeyWord name="Admin_Ban"/>
        <KeyWord name="Admin_Changemap"/>
        <KeyWord name="Admin_Chat"/>
        <KeyWord name="Admin_Cheats"/>
        <KeyWord name="Admin_Config"/>
        <KeyWord name="Admin_Convars"/>
        <KeyWord name="Admin_Custom1"/>
        <KeyWord name="Admin_Custom2"/>
        <KeyWord name="Admin_Custom3"/>
        <KeyWord name="Admin_Custom4"/>
        <KeyWord name="Admin_Custom5"/>
        <KeyWord name="Admin_Custom6"/>
        <KeyWord name="Admin_Generic"/>
        <KeyWord name="Admin_Kick"/>
        <KeyWord name="Admin_Password"/>
        <KeyWord name="Admin_RCON"/>
        <KeyWord name="Admin_Reservation"/>
        <KeyWord name="Admin_Root"/>
        <KeyWord name="Admin_Slay"/>
        <KeyWord name="Admin_Unban"/>
        <KeyWord name="Admin_Vote"/>
        <KeyWord name="ArrayList"/>
        <KeyWord name="ArrayStack"/>
        <KeyWord name="AuthIdType"/>
        <KeyWord name="AuthId_Engine"/>
        <KeyWord name="AuthId_Steam2"/>
        <KeyWord name="AuthId_Steam3"/>
        <KeyWord name="AuthId_SteamID64"/>
        <KeyWord name="BANFLAG_AUTHID"/>
        <KeyWord name="BANFLAG_AUTO"/>
        <KeyWord name="BANFLAG_IP"/>
        <KeyWord name="BANFLAG_NOKICK"/>
        <KeyWord name="BfRead"/>
        <KeyWord name="BfWrite"/>
        <KeyWord name="COMMAND_FILTER_ALIVE"/>
        <KeyWord name="COMMAND_FILTER_CONNECTED"/>
        <KeyWord name="COMMAND_FILTER_DEAD"/>
        <KeyWord name="COMMAND_FILTER_NO_BOTS"/>
        <KeyWord name="COMMAND_FILTER_NO_IMMUNITY"/>
        <KeyWord name="COMMAND_FILTER_NO_MULTI"/>
        <KeyWord name="COMMAND_TARGET_AMBIGUOUS"/>
        <KeyWord name="COMMAND_TARGET_EMPTY_FILTER"/>
        <KeyWord name="COMMAND_TARGET_IMMUNE"/>
        <KeyWord name="COMMAND_TARGET_NONE"/>
        <KeyWord name="COMMAND_TARGET_NOT_ALIVE"/>
        <KeyWord name="COMMAND_TARGET_NOT_DEAD"/>
        <KeyWord name="COMMAND_TARGET_NOT_HUMAN"/>
        <KeyWord name="COMMAND_TARGET_NOT_IN_GAME"/>
        <KeyWord name="CONTENTS_AREAPORTAL"/>
        <KeyWord name="CONTENTS_AUX"/>
        <KeyWord name="CONTENTS_CURRENT_0"/>
        <KeyWord name="CONTENTS_CURRENT_180"/>
        <KeyWord name="CONTENTS_CURRENT_270"/>
        <KeyWord name="CONTENTS_CURRENT_90"/>
        <KeyWord name="CONTENTS_CURRENT_DOWN"/>
        <KeyWord name="CONTENTS_CURRENT_UP"/>
        <KeyWord name="CONTENTS_DEBRIS"/>
        <KeyWord name="CONTENTS_DETAIL"/>
        <KeyWord name="CONTENTS_EMPTY"/>
        <KeyWord name="CONTENTS_GRATE"/>
        <KeyWord name="CONTENTS_HITBOX"/>
        <KeyWord name="CONTENTS_IGNORE_NODRAW_OPAQUE"/>
        <KeyWord name="CONTENTS_LADDER"/>
        <KeyWord name="CONTENTS_MIST"/>
        <KeyWord name="CONTENTS_MONSTER"/>
        <KeyWord name="CONTENTS_MONSTERCLIP"/>
        <KeyWord name="CONTENTS_MOVEABLE"/>
        <KeyWord name="CONTENTS_OPAQUE"/>
        <KeyWord name="CONTENTS_ORIGIN"/>
        <KeyWord name="CONTENTS_PLAYERCLIP"/>
        <KeyWord name="CONTENTS_SLIME"/>
        <KeyWord name="CONTENTS_SOLID"/>
        <KeyWord name="CONTENTS_TEAM1"/>
        <KeyWord name="CONTENTS_TEAM2"/>
        <KeyWord name="CONTENTS_TESTFOGVOLUME"/>
        <KeyWord name="CONTENTS_TRANSLUCENT"/>
        <KeyWord name="CONTENTS_UNUSED5"/>
        <KeyWord name="CONTENTS_UNUSED6"/>
        <KeyWord name="CONTENTS_WATER"/>
        <KeyWord name="CONTENTS_WINDOW"/>
        <KeyWord name="CSRoundEndReason"/>
        <KeyWord name="CSRoundEnd_BombDefused"/>
        <KeyWord name="CSRoundEnd_CTStoppedEscape"/>
        <KeyWord name="CSRoundEnd_CTSurrender"/>
        <KeyWord name="CSRoundEnd_CTWin"/>
        <KeyWord name="CSRoundEnd_CTsReachedHostage"/>
        <KeyWord name="CSRoundEnd_Draw"/>
        <KeyWord name="CSRoundEnd_GameStart"/>
        <KeyWord name="CSRoundEnd_HostagesNotRescued"/>
        <KeyWord name="CSRoundEnd_HostagesRescued"/>
        <KeyWord name="CSRoundEnd_TargetBombed"/>
        <KeyWord name="CSRoundEnd_TargetSaved"/>
        <KeyWord name="CSRoundEnd_TerroristWin"/>
        <KeyWord name="CSRoundEnd_TerroristsEscaped"/>
        <KeyWord name="CSRoundEnd_TerroristsNotEscaped"/>
        <KeyWord name="CSRoundEnd_TerroristsPlanted"/>
        <KeyWord name="CSRoundEnd_TerroristsStopped"/>
        <KeyWord name="CSRoundEnd_TerroristsSurrender"/>
        <KeyWord name="CSRoundEnd_VIPEscaped"/>
        <KeyWord name="CSRoundEnd_VIPKilled"/>
        <KeyWord name="CSRoundEnd_VIPNotEscaped"/>
        <KeyWord name="CSWeaponID"/>
        <KeyWord name="CSWeapon_AK47"/>
        <KeyWord name="CSWeapon_ASSAULTSUIT"/>
        <KeyWord name="CSWeapon_AUG"/>
        <KeyWord name="CSWeapon_AWP"/>
        <KeyWord name="CSWeapon_AXE"/>
        <KeyWord name="CSWeapon_BAYONET"/>
        <KeyWord name="CSWeapon_BIZON"/>
        <KeyWord name="CSWeapon_BREACHCHARGE"/>
        <KeyWord name="CSWeapon_BUMPMINE"/>
        <KeyWord name="CSWeapon_C4"/>
        <KeyWord name="CSWeapon_CUTTERS"/>
        <KeyWord name="CSWeapon_CZ75A"/>
        <KeyWord name="CSWeapon_DEAGLE"/>
        <KeyWord name="CSWeapon_DECOY"/>
        <KeyWord name="CSWeapon_DEFUSER"/>
        <KeyWord name="CSWeapon_DIVERSION"/>
        <KeyWord name="CSWeapon_ELITE"/>
        <KeyWord name="CSWeapon_FAMAS"/>
        <KeyWord name="CSWeapon_FIREBOMB"/>
        <KeyWord name="CSWeapon_FISTS"/>
        <KeyWord name="CSWeapon_FIVESEVEN"/>
        <KeyWord name="CSWeapon_FLASHBANG"/>
        <KeyWord name="CSWeapon_FRAGGRENADE"/>
        <KeyWord name="CSWeapon_G3SG1"/>
        <KeyWord name="CSWeapon_GALIL"/>
        <KeyWord name="CSWeapon_GALILAR"/>
        <KeyWord name="CSWeapon_GLOCK"/>
        <KeyWord name="CSWeapon_HAMMER"/>
        <KeyWord name="CSWeapon_HEALTHSHOT"/>
        <KeyWord name="CSWeapon_HEAVYASSAULTSUIT"/>
        <KeyWord name="CSWeapon_HEGRENADE"/>
        <KeyWord name="CSWeapon_HKP2000"/>
        <KeyWord name="CSWeapon_INCGRENADE"/>
        <KeyWord name="CSWeapon_KEVLAR"/>
        <KeyWord name="CSWeapon_KNIFE"/>
        <KeyWord name="CSWeapon_KNIFE_BUTTERFLY"/>
        <KeyWord name="CSWeapon_KNIFE_CANIS"/>
        <KeyWord name="CSWeapon_KNIFE_CORD"/>
        <KeyWord name="CSWeapon_KNIFE_FALCHION"/>
        <KeyWord name="CSWeapon_KNIFE_FLIP"/>
        <KeyWord name="CSWeapon_KNIFE_GG"/>
        <KeyWord name="CSWeapon_KNIFE_GHOST"/>
        <KeyWord name="CSWeapon_KNIFE_GUT"/>
        <KeyWord name="CSWeapon_KNIFE_GYPSY_JACKKNIFE"/>
        <KeyWord name="CSWeapon_KNIFE_KARAMBIT"/>
        <KeyWord name="CSWeapon_KNIFE_M9_BAYONET"/>
        <KeyWord name="CSWeapon_KNIFE_OUTDOOR"/>
        <KeyWord name="CSWeapon_KNIFE_PUSH"/>
        <KeyWord name="CSWeapon_KNIFE_SKELETON"/>
        <KeyWord name="CSWeapon_KNIFE_STILETTO"/>
        <KeyWord name="CSWeapon_KNIFE_SURVIVAL_BOWIE"/>
        <KeyWord name="CSWeapon_KNIFE_T"/>
        <KeyWord name="CSWeapon_KNIFE_TATICAL"/>
        <KeyWord name="CSWeapon_KNIFE_URSUS"/>
        <KeyWord name="CSWeapon_KNIFE_WIDOWMAKER"/>
        <KeyWord name="CSWeapon_M249"/>
        <KeyWord name="CSWeapon_M3"/>
        <KeyWord name="CSWeapon_M4A1"/>
        <KeyWord name="CSWeapon_M4A1_SILENCER"/>
        <KeyWord name="CSWeapon_MAC10"/>
        <KeyWord name="CSWeapon_MAG7"/>
        <KeyWord name="CSWeapon_MAX_WEAPONS"/>
        <KeyWord name="CSWeapon_MAX_WEAPONS_NO_KNIFES"/>
        <KeyWord name="CSWeapon_MELEE"/>
        <KeyWord name="CSWeapon_MOLOTOV"/>
        <KeyWord name="CSWeapon_MP5NAVY"/>
        <KeyWord name="CSWeapon_MP7"/>
        <KeyWord name="CSWeapon_MP9"/>
        <KeyWord name="CSWeapon_NEGEV"/>
        <KeyWord name="CSWeapon_NIGHTVISION"/>
        <KeyWord name="CSWeapon_NONE"/>
        <KeyWord name="CSWeapon_NOVA"/>
        <KeyWord name="CSWeapon_P228"/>
        <KeyWord name="CSWeapon_P250"/>
        <KeyWord name="CSWeapon_P90"/>
        <KeyWord name="CSWeapon_REVOLVER"/>
        <KeyWord name="CSWeapon_SAWEDOFF"/>
        <KeyWord name="CSWeapon_SCAR17"/>
        <KeyWord name="CSWeapon_SCAR20"/>
        <KeyWord name="CSWeapon_SCOUT"/>
        <KeyWord name="CSWeapon_SG550"/>
        <KeyWord name="CSWeapon_SG552"/>
        <KeyWord name="CSWeapon_SG556"/>
        <KeyWord name="CSWeapon_SHIELD"/>
        <KeyWord name="CSWeapon_SMOKEGRENADE"/>
        <KeyWord name="CSWeapon_SNOWBALL"/>
        <KeyWord name="CSWeapon_SPANNER"/>
        <KeyWord name="CSWeapon_SSG08"/>
        <KeyWord name="CSWeapon_TABLET"/>
        <KeyWord name="CSWeapon_TAGGRENADE"/>
        <KeyWord name="CSWeapon_TASER"/>
        <KeyWord name="CSWeapon_TEC9"/>
        <KeyWord name="CSWeapon_TMP"/>
        <KeyWord name="CSWeapon_UMP45"/>
        <KeyWord name="CSWeapon_USP"/>
        <KeyWord name="CSWeapon_USP_SILENCER"/>
        <KeyWord name="CSWeapon_XM1014"/>
        <KeyWord name="CS_DMG_HEADSHOT"/>
        <KeyWord name="CS_SLOT_C4"/>
        <KeyWord name="CS_SLOT_GRENADE"/>
        <KeyWord name="CS_SLOT_KNIFE"/>
        <KeyWord name="CS_SLOT_PRIMARY"/>
        <KeyWord name="CS_SLOT_SECONDARY"/>
        <KeyWord name="CS_TEAM_CT"/>
        <KeyWord name="CS_TEAM_NONE"/>
        <KeyWord name="CS_TEAM_SPECTATOR"/>
        <KeyWord name="CS_TEAM_T"/>
        <KeyWord name="ClientRangeType"/>
        <KeyWord name="CommandIterator"/>
        <KeyWord name="Command_Allow"/>
        <KeyWord name="Command_Deny"/>
        <KeyWord name="ConVar"/>
        <KeyWord name="ConVarBound_Lower"/>
        <KeyWord name="ConVarBound_Upper"/>
        <KeyWord name="ConVarBounds"/>
        <KeyWord name="ConVarQueryFinished"/>
        <KeyWord name="ConVarQueryResult"/>
        <KeyWord name="ConVarQuery_NotFound"/>
        <KeyWord name="ConVarQuery_NotValid"/>
        <KeyWord name="ConVarQuery_Okay"/>
        <KeyWord name="ConVarQuery_Protected"/>
        <KeyWord name="Cookie"/>
        <KeyWord name="CookieAccess"/>
        <KeyWord name="CookieAccess_Private"/>
        <KeyWord name="CookieAccess_Protected"/>
        <KeyWord name="CookieAccess_Public"/>
        <KeyWord name="CookieMenu"/>
        <KeyWord name="CookieMenuAction"/>
        <KeyWord name="CookieMenuAction_DisplayOption"/>
        <KeyWord name="CookieMenuAction_SelectOption"/>
        <KeyWord name="CookieMenu_OnOff"/>
        <KeyWord name="CookieMenu_OnOff_Int"/>
        <KeyWord name="CookieMenu_YesNo"/>
        <KeyWord name="CookieMenu_YesNo_Int"/>
        <KeyWord name="DBBindType"/>
        <KeyWord name="DBBind_Float"/>
        <KeyWord name="DBBind_Int"/>
        <KeyWord name="DBBind_String"/>
        <KeyWord name="DBDriver"/>
        <KeyWord name="DBPrio_High"/>
        <KeyWord name="DBPrio_Low"/>
        <KeyWord name="DBPrio_Normal"/>
        <KeyWord name="DBPriority"/>
        <KeyWord name="DBResult"/>
        <KeyWord name="DBResultSet"/>
        <KeyWord name="DBStatement"/>
        <KeyWord name="DBVal_Data"/>
        <KeyWord name="DBVal_Error"/>
        <KeyWord name="DBVal_Null"/>
        <KeyWord name="DBVal_TypeMismatch"/>
        <KeyWord name="DISPSURF_FLAG_BUILDABLE"/>
        <KeyWord name="DISPSURF_FLAG_SURFACE"/>
        <KeyWord name="DISPSURF_FLAG_SURFPROP1"/>
        <KeyWord name="DISPSURF_FLAG_SURFPROP2"/>
        <KeyWord name="DISPSURF_FLAG_WALKABLE"/>
        <KeyWord name="DMG_ACID"/>
        <KeyWord name="DMG_AIRBOAT"/>
        <KeyWord name="DMG_ALWAYSGIB"/>
        <KeyWord name="DMG_BLAST"/>
        <KeyWord name="DMG_BLAST_SURFACE"/>
        <KeyWord name="DMG_BUCKSHOT"/>
        <KeyWord name="DMG_BULLET"/>
        <KeyWord name="DMG_BURN"/>
        <KeyWord name="DMG_CLUB"/>
        <KeyWord name="DMG_CRIT"/>
        <KeyWord name="DMG_CRUSH"/>
        <KeyWord name="DMG_DIRECT"/>
        <KeyWord name="DMG_DISSOLVE"/>
        <KeyWord name="DMG_DROWN"/>
        <KeyWord name="DMG_DROWNRECOVER"/>
        <KeyWord name="DMG_ENERGYBEAM"/>
        <KeyWord name="DMG_FALL"/>
        <KeyWord name="DMG_GENERIC"/>
        <KeyWord name="DMG_HALF_FALLOFF"/>
        <KeyWord name="DMG_IGNITE"/>
        <KeyWord name="DMG_NERVEGAS"/>
        <KeyWord name="DMG_NEVERGIB"/>
        <KeyWord name="DMG_NOCLOSEDISTANCEMOD"/>
        <KeyWord name="DMG_PARALYZE"/>
        <KeyWord name="DMG_PHYSGUN"/>
        <KeyWord name="DMG_PLASMA"/>
        <KeyWord name="DMG_POISON"/>
        <KeyWord name="DMG_PREVENT_PHYSICS_FORCE"/>
        <KeyWord name="DMG_RADIATION"/>
        <KeyWord name="DMG_RADIUS_MAX"/>
        <KeyWord name="DMG_REMOVENORAGDOLL"/>
        <KeyWord name="DMG_SHOCK"/>
        <KeyWord name="DMG_SLASH"/>
        <KeyWord name="DMG_SLOWBURN"/>
        <KeyWord name="DMG_SONIC"/>
        <KeyWord name="DMG_USEDISTANCEMOD"/>
        <KeyWord name="DMG_USE_HITLOCATIONS"/>
        <KeyWord name="DMG_VEHICLE"/>
        <KeyWord name="DataPack"/>
        <KeyWord name="DataPackPos"/>
        <KeyWord name="Database"/>
        <KeyWord name="DialogType"/>
        <KeyWord name="DialogType_AskConnect"/>
        <KeyWord name="DialogType_Entry"/>
        <KeyWord name="DialogType_Menu"/>
        <KeyWord name="DialogType_Msg"/>
        <KeyWord name="DialogType_Text"/>
        <KeyWord name="DirectoryListing"/>
        <KeyWord name="ET_Event"/>
        <KeyWord name="ET_Hook"/>
        <KeyWord name="ET_Ignore"/>
        <KeyWord name="ET_Single"/>
        <KeyWord name="EngineVersion"/>
        <KeyWord name="Engine_AlienSwarm"/>
        <KeyWord name="Engine_BlackMesa"/>
        <KeyWord name="Engine_Blade"/>
        <KeyWord name="Engine_BloodyGoodTime"/>
        <KeyWord name="Engine_CSGO"/>
        <KeyWord name="Engine_CSS"/>
        <KeyWord name="Engine_Contagion"/>
        <KeyWord name="Engine_DODS"/>
        <KeyWord name="Engine_DOI"/>
        <KeyWord name="Engine_DOTA"/>
        <KeyWord name="Engine_DarkMessiah"/>
        <KeyWord name="Engine_EYE"/>
        <KeyWord name="Engine_HL2DM"/>
        <KeyWord name="Engine_Insurgency"/>
        <KeyWord name="Engine_Left4Dead"/>
        <KeyWord name="Engine_Left4Dead2"/>
        <KeyWord name="Engine_NuclearDawn"/>
        <KeyWord name="Engine_Original"/>
        <KeyWord name="Engine_Portal2"/>
        <KeyWord name="Engine_SDK2013"/>
        <KeyWord name="Engine_SourceSDK2006"/>
        <KeyWord name="Engine_SourceSDK2007"/>
        <KeyWord name="Engine_TF2"/>
        <KeyWord name="Engine_Unknown"/>
        <KeyWord name="EntityOutput"/>
        <KeyWord name="Event"/>
        <KeyWord name="EventHook"/>
        <KeyWord name="EventHookMode"/>
        <KeyWord name="EventHookMode_Post"/>
        <KeyWord name="EventHookMode_PostNoCopy"/>
        <KeyWord name="EventHookMode_Pre"/>
        <KeyWord name="ExecType"/>
        <KeyWord name="FBEAM_ENDENTITY"/>
        <KeyWord name="FBEAM_ENDVISIBLE"/>
        <KeyWord name="FBEAM_FADEIN"/>
        <KeyWord name="FBEAM_FADEOUT"/>
        <KeyWord name="FBEAM_FOREVER"/>
        <KeyWord name="FBEAM_HALOBEAM"/>
        <KeyWord name="FBEAM_ISACTIVE"/>
        <KeyWord name="FBEAM_NOTILE"/>
        <KeyWord name="FBEAM_ONLYNOISEONCE"/>
        <KeyWord name="FBEAM_SHADEIN"/>
        <KeyWord name="FBEAM_SHADEOUT"/>
        <KeyWord name="FBEAM_SINENOISE"/>
        <KeyWord name="FBEAM_SOLID"/>
        <KeyWord name="FBEAM_STARTENTITY"/>
        <KeyWord name="FBEAM_STARTVISIBLE"/>
        <KeyWord name="FBEAM_USE_HITBOXES"/>
        <KeyWord name="FCVAR_ACCESSIBLE_FROM_THREADS"/>
        <KeyWord name="FCVAR_ARCHIVE"/>
        <KeyWord name="FCVAR_ARCHIVE_GAMECONSOLE"/>
        <KeyWord name="FCVAR_ARCHIVE_XBOX"/>
        <KeyWord name="FCVAR_CHEAT"/>
        <KeyWord name="FCVAR_CLIENTCMD_CAN_EXECUTE"/>
        <KeyWord name="FCVAR_CLIENTDLL"/>
        <KeyWord name="FCVAR_DEMO"/>
        <KeyWord name="FCVAR_DEVELOPMENTONLY"/>
        <KeyWord name="FCVAR_DONTRECORD"/>
        <KeyWord name="FCVAR_GAMEDLL"/>
        <KeyWord name="FCVAR_HIDDEN"/>
        <KeyWord name="FCVAR_LAUNCHER"/>
        <KeyWord name="FCVAR_MATERIAL_SYSTEM"/>
        <KeyWord name="FCVAR_MATERIAL_SYSTEM_THREAD"/>
        <KeyWord name="FCVAR_NEVER_AS_STRING"/>
        <KeyWord name="FCVAR_NONE"/>
        <KeyWord name="FCVAR_NOTIFY"/>
        <KeyWord name="FCVAR_NOT_CONNECTED"/>
        <KeyWord name="FCVAR_PRINTABLEONLY"/>
        <KeyWord name="FCVAR_PROTECTED"/>
        <KeyWord name="FCVAR_RELEASE"/>
        <KeyWord name="FCVAR_RELOAD_MATERIALS"/>
        <KeyWord name="FCVAR_RELOAD_TEXTURES"/>
        <KeyWord name="FCVAR_REPLICATED"/>
        <KeyWord name="FCVAR_SERVER_CANNOT_QUERY"/>
        <KeyWord name="FCVAR_SERVER_CAN_EXECUTE"/>
        <KeyWord name="FCVAR_SPONLY"/>
        <KeyWord name="FCVAR_SS"/>
        <KeyWord name="FCVAR_SS_ADDED"/>
        <KeyWord name="FCVAR_UNLOGGED"/>
        <KeyWord name="FCVAR_UNREGISTERED"/>
        <KeyWord name="FCVAR_USERINFO"/>
        <KeyWord name="FEATURECAP_COMMANDLISTENER"/>
        <KeyWord name="FEATURECAP_PLAYERRUNCMD_11PARAMS"/>
        <KeyWord name="FLOAT_PI"/>
        <KeyWord name="FL_AIMTARGET"/>
        <KeyWord name="FL_ATCONTROLS"/>
        <KeyWord name="FL_BASEVELOCITY"/>
        <KeyWord name="FL_CLIENT"/>
        <KeyWord name="FL_CONVEYOR"/>
        <KeyWord name="FL_DISSOLVING"/>
        <KeyWord name="FL_DONTTOUCH"/>
        <KeyWord name="FL_DUCKING"/>
        <KeyWord name="FL_EDICT_ALWAYS"/>
        <KeyWord name="FL_EDICT_CHANGED"/>
        <KeyWord name="FL_EDICT_DIRTY_PVS_INFORMATION"/>
        <KeyWord name="FL_EDICT_DONTSEND"/>
        <KeyWord name="FL_EDICT_FREE"/>
        <KeyWord name="FL_EDICT_FULL"/>
        <KeyWord name="FL_EDICT_FULLCHECK"/>
        <KeyWord name="FL_EDICT_PENDING_DORMANT_CHECK"/>
        <KeyWord name="FL_EDICT_PVSCHECK"/>
        <KeyWord name="FL_EP2V_UNKNOWN1"/>
        <KeyWord name="FL_FAKECLIENT"/>
        <KeyWord name="FL_FLY"/>
        <KeyWord name="FL_FREEZING"/>
        <KeyWord name="FL_FROZEN"/>
        <KeyWord name="FL_FULL_EDICT_CHANGED"/>
        <KeyWord name="FL_GODMODE"/>
        <KeyWord name="FL_GRAPHED"/>
        <KeyWord name="FL_GRENADE"/>
        <KeyWord name="FL_INRAIN"/>
        <KeyWord name="FL_INWATER"/>
        <KeyWord name="FL_KILLME"/>
        <KeyWord name="FL_NOTARGET"/>
        <KeyWord name="FL_NPC"/>
        <KeyWord name="FL_OBJECT"/>
        <KeyWord name="FL_ONFIRE"/>
        <KeyWord name="FL_ONGROUND"/>
        <KeyWord name="FL_ONTRAIN"/>
        <KeyWord name="FL_PARTIALGROUND"/>
        <KeyWord name="FL_STATICPROP"/>
        <KeyWord name="FL_STEPMOVEMENT"/>
        <KeyWord name="FL_SWIM"/>
        <KeyWord name="FL_TRANSRAGDOLL"/>
        <KeyWord name="FL_UNBLOCKABLE_BY_PLAYER"/>
        <KeyWord name="FL_WATERJUMP"/>
        <KeyWord name="FL_WORLDBRUSH"/>
        <KeyWord name="FPERM_G_EXEC"/>
        <KeyWord name="FPERM_G_READ"/>
        <KeyWord name="FPERM_G_WRITE"/>
        <KeyWord name="FPERM_O_EXEC"/>
        <KeyWord name="FPERM_O_READ"/>
        <KeyWord name="FPERM_O_WRITE"/>
        <KeyWord name="FPERM_U_EXEC"/>
        <KeyWord name="FPERM_U_READ"/>
        <KeyWord name="FPERM_U_WRITE"/>
        <KeyWord name="FeatureStatus"/>
        <KeyWord name="FeatureStatus_Available"/>
        <KeyWord name="FeatureStatus_Unavailable"/>
        <KeyWord name="FeatureStatus_Unknown"/>
        <KeyWord name="FeatureType"/>
        <KeyWord name="FeatureType_Capability"/>
        <KeyWord name="FeatureType_Native"/>
        <KeyWord name="File"/>
        <KeyWord name="FileTimeMode"/>
        <KeyWord name="FileTime_Created"/>
        <KeyWord name="FileTime_LastAccess"/>
        <KeyWord name="FileTime_LastChange"/>
        <KeyWord name="FileType"/>
        <KeyWord name="FileType_Directory"/>
        <KeyWord name="FileType_File"/>
        <KeyWord name="FileType_Unknown"/>
        <KeyWord name="FindMapResult"/>
        <KeyWord name="FindMap_Found"/>
        <KeyWord name="FindMap_FuzzyMatch"/>
        <KeyWord name="FindMap_NonCanonical"/>
        <KeyWord name="FindMap_NotFound"/>
        <KeyWord name="FindMap_PossiblyAvailable"/>
        <KeyWord name="FrameIterator"/>
        <KeyWord name="GameData"/>
        <KeyWord name="GlobalForward"/>
        <KeyWord name="GroupId"/>
        <KeyWord name="Handle"/>
        <KeyWord name="INVALID_ADMIN_ID"/>
        <KeyWord name="INVALID_ENT_REFERENCE"/>
        <KeyWord name="INVALID_FCVAR_FLAGS"/>
        <KeyWord name="INVALID_GROUP_ID"/>
        <KeyWord name="INVALID_HANDLE"/>
        <KeyWord name="INVALID_MESSAGE_ID"/>
        <KeyWord name="INVALID_STRING_INDEX"/>
        <KeyWord name="INVALID_STRING_TABLE"/>
        <KeyWord name="INVALID_TOPMENUOBJECT"/>
        <KeyWord name="IN_ALT1"/>
        <KeyWord name="IN_ALT2"/>
        <KeyWord name="IN_ATTACK"/>
        <KeyWord name="IN_ATTACK2"/>
        <KeyWord name="IN_ATTACK3"/>
        <KeyWord name="IN_BACK"/>
        <KeyWord name="IN_BULLRUSH"/>
        <KeyWord name="IN_CANCEL"/>
        <KeyWord name="IN_DUCK"/>
        <KeyWord name="IN_FORWARD"/>
        <KeyWord name="IN_GRENADE1"/>
        <KeyWord name="IN_GRENADE2"/>
        <KeyWord name="IN_JUMP"/>
        <KeyWord name="IN_LEFT"/>
        <KeyWord name="IN_MOVELEFT"/>
        <KeyWord name="IN_MOVERIGHT"/>
        <KeyWord name="IN_RELOAD"/>
        <KeyWord name="IN_RIGHT"/>
        <KeyWord name="IN_RUN"/>
        <KeyWord name="IN_SCORE"/>
        <KeyWord name="IN_SPEED"/>
        <KeyWord name="IN_USE"/>
        <KeyWord name="IN_WALK"/>
        <KeyWord name="IN_WEAPON1"/>
        <KeyWord name="IN_WEAPON2"/>
        <KeyWord name="IN_ZOOM"/>
        <KeyWord name="ITEMDRAW_CONTROL"/>
        <KeyWord name="ITEMDRAW_DEFAULT"/>
        <KeyWord name="ITEMDRAW_DISABLED"/>
        <KeyWord name="ITEMDRAW_IGNORE"/>
        <KeyWord name="ITEMDRAW_NOTEXT"/>
        <KeyWord name="ITEMDRAW_RAWLINE"/>
        <KeyWord name="ITEMDRAW_SPACER"/>
        <KeyWord name="Identity"/>
        <KeyWord name="Identity_Core"/>
        <KeyWord name="Identity_Extension"/>
        <KeyWord name="Identity_Plugin"/>
        <KeyWord name="ImmunityType"/>
        <KeyWord name="Immunity_Default"/>
        <KeyWord name="Immunity_Global"/>
        <KeyWord name="KeyValues"/>
        <KeyWord name="KvDataTypes"/>
        <KeyWord name="KvData_Color"/>
        <KeyWord name="KvData_Float"/>
        <KeyWord name="KvData_Int"/>
        <KeyWord name="KvData_NUMTYPES"/>
        <KeyWord name="KvData_None"/>
        <KeyWord name="KvData_Ptr"/>
        <KeyWord name="KvData_String"/>
        <KeyWord name="KvData_UInt64"/>
        <KeyWord name="KvData_WString"/>
        <KeyWord name="LANG_SERVER"/>
        <KeyWord name="LAST_VISIBLE_CONTENTS"/>
        <KeyWord name="ListenOverride"/>
        <KeyWord name="Listen_Default"/>
        <KeyWord name="Listen_No"/>
        <KeyWord name="Listen_Yes"/>
        <KeyWord name="MAPLIST_FLAG_CLEARARRAY"/>
        <KeyWord name="MAPLIST_FLAG_MAPSFOLDER"/>
        <KeyWord name="MAPLIST_FLAG_NO_DEFAULT"/>
        <KeyWord name="MASK_ALL"/>
        <KeyWord name="MASK_NPCSOLID"/>
        <KeyWord name="MASK_NPCSOLID_BRUSHONLY"/>
        <KeyWord name="MASK_NPCWORLDSTATIC"/>
        <KeyWord name="MASK_OPAQUE"/>
        <KeyWord name="MASK_OPAQUE_AND_NPCS"/>
        <KeyWord name="MASK_PLAYERSOLID"/>
        <KeyWord name="MASK_PLAYERSOLID_BRUSHONLY"/>
        <KeyWord name="MASK_SHOT"/>
        <KeyWord name="MASK_SHOT_HULL"/>
        <KeyWord name="MASK_SHOT_PORTAL"/>
        <KeyWord name="MASK_SOLID"/>
        <KeyWord name="MASK_SOLID_BRUSHONLY"/>
        <KeyWord name="MASK_SPLITAREAPORTAL"/>
        <KeyWord name="MASK_VISIBLE"/>
        <KeyWord name="MASK_VISIBLE_AND_NPCS"/>
        <KeyWord name="MASK_WATER"/>
        <KeyWord name="MAXPLAYERS"/>
        <KeyWord name="MAX_LIGHTSTYLES"/>
        <KeyWord name="MAX_NAME_LENGTH"/>
        <KeyWord name="MAX_TARGET_LENGTH"/>
        <KeyWord name="MENUFLAG_BUTTON_EXIT"/>
        <KeyWord name="MENUFLAG_BUTTON_EXITBACK"/>
        <KeyWord name="MENUFLAG_BUTTON_NOVOTE"/>
        <KeyWord name="MENUFLAG_NO_SOUND"/>
        <KeyWord name="MENU_ACTIONS_ALL"/>
        <KeyWord name="MENU_ACTIONS_DEFAULT"/>
        <KeyWord name="MENU_NO_PAGINATION"/>
        <KeyWord name="MENU_TIME_FOREVER"/>
        <KeyWord name="MOTDPANEL_TYPE_FILE"/>
        <KeyWord name="MOTDPANEL_TYPE_INDEX"/>
        <KeyWord name="MOTDPANEL_TYPE_TEXT"/>
        <KeyWord name="MOTDPANEL_TYPE_URL"/>
        <KeyWord name="MOVETYPE_CUSTOM"/>
        <KeyWord name="MOVETYPE_FLY"/>
        <KeyWord name="MOVETYPE_FLYGRAVITY"/>
        <KeyWord name="MOVETYPE_ISOMETRIC"/>
        <KeyWord name="MOVETYPE_LADDER"/>
        <KeyWord name="MOVETYPE_NOCLIP"/>
        <KeyWord name="MOVETYPE_NONE"/>
        <KeyWord name="MOVETYPE_OBSERVER"/>
        <KeyWord name="MOVETYPE_PUSH"/>
        <KeyWord name="MOVETYPE_STEP"/>
        <KeyWord name="MOVETYPE_VPHYSICS"/>
        <KeyWord name="MOVETYPE_WALK"/>
        <KeyWord name="MapChange"/>
        <KeyWord name="MapChange_Instant"/>
        <KeyWord name="MapChange_MapEnd"/>
        <KeyWord name="MapChange_RoundEnd"/>
        <KeyWord name="MaxClients"/>
        <KeyWord name="Menu"/>
        <KeyWord name="MenuAction"/>
        <KeyWord name="MenuAction_Cancel"/>
        <KeyWord name="MenuAction_Display"/>
        <KeyWord name="MenuAction_DisplayItem"/>
        <KeyWord name="MenuAction_DrawItem"/>
        <KeyWord name="MenuAction_End"/>
        <KeyWord name="MenuAction_Select"/>
        <KeyWord name="MenuAction_Start"/>
        <KeyWord name="MenuAction_VoteCancel"/>
        <KeyWord name="MenuAction_VoteEnd"/>
        <KeyWord name="MenuAction_VoteStart"/>
        <KeyWord name="MenuCancel_Disconnected"/>
        <KeyWord name="MenuCancel_Exit"/>
        <KeyWord name="MenuCancel_ExitBack"/>
        <KeyWord name="MenuCancel_Interrupted"/>
        <KeyWord name="MenuCancel_NoDisplay"/>
        <KeyWord name="MenuCancel_Timeout"/>
        <KeyWord name="MenuEnd_Cancelled"/>
        <KeyWord name="MenuEnd_Exit"/>
        <KeyWord name="MenuEnd_ExitBack"/>
        <KeyWord name="MenuEnd_Selected"/>
        <KeyWord name="MenuEnd_VotingCancelled"/>
        <KeyWord name="MenuEnd_VotingDone"/>
        <KeyWord name="MenuSource"/>
        <KeyWord name="MenuSource_External"/>
        <KeyWord name="MenuSource_None"/>
        <KeyWord name="MenuSource_Normal"/>
        <KeyWord name="MenuSource_RawPanel"/>
        <KeyWord name="MenuStyle"/>
        <KeyWord name="MenuStyle_Default"/>
        <KeyWord name="MenuStyle_Radio"/>
        <KeyWord name="MenuStyle_Valve"/>
        <KeyWord name="MoveType"/>
        <KeyWord name="MsgHook"/>
        <KeyWord name="MultiTargetFilter"/>
        <KeyWord name="NULL_STRING"/>
        <KeyWord name="NULL_VECTOR"/>
        <KeyWord name="NativeCall"/>
        <KeyWord name="NetFlow"/>
        <KeyWord name="NetFlow_Both"/>
        <KeyWord name="NetFlow_Incoming"/>
        <KeyWord name="NetFlow_Outgoing"/>
        <KeyWord name="NominateResult"/>
        <KeyWord name="Nominate_Added"/>
        <KeyWord name="Nominate_AlreadyInVote"/>
        <KeyWord name="Nominate_InvalidMap"/>
        <KeyWord name="Nominate_Replaced"/>
        <KeyWord name="Nominate_VoteFull"/>
        <KeyWord name="NormalSHook"/>
        <KeyWord name="NumberType"/>
        <KeyWord name="NumberType_Int16"/>
        <KeyWord name="NumberType_Int32"/>
        <KeyWord name="NumberType_Int8"/>
        <KeyWord name="OverrideRule"/>
        <KeyWord name="OverrideType"/>
        <KeyWord name="Override_Command"/>
        <KeyWord name="Override_CommandGroup"/>
        <KeyWord name="PARTITION_NON_STATIC_EDICTS"/>
        <KeyWord name="PARTITION_SOLID_EDICTS"/>
        <KeyWord name="PARTITION_STATIC_PROPS"/>
        <KeyWord name="PARTITION_TRIGGER_EDICTS"/>
        <KeyWord name="PB_FIELD_NOT_REPEATED"/>
        <KeyWord name="PCRE_ANCHORED"/>
        <KeyWord name="PCRE_CASELESS"/>
        <KeyWord name="PCRE_DOLLAR_ENDONLY"/>
        <KeyWord name="PCRE_DOTALL"/>
        <KeyWord name="PCRE_EXTENDED"/>
        <KeyWord name="PCRE_MULTILINE"/>
        <KeyWord name="PCRE_NOTEMPTY"/>
        <KeyWord name="PCRE_NO_UTF8_CHECK"/>
        <KeyWord name="PCRE_UCP"/>
        <KeyWord name="PCRE_UNGREEDY"/>
        <KeyWord name="PCRE_UTF8"/>
        <KeyWord name="PLATFORM_MAX_PATH"/>
        <KeyWord name="PLAYER_FLAG_BITS"/>
        <KeyWord name="Panel"/>
        <KeyWord name="ParamType"/>
        <KeyWord name="Param_Any"/>
        <KeyWord name="Param_Array"/>
        <KeyWord name="Param_Cell"/>
        <KeyWord name="Param_CellByRef"/>
        <KeyWord name="Param_Float"/>
        <KeyWord name="Param_FloatByRef"/>
        <KeyWord name="Param_String"/>
        <KeyWord name="Param_VarArgs"/>
        <KeyWord name="PathType"/>
        <KeyWord name="Path_SM"/>
        <KeyWord name="PlInfo_Author"/>
        <KeyWord name="PlInfo_Description"/>
        <KeyWord name="PlInfo_Name"/>
        <KeyWord name="PlInfo_URL"/>
        <KeyWord name="PlInfo_Version"/>
        <KeyWord name="PluginInfo"/>
        <KeyWord name="PluginStatus"/>
        <KeyWord name="Plugin_BadLoad"/>
        <KeyWord name="Plugin_Changed"/>
        <KeyWord name="Plugin_Continue"/>
        <KeyWord name="Plugin_Created"/>
        <KeyWord name="Plugin_Error"/>
        <KeyWord name="Plugin_Evicted"/>
        <KeyWord name="Plugin_Failed"/>
        <KeyWord name="Plugin_Handled"/>
        <KeyWord name="Plugin_Loaded"/>
        <KeyWord name="Plugin_Paused"/>
        <KeyWord name="Plugin_Running"/>
        <KeyWord name="Plugin_Stop"/>
        <KeyWord name="Plugin_Uncompiled"/>
        <KeyWord name="PrivateForward"/>
        <KeyWord name="Profiler"/>
        <KeyWord name="PropFieldType"/>
        <KeyWord name="PropField_Entity"/>
        <KeyWord name="PropField_Float"/>
        <KeyWord name="PropField_Integer"/>
        <KeyWord name="PropField_String"/>
        <KeyWord name="PropField_String_T"/>
        <KeyWord name="PropField_Unsupported"/>
        <KeyWord name="PropField_Variant"/>
        <KeyWord name="PropField_Vector"/>
        <KeyWord name="PropType"/>
        <KeyWord name="Prop_Data"/>
        <KeyWord name="Prop_Send"/>
        <KeyWord name="Protobuf"/>
        <KeyWord name="QUERYCOOKIE_FAILED"/>
        <KeyWord name="QueryCookie"/>
        <KeyWord name="REGEX_ERROR_ASSERT"/>
        <KeyWord name="REGEX_ERROR_BADBR"/>
        <KeyWord name="REGEX_ERROR_BADCOUNT"/>
        <KeyWord name="REGEX_ERROR_BADENDIANNESS"/>
        <KeyWord name="REGEX_ERROR_BADLENGTH"/>
        <KeyWord name="REGEX_ERROR_BADMAGIC"/>
        <KeyWord name="REGEX_ERROR_BADMODE"/>
        <KeyWord name="REGEX_ERROR_BADNEWLINE"/>
        <KeyWord name="REGEX_ERROR_BADOFFSET"/>
        <KeyWord name="REGEX_ERROR_BADOPTION"/>
        <KeyWord name="REGEX_ERROR_BADPARTIAL"/>
        <KeyWord name="REGEX_ERROR_BADPAT"/>
        <KeyWord name="REGEX_ERROR_BADRPT"/>
        <KeyWord name="REGEX_ERROR_BADUTF8"/>
        <KeyWord name="REGEX_ERROR_BADUTF8_OFFSET"/>
        <KeyWord name="REGEX_ERROR_CALLOUT"/>
        <KeyWord name="REGEX_ERROR_DFA_BADRESTART"/>
        <KeyWord name="REGEX_ERROR_DFA_RECURSE"/>
        <KeyWord name="REGEX_ERROR_DFA_UCOND"/>
        <KeyWord name="REGEX_ERROR_DFA_UITEM"/>
        <KeyWord name="REGEX_ERROR_DFA_UMLIMIT"/>
        <KeyWord name="REGEX_ERROR_DFA_WSSIZE"/>
        <KeyWord name="REGEX_ERROR_EBRACE"/>
        <KeyWord name="REGEX_ERROR_EBRACK"/>
        <KeyWord name="REGEX_ERROR_ECOLLATE"/>
        <KeyWord name="REGEX_ERROR_ECTYPE"/>
        <KeyWord name="REGEX_ERROR_EESCAPE"/>
        <KeyWord name="REGEX_ERROR_EMPTY"/>
        <KeyWord name="REGEX_ERROR_EPAREN"/>
        <KeyWord name="REGEX_ERROR_ERANGE"/>
        <KeyWord name="REGEX_ERROR_ESIZE"/>
        <KeyWord name="REGEX_ERROR_ESPACE"/>
        <KeyWord name="REGEX_ERROR_ESUBREG"/>
        <KeyWord name="REGEX_ERROR_INTERNAL"/>
        <KeyWord name="REGEX_ERROR_INVARG"/>
        <KeyWord name="REGEX_ERROR_JIT_BADOPTION"/>
        <KeyWord name="REGEX_ERROR_JIT_STACKLIMIT"/>
        <KeyWord name="REGEX_ERROR_MATCHLIMIT"/>
        <KeyWord name="REGEX_ERROR_NOMATCH"/>
        <KeyWord name="REGEX_ERROR_NOMEMORY"/>
        <KeyWord name="REGEX_ERROR_NONE"/>
        <KeyWord name="REGEX_ERROR_NOSUBSTRING"/>
        <KeyWord name="REGEX_ERROR_NULL"/>
        <KeyWord name="REGEX_ERROR_NULLWSLIMIT"/>
        <KeyWord name="REGEX_ERROR_PARTIAL"/>
        <KeyWord name="REGEX_ERROR_RECURSELOOP"/>
        <KeyWord name="REGEX_ERROR_RECURSIONLIMIT"/>
        <KeyWord name="REGEX_ERROR_SHORTUTF8"/>
        <KeyWord name="REGEX_ERROR_UNKNOWN_OPCODE"/>
        <KeyWord name="RENDERFX_CLAMP_MIN_SCALE"/>
        <KeyWord name="RENDERFX_DISTORT"/>
        <KeyWord name="RENDERFX_ENV_RAIN"/>
        <KeyWord name="RENDERFX_ENV_SNOW"/>
        <KeyWord name="RENDERFX_EXPLODE"/>
        <KeyWord name="RENDERFX_FADE_FAST"/>
        <KeyWord name="RENDERFX_FADE_SLOW"/>
        <KeyWord name="RENDERFX_FLICKER_FAST"/>
        <KeyWord name="RENDERFX_FLICKER_SLOW"/>
        <KeyWord name="RENDERFX_GLOWSHELL"/>
        <KeyWord name="RENDERFX_HOLOGRAM"/>
        <KeyWord name="RENDERFX_MAX"/>
        <KeyWord name="RENDERFX_NONE"/>
        <KeyWord name="RENDERFX_NO_DISSIPATION"/>
        <KeyWord name="RENDERFX_PULSE_FAST"/>
        <KeyWord name="RENDERFX_PULSE_FAST_WIDE"/>
        <KeyWord name="RENDERFX_PULSE_FAST_WIDER"/>
        <KeyWord name="RENDERFX_PULSE_SLOW"/>
        <KeyWord name="RENDERFX_PULSE_SLOW_WIDE"/>
        <KeyWord name="RENDERFX_RAGDOLL"/>
        <KeyWord name="RENDERFX_SOLID_FAST"/>
        <KeyWord name="RENDERFX_SOLID_SLOW"/>
        <KeyWord name="RENDERFX_SPOTLIGHT"/>
        <KeyWord name="RENDERFX_STROBE_FAST"/>
        <KeyWord name="RENDERFX_STROBE_FASTER"/>
        <KeyWord name="RENDERFX_STROBE_SLOW"/>
        <KeyWord name="RENDER_ENVIRONMENTAL"/>
        <KeyWord name="RENDER_GLOW"/>
        <KeyWord name="RENDER_NONE"/>
        <KeyWord name="RENDER_NORMAL"/>
        <KeyWord name="RENDER_TRANSADD"/>
        <KeyWord name="RENDER_TRANSADDFRAMEBLEND"/>
        <KeyWord name="RENDER_TRANSALPHA"/>
        <KeyWord name="RENDER_TRANSALPHAADD"/>
        <KeyWord name="RENDER_TRANSCOLOR"/>
        <KeyWord name="RENDER_TRANSTEXTURE"/>
        <KeyWord name="RENDER_WORLDGLOW"/>
        <KeyWord name="REQUIRE_EXTENSIONS"/>
        <KeyWord name="REQUIRE_PLUGIN"/>
        <KeyWord name="RangeType_Audibility"/>
        <KeyWord name="RangeType_Visibility"/>
        <KeyWord name="RayType"/>
        <KeyWord name="RayType_EndPoint"/>
        <KeyWord name="RayType_Infinite"/>
        <KeyWord name="Regex"/>
        <KeyWord name="RegexError"/>
        <KeyWord name="RenderFx"/>
        <KeyWord name="RenderMode"/>
        <KeyWord name="ReplySource"/>
        <KeyWord name="RequestFrameCallback"/>
        <KeyWord name="RoundState"/>
        <KeyWord name="RoundState_BetweenRounds"/>
        <KeyWord name="RoundState_Bonus"/>
        <KeyWord name="RoundState_GameOver"/>
        <KeyWord name="RoundState_Init"/>
        <KeyWord name="RoundState_Pregame"/>
        <KeyWord name="RoundState_Preround"/>
        <KeyWord name="RoundState_Restart"/>
        <KeyWord name="RoundState_RoundRunning"/>
        <KeyWord name="RoundState_Stalemate"/>
        <KeyWord name="RoundState_StartGame"/>
        <KeyWord name="RoundState_TeamWin"/>
        <KeyWord name="SDKCallType"/>
        <KeyWord name="SDKCall_Entity"/>
        <KeyWord name="SDKCall_EntityList"/>
        <KeyWord name="SDKCall_GameRules"/>
        <KeyWord name="SDKCall_Player"/>
        <KeyWord name="SDKCall_Raw"/>
        <KeyWord name="SDKCall_Static"/>
        <KeyWord name="SDKConf_Address"/>
        <KeyWord name="SDKConf_Signature"/>
        <KeyWord name="SDKConf_Virtual"/>
        <KeyWord name="SDKFuncConfSource"/>
        <KeyWord name="SDKHookCB"/>
        <KeyWord name="SDKHookType"/>
        <KeyWord name="SDKHook_Blocked"/>
        <KeyWord name="SDKHook_BlockedPost"/>
        <KeyWord name="SDKHook_CanBeAutobalanced"/>
        <KeyWord name="SDKHook_EndTouch"/>
        <KeyWord name="SDKHook_EndTouchPost"/>
        <KeyWord name="SDKHook_FireBulletsPost"/>
        <KeyWord name="SDKHook_GetMaxHealth"/>
        <KeyWord name="SDKHook_GroundEntChangedPost"/>
        <KeyWord name="SDKHook_OnTakeDamage"/>
        <KeyWord name="SDKHook_OnTakeDamageAlive"/>
        <KeyWord name="SDKHook_OnTakeDamageAlivePost"/>
        <KeyWord name="SDKHook_OnTakeDamagePost"/>
        <KeyWord name="SDKHook_PostThink"/>
        <KeyWord name="SDKHook_PostThinkPost"/>
        <KeyWord name="SDKHook_PreThink"/>
        <KeyWord name="SDKHook_PreThinkPost"/>
        <KeyWord name="SDKHook_Reload"/>
        <KeyWord name="SDKHook_ReloadPost"/>
        <KeyWord name="SDKHook_SetTransmit"/>
        <KeyWord name="SDKHook_ShouldCollide"/>
        <KeyWord name="SDKHook_Spawn"/>
        <KeyWord name="SDKHook_SpawnPost"/>
        <KeyWord name="SDKHook_StartTouch"/>
        <KeyWord name="SDKHook_StartTouchPost"/>
        <KeyWord name="SDKHook_Think"/>
        <KeyWord name="SDKHook_ThinkPost"/>
        <KeyWord name="SDKHook_Touch"/>
        <KeyWord name="SDKHook_TouchPost"/>
        <KeyWord name="SDKHook_TraceAttack"/>
        <KeyWord name="SDKHook_TraceAttackPost"/>
        <KeyWord name="SDKHook_Use"/>
        <KeyWord name="SDKHook_UsePost"/>
        <KeyWord name="SDKHook_VPhysicsUpdate"/>
        <KeyWord name="SDKHook_VPhysicsUpdatePost"/>
        <KeyWord name="SDKHook_WeaponCanSwitchTo"/>
        <KeyWord name="SDKHook_WeaponCanSwitchToPost"/>
        <KeyWord name="SDKHook_WeaponCanUse"/>
        <KeyWord name="SDKHook_WeaponCanUsePost"/>
        <KeyWord name="SDKHook_WeaponDrop"/>
        <KeyWord name="SDKHook_WeaponDropPost"/>
        <KeyWord name="SDKHook_WeaponEquip"/>
        <KeyWord name="SDKHook_WeaponEquipPost"/>
        <KeyWord name="SDKHook_WeaponSwitch"/>
        <KeyWord name="SDKHook_WeaponSwitchPost"/>
        <KeyWord name="SDKLibrary"/>
        <KeyWord name="SDKLibrary_Engine"/>
        <KeyWord name="SDKLibrary_Server"/>
        <KeyWord name="SDKPassMethod"/>
        <KeyWord name="SDKPass_ByRef"/>
        <KeyWord name="SDKPass_ByValue"/>
        <KeyWord name="SDKPass_Plain"/>
        <KeyWord name="SDKPass_Pointer"/>
        <KeyWord name="SDKType"/>
        <KeyWord name="SDKType_Bool"/>
        <KeyWord name="SDKType_CBaseEntity"/>
        <KeyWord name="SDKType_CBasePlayer"/>
        <KeyWord name="SDKType_Edict"/>
        <KeyWord name="SDKType_Float"/>
        <KeyWord name="SDKType_PlainOldData"/>
        <KeyWord name="SDKType_QAngle"/>
        <KeyWord name="SDKType_String"/>
        <KeyWord name="SDKType_Vector"/>
        <KeyWord name="SEEK_CUR"/>
        <KeyWord name="SEEK_END"/>
        <KeyWord name="SEEK_SET"/>
        <KeyWord name="SMCError"/>
        <KeyWord name="SMCError_Custom"/>
        <KeyWord name="SMCError_InvalidProperty1"/>
        <KeyWord name="SMCError_InvalidSection1"/>
        <KeyWord name="SMCError_InvalidSection2"/>
        <KeyWord name="SMCError_InvalidSection3"/>
        <KeyWord name="SMCError_InvalidSection4"/>
        <KeyWord name="SMCError_InvalidSection5"/>
        <KeyWord name="SMCError_InvalidTokens"/>
        <KeyWord name="SMCError_Okay"/>
        <KeyWord name="SMCError_StreamError"/>
        <KeyWord name="SMCError_StreamOpen"/>
        <KeyWord name="SMCError_TokenOverflow"/>
        <KeyWord name="SMCParse_Continue"/>
        <KeyWord name="SMCParse_Halt"/>
        <KeyWord name="SMCParse_HaltFail"/>
        <KeyWord name="SMCParser"/>
        <KeyWord name="SMCResult"/>
        <KeyWord name="SMC_EndSection"/>
        <KeyWord name="SMC_KeyValue"/>
        <KeyWord name="SMC_NewSection"/>
        <KeyWord name="SMC_ParseEnd"/>
        <KeyWord name="SMC_ParseStart"/>
        <KeyWord name="SMC_RawLine"/>
        <KeyWord name="SM_PARAM_COPYBACK"/>
        <KeyWord name="SM_PARAM_STRING_BINARY"/>
        <KeyWord name="SM_PARAM_STRING_COPY"/>
        <KeyWord name="SM_PARAM_STRING_UTF8"/>
        <KeyWord name="SM_REPLY_TO_CHAT"/>
        <KeyWord name="SM_REPLY_TO_CONSOLE"/>
        <KeyWord name="SNDATTN_IDLE"/>
        <KeyWord name="SNDATTN_NONE"/>
        <KeyWord name="SNDATTN_NORMAL"/>
        <KeyWord name="SNDATTN_RICOCHET"/>
        <KeyWord name="SNDATTN_STATIC"/>
        <KeyWord name="SNDCHAN_AUTO"/>
        <KeyWord name="SNDCHAN_BODY"/>
        <KeyWord name="SNDCHAN_ITEM"/>
        <KeyWord name="SNDCHAN_REPLACE"/>
        <KeyWord name="SNDCHAN_STATIC"/>
        <KeyWord name="SNDCHAN_STREAM"/>
        <KeyWord name="SNDCHAN_USER_BASE"/>
        <KeyWord name="SNDCHAN_VOICE"/>
        <KeyWord name="SNDCHAN_VOICE_BASE"/>
        <KeyWord name="SNDCHAN_WEAPON"/>
        <KeyWord name="SNDLEVEL_AIRCRAFT"/>
        <KeyWord name="SNDLEVEL_CAR"/>
        <KeyWord name="SNDLEVEL_CONVO"/>
        <KeyWord name="SNDLEVEL_DISHWASHER"/>
        <KeyWord name="SNDLEVEL_DRYER"/>
        <KeyWord name="SNDLEVEL_FRIDGE"/>
        <KeyWord name="SNDLEVEL_GUNFIRE"/>
        <KeyWord name="SNDLEVEL_HELICOPTER"/>
        <KeyWord name="SNDLEVEL_HOME"/>
        <KeyWord name="SNDLEVEL_LIBRARY"/>
        <KeyWord name="SNDLEVEL_MINIBIKE"/>
        <KeyWord name="SNDLEVEL_NONE"/>
        <KeyWord name="SNDLEVEL_NORMAL"/>
        <KeyWord name="SNDLEVEL_RAIDSIREN"/>
        <KeyWord name="SNDLEVEL_ROCKET"/>
        <KeyWord name="SNDLEVEL_RUSTLE"/>
        <KeyWord name="SNDLEVEL_SCREAMING"/>
        <KeyWord name="SNDLEVEL_SNOWMOBILE"/>
        <KeyWord name="SNDLEVEL_TRAFFIC"/>
        <KeyWord name="SNDLEVEL_TRAIN"/>
        <KeyWord name="SNDLEVEL_WHISPER"/>
        <KeyWord name="SNDPITCH_HIGH"/>
        <KeyWord name="SNDPITCH_LOW"/>
        <KeyWord name="SNDPITCH_NORMAL"/>
        <KeyWord name="SNDVOL_NORMAL"/>
        <KeyWord name="SND_CHANGEPITCH"/>
        <KeyWord name="SND_CHANGEVOL"/>
        <KeyWord name="SND_DELAY"/>
        <KeyWord name="SND_NOFLAGS"/>
        <KeyWord name="SND_SHOULDPAUSE"/>
        <KeyWord name="SND_SPAWNING"/>
        <KeyWord name="SND_SPEAKER"/>
        <KeyWord name="SND_STOP"/>
        <KeyWord name="SND_STOPLOOPING"/>
        <KeyWord name="SOUND_FROM_LOCAL_PLAYER"/>
        <KeyWord name="SOUND_FROM_PLAYER"/>
        <KeyWord name="SOUND_FROM_WORLD"/>
        <KeyWord name="SOURCEMOD_PLUGINAPI_VERSION"/>
        <KeyWord name="SOURCEMOD_VERSION"/>
        <KeyWord name="SOURCEMOD_V_CSET"/>
        <KeyWord name="SOURCEMOD_V_MAJOR"/>
        <KeyWord name="SOURCEMOD_V_MINOR"/>
        <KeyWord name="SOURCEMOD_V_RELEASE"/>
        <KeyWord name="SOURCEMOD_V_REV"/>
        <KeyWord name="SOURCEMOD_V_TAG"/>
        <KeyWord name="SOURCE_SDK_ALIENSWARM"/>
        <KeyWord name="SOURCE_SDK_BLOODYGOODTIME"/>
        <KeyWord name="SOURCE_SDK_CSGO"/>
        <KeyWord name="SOURCE_SDK_CSS"/>
        <KeyWord name="SOURCE_SDK_DARKMESSIAH"/>
        <KeyWord name="SOURCE_SDK_DOTA"/>
        <KeyWord name="SOURCE_SDK_EPISODE1"/>
        <KeyWord name="SOURCE_SDK_EPISODE2"/>
        <KeyWord name="SOURCE_SDK_EPISODE2VALVE"/>
        <KeyWord name="SOURCE_SDK_EYE"/>
        <KeyWord name="SOURCE_SDK_LEFT4DEAD"/>
        <KeyWord name="SOURCE_SDK_LEFT4DEAD2"/>
        <KeyWord name="SOURCE_SDK_ORIGINAL"/>
        <KeyWord name="SOURCE_SDK_UNKNOWN"/>
        <KeyWord name="SP_ERROR_ABORTED"/>
        <KeyWord name="SP_ERROR_ARRAY_BOUNDS"/>
        <KeyWord name="SP_ERROR_ARRAY_TOO_BIG"/>
        <KeyWord name="SP_ERROR_DECOMPRESSOR"/>
        <KeyWord name="SP_ERROR_DIVIDE_BY_ZERO"/>
        <KeyWord name="SP_ERROR_FILE_FORMAT"/>
        <KeyWord name="SP_ERROR_HEAPLEAK"/>
        <KeyWord name="SP_ERROR_HEAPLOW"/>
        <KeyWord name="SP_ERROR_HEAPMIN"/>
        <KeyWord name="SP_ERROR_INDEX"/>
        <KeyWord name="SP_ERROR_INSTRUCTION_PARAM"/>
        <KeyWord name="SP_ERROR_INVALID_ADDRESS"/>
        <KeyWord name="SP_ERROR_INVALID_INSTRUCTION"/>
        <KeyWord name="SP_ERROR_INVALID_NATIVE"/>
        <KeyWord name="SP_ERROR_MEMACCESS"/>
        <KeyWord name="SP_ERROR_NATIVE"/>
        <KeyWord name="SP_ERROR_NONE"/>
        <KeyWord name="SP_ERROR_NOTDEBUGGING"/>
        <KeyWord name="SP_ERROR_NOT_FOUND"/>
        <KeyWord name="SP_ERROR_NOT_RUNNABLE"/>
        <KeyWord name="SP_ERROR_PARAM"/>
        <KeyWord name="SP_ERROR_PARAMS_MAX"/>
        <KeyWord name="SP_ERROR_STACKLEAK"/>
        <KeyWord name="SP_ERROR_STACKLOW"/>
        <KeyWord name="SP_ERROR_STACKMIN"/>
        <KeyWord name="SP_ERROR_TRACKER_BOUNDS"/>
        <KeyWord name="SP_PARAMFLAG_BYREF"/>
        <KeyWord name="SQLTxnSuccess"/>
        <KeyWord name="SURF_BUMPLIGHT"/>
        <KeyWord name="SURF_HINT"/>
        <KeyWord name="SURF_HITBOX"/>
        <KeyWord name="SURF_LIGHT"/>
        <KeyWord name="SURF_NOCHOP"/>
        <KeyWord name="SURF_NODECALS"/>
        <KeyWord name="SURF_NODRAW"/>
        <KeyWord name="SURF_NOLIGHT"/>
        <KeyWord name="SURF_NOPORTAL"/>
        <KeyWord name="SURF_NOSHADOWS"/>
        <KeyWord name="SURF_SKIP"/>
        <KeyWord name="SURF_SKY"/>
        <KeyWord name="SURF_SKY2D"/>
        <KeyWord name="SURF_TRANS"/>
        <KeyWord name="SURF_TRIGGER"/>
        <KeyWord name="SURF_WARP"/>
        <KeyWord name="SortFunc2D"/>
        <KeyWord name="SortOrder"/>
        <KeyWord name="SortType"/>
        <KeyWord name="Sort_Ascending"/>
        <KeyWord name="Sort_Descending"/>
        <KeyWord name="Sort_Float"/>
        <KeyWord name="Sort_Integer"/>
        <KeyWord name="Sort_Random"/>
        <KeyWord name="Sort_String"/>
        <KeyWord name="StringMap"/>
        <KeyWord name="StringMapSnapshot"/>
        <KeyWord name="TEMP_REQUIRE_EXTENSIONS"/>
        <KeyWord name="TE_EXPLFLAG_DRAWALPHA"/>
        <KeyWord name="TE_EXPLFLAG_NOADDITIVE"/>
        <KeyWord name="TE_EXPLFLAG_NODLIGHTS"/>
        <KeyWord name="TE_EXPLFLAG_NOFIREBALL"/>
        <KeyWord name="TE_EXPLFLAG_NOFIREBALLSMOKE"/>
        <KeyWord name="TE_EXPLFLAG_NONE"/>
        <KeyWord name="TE_EXPLFLAG_NOPARTICLES"/>
        <KeyWord name="TE_EXPLFLAG_NOSOUND"/>
        <KeyWord name="TE_EXPLFLAG_ROTATE"/>
        <KeyWord name="TFClassType"/>
        <KeyWord name="TFClass_DemoMan"/>
        <KeyWord name="TFClass_Engineer"/>
        <KeyWord name="TFClass_Heavy"/>
        <KeyWord name="TFClass_Medic"/>
        <KeyWord name="TFClass_Pyro"/>
        <KeyWord name="TFClass_Scout"/>
        <KeyWord name="TFClass_Sniper"/>
        <KeyWord name="TFClass_Soldier"/>
        <KeyWord name="TFClass_Spy"/>
        <KeyWord name="TFClass_Unknown"/>
        <KeyWord name="TFCond"/>
        <KeyWord name="TFCond_AfterburnImmune"/>
        <KeyWord name="TFCond_AirCurrent"/>
        <KeyWord name="TFCond_BalloonHead"/>
        <KeyWord name="TFCond_BlastImmune"/>
        <KeyWord name="TFCond_BlastJumping"/>
        <KeyWord name="TFCond_Bleeding"/>
        <KeyWord name="TFCond_Bonked"/>
        <KeyWord name="TFCond_Buffed"/>
        <KeyWord name="TFCond_BulletImmune"/>
        <KeyWord name="TFCond_BurningPyro"/>
        <KeyWord name="TFCond_Charging"/>
        <KeyWord name="TFCond_CloakFlicker"/>
        <KeyWord name="TFCond_Cloaked"/>
        <KeyWord name="TFCond_CompetitiveLoser"/>
        <KeyWord name="TFCond_CompetitiveWinner"/>
        <KeyWord name="TFCond_CritCanteen"/>
        <KeyWord name="TFCond_CritCola"/>
        <KeyWord name="TFCond_CritDemoCharge"/>
        <KeyWord name="TFCond_CritHype"/>
        <KeyWord name="TFCond_CritMmmph"/>
        <KeyWord name="TFCond_CritOnDamage"/>
        <KeyWord name="TFCond_CritOnFirstBlood"/>
        <KeyWord name="TFCond_CritOnFlagCapture"/>
        <KeyWord name="TFCond_CritOnKill"/>
        <KeyWord name="TFCond_CritOnWin"/>
        <KeyWord name="TFCond_CritRuneTemp"/>
        <KeyWord name="TFCond_Dazed"/>
        <KeyWord name="TFCond_DeadRingered"/>
        <KeyWord name="TFCond_DefenseBuffMmmph"/>
        <KeyWord name="TFCond_DefenseBuffNoCritBlock"/>
        <KeyWord name="TFCond_DefenseBuffed"/>
        <KeyWord name="TFCond_DemoBuff"/>
        <KeyWord name="TFCond_DisguiseRemoved"/>
        <KeyWord name="TFCond_Disguised"/>
        <KeyWord name="TFCond_DisguisedAsDispenser"/>
        <KeyWord name="TFCond_Disguising"/>
        <KeyWord name="TFCond_DodgeChance"/>
        <KeyWord name="TFCond_EyeaductUnderworld"/>
        <KeyWord name="TFCond_FireImmune"/>
        <KeyWord name="TFCond_FocusBuff"/>
        <KeyWord name="TFCond_FreezeInput"/>
        <KeyWord name="TFCond_Gas"/>
        <KeyWord name="TFCond_GrappledByPlayer"/>
        <KeyWord name="TFCond_GrappledToPlayer"/>
        <KeyWord name="TFCond_GrapplingHook"/>
        <KeyWord name="TFCond_GrapplingHookBleeding"/>
        <KeyWord name="TFCond_GrapplingHookLatched"/>
        <KeyWord name="TFCond_GrapplingHookSafeFall"/>
        <KeyWord name="TFCond_HalloweenBombHead"/>
        <KeyWord name="TFCond_HalloweenCritCandy"/>
        <KeyWord name="TFCond_HalloweenGhostMode"/>
        <KeyWord name="TFCond_HalloweenGiant"/>
        <KeyWord name="TFCond_HalloweenInHell"/>
        <KeyWord name="TFCond_HalloweenKart"/>
        <KeyWord name="TFCond_HalloweenKartCage"/>
        <KeyWord name="TFCond_HalloweenKartDash"/>
        <KeyWord name="TFCond_HalloweenKartNoTurn"/>
        <KeyWord name="TFCond_HalloweenQuickHeal"/>
        <KeyWord name="TFCond_HalloweenSpeedBoost"/>
        <KeyWord name="TFCond_HalloweenThriller"/>
        <KeyWord name="TFCond_HalloweenTiny"/>
        <KeyWord name="TFCond_HasRune"/>
        <KeyWord name="TFCond_Healing"/>
        <KeyWord name="TFCond_HealingDebuff"/>
        <KeyWord name="TFCond_InHealRadius"/>
        <KeyWord name="TFCond_Jarated"/>
        <KeyWord name="TFCond_KingAura"/>
        <KeyWord name="TFCond_KingRune"/>
        <KeyWord name="TFCond_KnockedIntoAir"/>
        <KeyWord name="TFCond_Kritzkrieged"/>
        <KeyWord name="TFCond_LostFooting"/>
        <KeyWord name="TFCond_MVMBotRadiowave"/>
        <KeyWord name="TFCond_MarkedForDeath"/>
        <KeyWord name="TFCond_MarkedForDeathSilent"/>
        <KeyWord name="TFCond_MedigunDebuff"/>
        <KeyWord name="TFCond_MegaHeal"/>
        <KeyWord name="TFCond_MeleeOnly"/>
        <KeyWord name="TFCond_Milked"/>
        <KeyWord name="TFCond_MiniCritOnKill"/>
        <KeyWord name="TFCond_NoHealingDamageBuff"/>
        <KeyWord name="TFCond_NoTaunting_DEPRECATED"/>
        <KeyWord name="TFCond_ObscuredSmoke"/>
        <KeyWord name="TFCond_OnFire"/>
        <KeyWord name="TFCond_Overhealed"/>
        <KeyWord name="TFCond_Parachute"/>
        <KeyWord name="TFCond_ParachuteDeployed"/>
        <KeyWord name="TFCond_PasstimeInterception"/>
        <KeyWord name="TFCond_PasstimePenaltyDebuff"/>
        <KeyWord name="TFCond_Plague"/>
        <KeyWord name="TFCond_PlagueRune"/>
        <KeyWord name="TFCond_PreventDeath"/>
        <KeyWord name="TFCond_RadiusHealOnDamage"/>
        <KeyWord name="TFCond_RegenBuffed"/>
        <KeyWord name="TFCond_Reprogrammed"/>
        <KeyWord name="TFCond_RestrictToMelee"/>
        <KeyWord name="TFCond_RocketPack"/>
        <KeyWord name="TFCond_RuneAgility"/>
        <KeyWord name="TFCond_RuneHaste"/>
        <KeyWord name="TFCond_RuneImbalance"/>
        <KeyWord name="TFCond_RuneKnockout"/>
        <KeyWord name="TFCond_RunePrecision"/>
        <KeyWord name="TFCond_RuneRegen"/>
        <KeyWord name="TFCond_RuneResist"/>
        <KeyWord name="TFCond_RuneStrength"/>
        <KeyWord name="TFCond_RuneVampire"/>
        <KeyWord name="TFCond_RuneWarlock"/>
        <KeyWord name="TFCond_Sapped"/>
        <KeyWord name="TFCond_Slowed"/>
        <KeyWord name="TFCond_SmallBlastResist"/>
        <KeyWord name="TFCond_SmallBulletResist"/>
        <KeyWord name="TFCond_SmallFireResist"/>
        <KeyWord name="TFCond_SpawnOutline"/>
        <KeyWord name="TFCond_SpeedBuffAlly"/>
        <KeyWord name="TFCond_Stealthed"/>
        <KeyWord name="TFCond_StealthedUserBuffFade"/>
        <KeyWord name="TFCond_SupernovaRune"/>
        <KeyWord name="TFCond_SwimmingCurse"/>
        <KeyWord name="TFCond_SwimmingNoEffects"/>
        <KeyWord name="TFCond_Taunting"/>
        <KeyWord name="TFCond_TeleportedGlow"/>
        <KeyWord name="TFCond_Teleporting"/>
        <KeyWord name="TFCond_TmpDamageBonus"/>
        <KeyWord name="TFCond_UberBlastResist"/>
        <KeyWord name="TFCond_UberBulletResist"/>
        <KeyWord name="TFCond_UberFireResist"/>
        <KeyWord name="TFCond_UberchargeFading"/>
        <KeyWord name="TFCond_Ubercharged"/>
        <KeyWord name="TFCond_UberchargedCanteen"/>
        <KeyWord name="TFCond_UberchargedHidden"/>
        <KeyWord name="TFCond_UberchargedOnTakeDamage"/>
        <KeyWord name="TFCond_Unknown1"/>
        <KeyWord name="TFCond_Unknown2"/>
        <KeyWord name="TFCond_Zoomed"/>
        <KeyWord name="TFHoliday"/>
        <KeyWord name="TFHoliday_Invalid"/>
        <KeyWord name="TFObjectMode"/>
        <KeyWord name="TFObjectMode_Entrance"/>
        <KeyWord name="TFObjectMode_Exit"/>
        <KeyWord name="TFObjectMode_None"/>
        <KeyWord name="TFObjectType"/>
        <KeyWord name="TFObject_CartDispenser"/>
        <KeyWord name="TFObject_Dispenser"/>
        <KeyWord name="TFObject_Sapper"/>
        <KeyWord name="TFObject_Sentry"/>
        <KeyWord name="TFObject_Teleporter"/>
        <KeyWord name="TFResourceType"/>
        <KeyWord name="TFResource_Backstabs"/>
        <KeyWord name="TFResource_BuildingsDestroyed"/>
        <KeyWord name="TFResource_Captures"/>
        <KeyWord name="TFResource_Deaths"/>
        <KeyWord name="TFResource_Defenses"/>
        <KeyWord name="TFResource_Dominations"/>
        <KeyWord name="TFResource_Headshots"/>
        <KeyWord name="TFResource_HealPoints"/>
        <KeyWord name="TFResource_Invulns"/>
        <KeyWord name="TFResource_KillAssists"/>
        <KeyWord name="TFResource_MaxHealth"/>
        <KeyWord name="TFResource_Ping"/>
        <KeyWord name="TFResource_PlayerClass"/>
        <KeyWord name="TFResource_ResupplyPoints"/>
        <KeyWord name="TFResource_Revenge"/>
        <KeyWord name="TFResource_Score"/>
        <KeyWord name="TFResource_Teleports"/>
        <KeyWord name="TFResource_TotalScore"/>
        <KeyWord name="TFTeam"/>
        <KeyWord name="TFTeam_Blue"/>
        <KeyWord name="TFTeam_Red"/>
        <KeyWord name="TFTeam_Spectator"/>
        <KeyWord name="TFTeam_Unassigned"/>
        <KeyWord name="TFWeaponSlot_Building"/>
        <KeyWord name="TFWeaponSlot_Grenade"/>
        <KeyWord name="TFWeaponSlot_Item1"/>
        <KeyWord name="TFWeaponSlot_Item2"/>
        <KeyWord name="TFWeaponSlot_Melee"/>
        <KeyWord name="TFWeaponSlot_PDA"/>
        <KeyWord name="TFWeaponSlot_Primary"/>
        <KeyWord name="TFWeaponSlot_Secondary"/>
        <KeyWord name="TF_CONDFLAG_BLEEDING"/>
        <KeyWord name="TF_CONDFLAG_BONKED"/>
        <KeyWord name="TF_CONDFLAG_BUFFED"/>
        <KeyWord name="TF_CONDFLAG_CHARGING"/>
        <KeyWord name="TF_CONDFLAG_CLOAKED"/>
        <KeyWord name="TF_CONDFLAG_CLOAKFLICKER"/>
        <KeyWord name="TF_CONDFLAG_CRITCOLA"/>
        <KeyWord name="TF_CONDFLAG_DAZED"/>
        <KeyWord name="TF_CONDFLAG_DEADRINGERED"/>
        <KeyWord name="TF_CONDFLAG_DEFENSEBUFFED"/>
        <KeyWord name="TF_CONDFLAG_DEMOBUFF"/>
        <KeyWord name="TF_CONDFLAG_DISGUISED"/>
        <KeyWord name="TF_CONDFLAG_DISGUISING"/>
        <KeyWord name="TF_CONDFLAG_HEALING"/>
        <KeyWord name="TF_CONDFLAG_INHEALRADIUS"/>
        <KeyWord name="TF_CONDFLAG_JARATED"/>
        <KeyWord name="TF_CONDFLAG_KRITZKRIEGED"/>
        <KeyWord name="TF_CONDFLAG_MARKEDFORDEATH"/>
        <KeyWord name="TF_CONDFLAG_MEGAHEAL"/>
        <KeyWord name="TF_CONDFLAG_MILKED"/>
        <KeyWord name="TF_CONDFLAG_NONE"/>
        <KeyWord name="TF_CONDFLAG_ONFIRE"/>
        <KeyWord name="TF_CONDFLAG_OVERHEALED"/>
        <KeyWord name="TF_CONDFLAG_REGENBUFFED"/>
        <KeyWord name="TF_CONDFLAG_SLOWED"/>
        <KeyWord name="TF_CONDFLAG_TAUNTING"/>
        <KeyWord name="TF_CONDFLAG_TELEPORTGLOW"/>
        <KeyWord name="TF_CONDFLAG_TELEPORTING"/>
        <KeyWord name="TF_CONDFLAG_UBERCHARGED"/>
        <KeyWord name="TF_CONDFLAG_UBERCHARGEFADE"/>
        <KeyWord name="TF_CONDFLAG_ZOOMED"/>
        <KeyWord name="TF_CUSTOM_AEGIS_ROUND"/>
        <KeyWord name="TF_CUSTOM_AIR_STICKY_BURST"/>
        <KeyWord name="TF_CUSTOM_AXTINGUISHER_BOOSTED"/>
        <KeyWord name="TF_CUSTOM_BACKSTAB"/>
        <KeyWord name="TF_CUSTOM_BASEBALL"/>
        <KeyWord name="TF_CUSTOM_BLEEDING"/>
        <KeyWord name="TF_CUSTOM_BOOTS_STOMP"/>
        <KeyWord name="TF_CUSTOM_BURNING"/>
        <KeyWord name="TF_CUSTOM_BURNING_ARROW"/>
        <KeyWord name="TF_CUSTOM_BURNING_FLARE"/>
        <KeyWord name="TF_CUSTOM_CANNONBALL_PUSH"/>
        <KeyWord name="TF_CUSTOM_CARRIED_BUILDING"/>
        <KeyWord name="TF_CUSTOM_CHARGE_IMPACT"/>
        <KeyWord name="TF_CUSTOM_CLEAVER"/>
        <KeyWord name="TF_CUSTOM_CLEAVER_CRIT"/>
        <KeyWord name="TF_CUSTOM_COMBO_PUNCH"/>
        <KeyWord name="TF_CUSTOM_CROC"/>
        <KeyWord name="TF_CUSTOM_DECAPITATION"/>
        <KeyWord name="TF_CUSTOM_DECAPITATION_BOSS"/>
        <KeyWord name="TF_CUSTOM_DEFENSIVE_STICKY"/>
        <KeyWord name="TF_CUSTOM_DRAGONS_FURY_BONUS_BURNING"/>
        <KeyWord name="TF_CUSTOM_DRAGONS_FURY_IGNITE"/>
        <KeyWord name="TF_CUSTOM_EYEBALL_ROCKET"/>
        <KeyWord name="TF_CUSTOM_FISH_KILL"/>
        <KeyWord name="TF_CUSTOM_FLARE_EXPLOSION"/>
        <KeyWord name="TF_CUSTOM_FLARE_PELLET"/>
        <KeyWord name="TF_CUSTOM_FLYINGBURN"/>
        <KeyWord name="TF_CUSTOM_GIANT_HAMMER"/>
        <KeyWord name="TF_CUSTOM_GOLD_WRENCH"/>
        <KeyWord name="TF_CUSTOM_HEADSHOT"/>
        <KeyWord name="TF_CUSTOM_HEADSHOT_DECAPITATION"/>
        <KeyWord name="TF_CUSTOM_KART"/>
        <KeyWord name="TF_CUSTOM_MERASMUS_DECAPITATION"/>
        <KeyWord name="TF_CUSTOM_MERASMUS_GRENADE"/>
        <KeyWord name="TF_CUSTOM_MERASMUS_PLAYER_BOMB"/>
        <KeyWord name="TF_CUSTOM_MERASMUS_ZAP"/>
        <KeyWord name="TF_CUSTOM_MINIGUN"/>
        <KeyWord name="TF_CUSTOM_PENETRATE_ALL_PLAYERS"/>
        <KeyWord name="TF_CUSTOM_PENETRATE_HEADSHOT"/>
        <KeyWord name="TF_CUSTOM_PENETRATE_MY_TEAM"/>
        <KeyWord name="TF_CUSTOM_PICKAXE"/>
        <KeyWord name="TF_CUSTOM_PLASMA"/>
        <KeyWord name="TF_CUSTOM_PLASMA_CHARGED"/>
        <KeyWord name="TF_CUSTOM_PLASMA_GIB"/>
        <KeyWord name="TF_CUSTOM_PLAYER_SENTRY"/>
        <KeyWord name="TF_CUSTOM_PRACTICE_STICKY"/>
        <KeyWord name="TF_CUSTOM_PUMPKIN_BOMB"/>
        <KeyWord name="TF_CUSTOM_ROCKET_DIRECTHIT"/>
        <KeyWord name="TF_CUSTOM_RUNE_REFLECT"/>
        <KeyWord name="TF_CUSTOM_SAPPER_RECORDER_DEATH"/>
        <KeyWord name="TF_CUSTOM_SHOTGUN_REVENGE_CRIT"/>
        <KeyWord name="TF_CUSTOM_SLAP_KILL"/>
        <KeyWord name="TF_CUSTOM_SPELL_BATS"/>
        <KeyWord name="TF_CUSTOM_SPELL_BLASTJUMP"/>
        <KeyWord name="TF_CUSTOM_SPELL_FIREBALL"/>
        <KeyWord name="TF_CUSTOM_SPELL_LIGHTNING"/>
        <KeyWord name="TF_CUSTOM_SPELL_METEOR"/>
        <KeyWord name="TF_CUSTOM_SPELL_MIRV"/>
        <KeyWord name="TF_CUSTOM_SPELL_MONOCULUS"/>
        <KeyWord name="TF_CUSTOM_SPELL_SKELETON"/>
        <KeyWord name="TF_CUSTOM_SPELL_TELEPORT"/>
        <KeyWord name="TF_CUSTOM_SPELL_TINY"/>
        <KeyWord name="TF_CUSTOM_STANDARD_STICKY"/>
        <KeyWord name="TF_CUSTOM_STICKBOMB_EXPLOSION"/>
        <KeyWord name="TF_CUSTOM_SUICIDE"/>
        <KeyWord name="TF_CUSTOM_TAUNTATK_GASBLAST"/>
        <KeyWord name="TF_CUSTOM_TAUNT_ALLCLASS_GUITAR_RIFF"/>
        <KeyWord name="TF_CUSTOM_TAUNT_ARMAGEDDON"/>
        <KeyWord name="TF_CUSTOM_TAUNT_ARROW_STAB"/>
        <KeyWord name="TF_CUSTOM_TAUNT_BARBARIAN_SWING"/>
        <KeyWord name="TF_CUSTOM_TAUNT_ENGINEER_ARM"/>
        <KeyWord name="TF_CUSTOM_TAUNT_ENGINEER_SMASH"/>
        <KeyWord name="TF_CUSTOM_TAUNT_FENCING"/>
        <KeyWord name="TF_CUSTOM_TAUNT_GRAND_SLAM"/>
        <KeyWord name="TF_CUSTOM_TAUNT_GRENADE"/>
        <KeyWord name="TF_CUSTOM_TAUNT_HADOUKEN"/>
        <KeyWord name="TF_CUSTOM_TAUNT_HIGH_NOON"/>
        <KeyWord name="TF_CUSTOM_TAUNT_UBERSLICE"/>
        <KeyWord name="TF_CUSTOM_TELEFRAG"/>
        <KeyWord name="TF_CUSTOM_THROWABLE"/>
        <KeyWord name="TF_CUSTOM_THROWABLE_KILL"/>
        <KeyWord name="TF_CUSTOM_TRIGGER_HURT"/>
        <KeyWord name="TF_CUSTOM_WRENCH_FIX"/>
        <KeyWord name="TF_DEATHFLAG_ASSISTERDOMINATION"/>
        <KeyWord name="TF_DEATHFLAG_ASSISTERREVENGE"/>
        <KeyWord name="TF_DEATHFLAG_AUSTRALIUM"/>
        <KeyWord name="TF_DEATHFLAG_DEADRINGER"/>
        <KeyWord name="TF_DEATHFLAG_FIRSTBLOOD"/>
        <KeyWord name="TF_DEATHFLAG_GIBBED"/>
        <KeyWord name="TF_DEATHFLAG_INTERRUPTED"/>
        <KeyWord name="TF_DEATHFLAG_KILLERDOMINATION"/>
        <KeyWord name="TF_DEATHFLAG_KILLERREVENGE"/>
        <KeyWord name="TF_DEATHFLAG_MINIBOSS"/>
        <KeyWord name="TF_DEATHFLAG_PURGATORY"/>
        <KeyWord name="TF_FLAGEVENT_CAPTURED"/>
        <KeyWord name="TF_FLAGEVENT_DEFENDED"/>
        <KeyWord name="TF_FLAGEVENT_DROPPED"/>
        <KeyWord name="TF_FLAGEVENT_PICKEDUP"/>
        <KeyWord name="TF_FLAGEVENT_RETURNED"/>
        <KeyWord name="TF_STUNFLAGS_BIGBONK"/>
        <KeyWord name="TF_STUNFLAGS_GHOSTSCARE"/>
        <KeyWord name="TF_STUNFLAGS_LOSERSTATE"/>
        <KeyWord name="TF_STUNFLAGS_NORMALBONK"/>
        <KeyWord name="TF_STUNFLAGS_SMALLBONK"/>
        <KeyWord name="TF_STUNFLAG_BONKSTUCK"/>
        <KeyWord name="TF_STUNFLAG_CHEERSOUND"/>
        <KeyWord name="TF_STUNFLAG_GHOSTEFFECT"/>
        <KeyWord name="TF_STUNFLAG_LIMITMOVEMENT"/>
        <KeyWord name="TF_STUNFLAG_NOSOUNDOREFFECT"/>
        <KeyWord name="TF_STUNFLAG_SLOWDOWN"/>
        <KeyWord name="TF_STUNFLAG_SOUND"/>
        <KeyWord name="TF_STUNFLAG_THIRDPERSON"/>
        <KeyWord name="TF_WEAPON_BAT"/>
        <KeyWord name="TF_WEAPON_BAT_FISH"/>
        <KeyWord name="TF_WEAPON_BAT_GIFTWRAP"/>
        <KeyWord name="TF_WEAPON_BAT_WOOD"/>
        <KeyWord name="TF_WEAPON_BONESAW"/>
        <KeyWord name="TF_WEAPON_BOTTLE"/>
        <KeyWord name="TF_WEAPON_BREAKABLE_SIGN"/>
        <KeyWord name="TF_WEAPON_BUFF_ITEM"/>
        <KeyWord name="TF_WEAPON_BUILDER"/>
        <KeyWord name="TF_WEAPON_CANNON"/>
        <KeyWord name="TF_WEAPON_CHARGED_SMG"/>
        <KeyWord name="TF_WEAPON_CLEAVER"/>
        <KeyWord name="TF_WEAPON_CLUB"/>
        <KeyWord name="TF_WEAPON_COMPOUND_BOW"/>
        <KeyWord name="TF_WEAPON_CROSSBOW"/>
        <KeyWord name="TF_WEAPON_CROWBAR"/>
        <KeyWord name="TF_WEAPON_DIRECTHIT"/>
        <KeyWord name="TF_WEAPON_DISPENSER"/>
        <KeyWord name="TF_WEAPON_DISPENSER_GUN"/>
        <KeyWord name="TF_WEAPON_DRG_POMSON"/>
        <KeyWord name="TF_WEAPON_FIREAXE"/>
        <KeyWord name="TF_WEAPON_FISTS"/>
        <KeyWord name="TF_WEAPON_FLAMETHROWER"/>
        <KeyWord name="TF_WEAPON_FLAMETHROWER_ROCKET"/>
        <KeyWord name="TF_WEAPON_FLAME_BALL"/>
        <KeyWord name="TF_WEAPON_FLAREGUN"/>
        <KeyWord name="TF_WEAPON_GRAPPLINGHOOK"/>
        <KeyWord name="TF_WEAPON_GRENADELAUNCHER"/>
        <KeyWord name="TF_WEAPON_GRENADE_CALTROP"/>
        <KeyWord name="TF_WEAPON_GRENADE_CLEAVER"/>
        <KeyWord name="TF_WEAPON_GRENADE_CONCUSSION"/>
        <KeyWord name="TF_WEAPON_GRENADE_DEMOMAN"/>
        <KeyWord name="TF_WEAPON_GRENADE_EMP"/>
        <KeyWord name="TF_WEAPON_GRENADE_GAS"/>
        <KeyWord name="TF_WEAPON_GRENADE_HEAL"/>
        <KeyWord name="TF_WEAPON_GRENADE_JAR"/>
        <KeyWord name="TF_WEAPON_GRENADE_JAR_GAS"/>
        <KeyWord name="TF_WEAPON_GRENADE_JAR_MILK"/>
        <KeyWord name="TF_WEAPON_GRENADE_MIRV"/>
        <KeyWord name="TF_WEAPON_GRENADE_MIRVBOMB"/>
        <KeyWord name="TF_WEAPON_GRENADE_MIRV_DEMOMAN"/>
        <KeyWord name="TF_WEAPON_GRENADE_NAIL"/>
        <KeyWord name="TF_WEAPON_GRENADE_NAPALM"/>
        <KeyWord name="TF_WEAPON_GRENADE_NORMAL"/>
        <KeyWord name="TF_WEAPON_GRENADE_ORNAMENT"/>
        <KeyWord name="TF_WEAPON_GRENADE_PIPEBOMB"/>
        <KeyWord name="TF_WEAPON_GRENADE_SMOKE_BOMB"/>
        <KeyWord name="TF_WEAPON_GRENADE_STICKY_BALL"/>
        <KeyWord name="TF_WEAPON_GRENADE_STUNBALL"/>
        <KeyWord name="TF_WEAPON_GRENADE_THROWABLE"/>
        <KeyWord name="TF_WEAPON_GRENADE_WATERBALLOON"/>
        <KeyWord name="TF_WEAPON_HANDGUN_SCOUT_PRIMARY"/>
        <KeyWord name="TF_WEAPON_HANDGUN_SCOUT_SEC"/>
        <KeyWord name="TF_WEAPON_HARVESTER_SAW"/>
        <KeyWord name="TF_WEAPON_INVIS"/>
        <KeyWord name="TF_WEAPON_JAR"/>
        <KeyWord name="TF_WEAPON_JAR_GAS"/>
        <KeyWord name="TF_WEAPON_JAR_MILK"/>
        <KeyWord name="TF_WEAPON_KNIFE"/>
        <KeyWord name="TF_WEAPON_LASER_POINTER"/>
        <KeyWord name="TF_WEAPON_LIFELINE"/>
        <KeyWord name="TF_WEAPON_LUNCHBOX"/>
        <KeyWord name="TF_WEAPON_MECHANICAL_ARM"/>
        <KeyWord name="TF_WEAPON_MEDIGUN"/>
        <KeyWord name="TF_WEAPON_MINIGUN"/>
        <KeyWord name="TF_WEAPON_NAILGUN"/>
        <KeyWord name="TF_WEAPON_NONE"/>
        <KeyWord name="TF_WEAPON_PARACHUTE"/>
        <KeyWord name="TF_WEAPON_PARTICLE_CANNON"/>
        <KeyWord name="TF_WEAPON_PASSTIME_GUN"/>
        <KeyWord name="TF_WEAPON_PDA"/>
        <KeyWord name="TF_WEAPON_PDA_ENGINEER_BUILD"/>
        <KeyWord name="TF_WEAPON_PDA_ENGINEER_DESTROY"/>
        <KeyWord name="TF_WEAPON_PDA_SPY"/>
        <KeyWord name="TF_WEAPON_PDA_SPY_BUILD"/>
        <KeyWord name="TF_WEAPON_PEP_BRAWLER_BLASTER"/>
        <KeyWord name="TF_WEAPON_PIPEBOMBLAUNCHER"/>
        <KeyWord name="TF_WEAPON_PISTOL"/>
        <KeyWord name="TF_WEAPON_PISTOL_SCOUT"/>
        <KeyWord name="TF_WEAPON_PUMPKIN_BOMB"/>
        <KeyWord name="TF_WEAPON_RAYGUN"/>
        <KeyWord name="TF_WEAPON_RAYGUN_REVENGE"/>
        <KeyWord name="TF_WEAPON_REVOLVER"/>
        <KeyWord name="TF_WEAPON_ROCKETLAUNCHER"/>
        <KeyWord name="TF_WEAPON_ROCKETPACK"/>
        <KeyWord name="TF_WEAPON_SCATTERGUN"/>
        <KeyWord name="TF_WEAPON_SENTRY_BULLET"/>
        <KeyWord name="TF_WEAPON_SENTRY_REVENGE"/>
        <KeyWord name="TF_WEAPON_SENTRY_ROCKET"/>
        <KeyWord name="TF_WEAPON_SHOTGUN_BUILDING_RESCUE"/>
        <KeyWord name="TF_WEAPON_SHOTGUN_HWG"/>
        <KeyWord name="TF_WEAPON_SHOTGUN_PRIMARY"/>
        <KeyWord name="TF_WEAPON_SHOTGUN_PYRO"/>
        <KeyWord name="TF_WEAPON_SHOTGUN_SOLDIER"/>
        <KeyWord name="TF_WEAPON_SHOVEL"/>
        <KeyWord name="TF_WEAPON_SLAP"/>
        <KeyWord name="TF_WEAPON_SMG"/>
        <KeyWord name="TF_WEAPON_SNIPERRIFLE"/>
        <KeyWord name="TF_WEAPON_SNIPERRIFLE_CLASSIC"/>
        <KeyWord name="TF_WEAPON_SNIPERRIFLE_DECAP"/>
        <KeyWord name="TF_WEAPON_SODA_POPPER"/>
        <KeyWord name="TF_WEAPON_SPELLBOOK"/>
        <KeyWord name="TF_WEAPON_SPELLBOOK_PROJECTILE"/>
        <KeyWord name="TF_WEAPON_STICKBOMB"/>
        <KeyWord name="TF_WEAPON_STICKY_BALL_LAUNCHER"/>
        <KeyWord name="TF_WEAPON_SWORD"/>
        <KeyWord name="TF_WEAPON_SYRINGEGUN_MEDIC"/>
        <KeyWord name="TF_WEAPON_THROWABLE"/>
        <KeyWord name="TF_WEAPON_TRANQ"/>
        <KeyWord name="TF_WEAPON_WRENCH"/>
        <KeyWord name="TIMER_DATA_HNDL_CLOSE"/>
        <KeyWord name="TIMER_FLAG_NO_MAPCHANGE"/>
        <KeyWord name="TIMER_HNDL_CLOSE"/>
        <KeyWord name="TIMER_REPEAT"/>
        <KeyWord name="Timer"/>
        <KeyWord name="TopMenu"/>
        <KeyWord name="TopMenuAction"/>
        <KeyWord name="TopMenuAction_DisplayOption"/>
        <KeyWord name="TopMenuAction_DisplayTitle"/>
        <KeyWord name="TopMenuAction_DrawOption"/>
        <KeyWord name="TopMenuAction_RemoveObject"/>
        <KeyWord name="TopMenuAction_SelectOption"/>
        <KeyWord name="TopMenuObject"/>
        <KeyWord name="TopMenuObjectType"/>
        <KeyWord name="TopMenuObject_Category"/>
        <KeyWord name="TopMenuObject_Item"/>
        <KeyWord name="TopMenuPosition"/>
        <KeyWord name="TopMenuPosition_LastCategory"/>
        <KeyWord name="TopMenuPosition_LastRoot"/>
        <KeyWord name="TopMenuPosition_Start"/>
        <KeyWord name="TraceEntityEnumerator"/>
        <KeyWord name="TraceEntityFilter"/>
        <KeyWord name="Transaction"/>
        <KeyWord name="UM_BitBuf"/>
        <KeyWord name="UM_Protobuf"/>
        <KeyWord name="USERMSG_BLOCKHOOKS"/>
        <KeyWord name="USERMSG_INITMSG"/>
        <KeyWord name="USERMSG_RELIABLE"/>
        <KeyWord name="UseType"/>
        <KeyWord name="Use_Off"/>
        <KeyWord name="Use_On"/>
        <KeyWord name="Use_Set"/>
        <KeyWord name="Use_Toggle"/>
        <KeyWord name="UserMessageType"/>
        <KeyWord name="UserMsg"/>
        <KeyWord name="VDECODE_FLAG_ALLOWNOTINGAME"/>
        <KeyWord name="VDECODE_FLAG_ALLOWNULL"/>
        <KeyWord name="VDECODE_FLAG_ALLOWWORLD"/>
        <KeyWord name="VDECODE_FLAG_BYREF"/>
        <KeyWord name="VENCODE_FLAG_COPYBACK"/>
        <KeyWord name="VOICE_LISTENALL"/>
        <KeyWord name="VOICE_LISTENTEAM"/>
        <KeyWord name="VOICE_MUTED"/>
        <KeyWord name="VOICE_NORMAL"/>
        <KeyWord name="VOICE_SPEAKALL"/>
        <KeyWord name="VOICE_TEAM"/>
        <KeyWord name="VOTEFLAG_NO_REVOTES"/>
        <KeyWord name="VOTEINFO_CLIENT_INDEX"/>
        <KeyWord name="VOTEINFO_CLIENT_ITEM"/>
        <KeyWord name="VOTEINFO_ITEM_INDEX"/>
        <KeyWord name="VOTEINFO_ITEM_VOTES"/>
        <KeyWord name="VoteCancel_Generic"/>
        <KeyWord name="VoteCancel_NoVotes"/>
        <KeyWord name="VoteHandler"/>
        <KeyWord name="any"/>
        <KeyWord name="bool"/>
        <KeyWord name="break"/>
        <KeyWord name="case"/>
        <KeyWord name="char"/>
        <KeyWord name="const"/>
        <KeyWord name="continue"/>
        <KeyWord name="decl"/>
        <KeyWord name="default"/>
        <KeyWord name="delete"/>
        <KeyWord name="do"/>
        <KeyWord name="else"/>
        <KeyWord name="enum"/>
        <KeyWord name="false"/>
        <KeyWord name="featureStatus"/>
        <KeyWord name="file"/>
        <KeyWord name="findMapResult"/>
        <KeyWord name="float"/>
        <KeyWord name="for"/>
        <KeyWord name="forward"/>
        <KeyWord name="funcenum"/>
        <KeyWord name="functag"/>
        <KeyWord name="function"/>
        <KeyWord name="function"/>
        <KeyWord name="if"/>
        <KeyWord name="int"/>
        <KeyWord name="methodmap"/>
        <KeyWord name="native"/>
        <KeyWord name="new"/>
        <KeyWord name="null"/>
        <KeyWord name="property"/>
        <KeyWord name="public"/>
        <KeyWord name="return"/>
        <KeyWord name="sizeof"/>
        <KeyWord name="static"/>
        <KeyWord name="stock"/>
        <KeyWord name="struct"/>
        <KeyWord name="switch"/>
        <KeyWord name="this"/>
        <KeyWord name="true"/>
        <KeyWord name="typedef"/>
        <KeyWord name="typeset"/>
        <KeyWord name="union"/>
        <KeyWord name="view_as"/>
        <KeyWord name="void"/>
        <KeyWord name="while"/>
    </AutoComplete>
</NotepadPlus>
